number,created_at,merged_at,closed_at,files,additions,deletions,body_text,participants,comments
2482,2016-03-10T09:26:07Z,2016-11-24T22:39:43Z,2016-11-24T22:39:43Z,1,40,1,"This fix allows server to serve the sourcemap of socket.io-client generated by webpack builder using gulp build task.
The corresponding PR for socket.io-client is socketio/socket.io-client#953
Tested in Chrome and Firefox using a custom package of socket.io-client with sourcemap file. It also catches the error when there is not sourcemap available in socket.io-client.
Screenshots of how the generated source map looks in browsers:",2,5
2675,2016-09-10T13:34:10Z,2016-11-18T00:52:45Z,2016-11-18T00:52:45Z,3,20,1,"make the example autonomous (npm install && npm start)
add disconnect/reconnect logs (and send username on reconnection)",4,5
2722,2016-10-17T05:32:17Z,,2016-10-21T01:29:23Z,1,3,32,"There already exists client function in test script for creating client.
This commit simplify the test script.",2,1
2731,2016-10-21T01:34:51Z,2016-10-24T00:35:01Z,2016-10-24T00:35:01Z,1,3,7,"I recreated the pull request.
cc: @darrachequesne",2,1
2745,2016-11-08T16:23:06Z,2016-11-16T00:17:20Z,2016-11-16T00:17:20Z,2,7,11,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour
Right now parameters passed during handshake, such as tokens, are being dropped.
New behaviour
Parameters are preserved as intended
Other information (e.g. related issues)
Fixes #2712",5,8
2748,2016-11-12T22:26:59Z,2016-11-15T20:52:56Z,2016-11-15T20:52:56Z,2,13,5,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour
Previously unable to pass a done callback to the Server#close() method.
New behaviour
Now able to pass a done callback to the Server#close() method.
Other information (e.g. related issues)
candidate for #2739",3,1
2776,2016-12-01T21:04:10Z,,2021-01-14T23:36:53Z,2,93,66,"The kind of change this PR does introduce
A code change that improves performance.
Current behaviour
The slim client is not served.
New behaviour
The new slim client (and its source map) are served.
Other information (e.g. related issues)
This refactor also:

Gzips the response.
Streams the files as binary, instead of buffering strings on init and converting the strings back to binary on each request.
Removes code duplication for source map serving.

I also added test for serving the source maps and slim client.",3,6
2838,2017-01-26T01:14:15Z,,2017-06-03T12:47:51Z,4,53,3,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour
When an object is emitted, the hasBin() function is used which iterates through the object checking for binary data. (https://github.com/socketio/has-binary)
New behaviour
The hasBinary flag allows for you to specify whether the object you emit has binary data or not, which skips the inefficient hasBin() function.  You can now do
socket.hasBinary(true).emit(""hello"",someobjectwithbinary); // Contains binary data

socket.hasBinary(false).emit(""helloagain"",objectwithnobin); // No binary data

socket.emit(""bye"",anotherobject); // normal function

Other information (e.g. related issues)
I found out that I could make socket.io two times faster by implementing this. Since in many circumstances a developer would know when he/she will send binary data (or not), the performance can be drastically improved by providing this information. This is because without it, the HasBinary function will run, which itinerates through everything in a object to check for binary data. This is very inefficient with large objects. This new flag allows for developers to fix this problem.",5,14
2961,2017-06-03T22:14:20Z,2017-06-08T10:28:57Z,2017-06-08T10:28:57Z,1,1,1,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour




New behaviour

Update URL of badge to https://slackin-socketio.now.sh/badge.svg
Update URL To slack channel https://slackin-socketio.now.sh


Other information (e.g. related issues)",2,1
3104,2017-11-02T19:10:07Z,2018-11-20T07:01:10Z,2018-11-20T07:01:10Z,1,12,6,"Added support for touch to the whiteboard example.
The kind of change this PR does introduce

 a bug fix

Current behavior
Touch is not working on the whiteboard example
New behavior
Added support for touch in whiteboard example
Other information (e.g. related issues)",3,1
3240,2018-05-07T16:01:49Z,2021-01-14T23:36:17Z,2021-01-14T23:36:17Z,1,39,43,"Add default initializers
Use let and const instead var

The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour
The chat example can be updated with ES6 features like default params, constants (avoiding the use of var), and template literals.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
New behaviour
The chat example with these three features.
Other information (e.g. related issues)",5,2
3512,2019-11-09T22:57:44Z,,2020-09-19T01:02:31Z,1,1,1,"The kind of change this PR does introduce

 an update to the document",4,2
3557,2020-02-23T13:33:12Z,,2021-01-14T23:31:58Z,1,3,5,"The old logic missed some places and was not able to look into the node_modules of the socket.io library itself.
The new logic always uses require.resolve to lookup the ""correct"" location for the socker.io-client library and then construct the path correctly
This fixes #3555
A fast release of a fixed version would be awesome!
The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behaviour
New behaviour
Other information (e.g. related issues)",3,12
3699,2020-11-18T04:44:52Z,2021-01-14T23:28:21Z,2021-01-14T23:28:21Z,1,1,1,"Exports the Namespace and Socket type from MJS wrapper
The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
MJS wrapper only exports Server
New behavior
MJS wrapper exports Server, Namaspace and Socket types
Other information (e.g. related issues)
I would say is a continuation of PR #3684 and my comment there
#3684 (comment)",3,4
3700,2020-11-18T04:52:42Z,2020-11-25T10:09:18Z,2020-11-25T10:09:18Z,1,2,2,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
PR template has ""behavior"" spelled ""behaviour""
New behavior
PR template now has ""behavior""  spelled correctly",3,0
3822,2021-03-01T21:46:45Z,,2021-03-09T23:27:14Z,11,2018,111,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
User events
EventEmitter functions, namely on and emit, accept a string as the event name, and any[] as the remaining parameters. This allows users to:

Register listeners that listen to wrong event names
Register listeners that don't match the emitted values

Reserved events
Because the event emitter functions aren't strictly typed, it also means that server.on(""connection"", (socket: Socket) => { ... }) needs an explicit cast of socket: Socket.
New behavior
User events
TypeScript users can define interfaces for the API between server and client by defining interfaces:
interface Messages {
  hello: string;
}
When creating the Server, users can optionally pass this interface as a type parameter:
const server = new Server<Messages>(httpServer);
With this in place, calls to Socket.emit and Socket.on are strictly typed to only allow emitting and listening to ""hello"" events:
server.on(""connection"", (socket) => {
  socket.on(""hello"", (message) => console.log(message)); // works
  socket.on(""goodbye"", (message) => console.log(message)); // doesn't type check
});
It's also possible to define different messages for each direction of the connection:
interface ClientToServerMessages {
  ping: void;
}

interface ServerToClientMessages {
  pong: void;
}

const server = new Server<ClientToServerMessages, ServerToClientMessages>(httpServer);
server.on(""connection"", (socket) => {
  socket.on(""ping"", () => socket.emit(""pong"")); // works
  socket.on(""pong"", () => socket.emit(""ping"")); // doesn't type check
});
Note that if no type parameter is passed to Server, then events are typed as before.
Reserved events
server.on(""connection"", socket => { ... }) now correctly infers the Socket type for socket. No cast needed! Other reserved events are now also correctly inferred. Strict typing of reserved events is also present when no type parameters are passed to Server.
This does make this a breaking change if users rely on the on callback arguments being of type any. This was the case in this project's tests, where socket being of typed any was used to access private members of Socket. The fix is to cast as any, which makes the implicit any type explicit.
Other information (e.g. related issues)
Fixes #3742",3,3
3892,2021-04-21T20:29:15Z,,2021-08-30T06:36:30Z,1,62,0,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
RemoteSocket objects cannot emit to other members in some rooms. This simple fix is letting users specify to which rooms the Socket (retrieved as RemoteSocket) is into, and broadcast to them, excepting the original sender.
io.of('/some-namespace').fetchSockets().then(sockets => {
    sockets.forEach(socket => {
        // Issue: What if you want to emit to everyone but a RemoteSocket?
        if (typeof socket.to !== 'undefined') {
            socket.to('some-room').emit('event', { foo: 'bar' });
        }
    });
});
New behavior
You can now call .to() and .in() on RemoteSocket objects. This way, you can use for example the Redis adapter and use the RemoteSocket as a normal Socket object when broadcasting to everyone except the sender:
io.of('/some-namespace').fetchSockets().then(sockets => {
    sockets.forEach(socket => {
        socket.to('some-room').emit('event', { foo: 'bar' });
    });
});
Other information (e.g. related issues)
Closes #3857
In #3857 is described in simple terms the desired behavior.
This also fixes a use case I confront with (and perhaps many will confront).
Consider having a multi-node or a multi-process deployment of Socket.IO, each one exposing a REST API to accept broadcasting messages (same as Pusher API) and their WS server, used by the clients. Both use Redis adapter and are set up properly for high scalability.
If Alice is on Node 1, and Bob is on Node 2, and Alice makes an HTTP request to Node 2 to emit to everyone but to Alice (by using the Client Socket ID), the fetchSockets() call will retrieve Bob as Socket and Alice as RemoteSocket, but calling .emit() from RemoteSocket will not allow Alice to emit to anyone else.",2,1
4024,2021-07-17T21:01:49Z,2021-08-30T05:59:47Z,2021-08-30T05:59:47Z,2,6,2,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
Client JavaScript will not be served if the request URL contains a query string.
New behavior
Client JavaScript will be served, even if the request URL contains a query string.
Other information (e.g. related issues)
Resolves #4023",3,4
4234,2022-01-03T16:06:01Z,2022-01-06T06:14:56Z,2022-01-06T06:14:56Z,5,60,38,Adds #4229 (comment),2,2
4279,2022-02-13T04:05:33Z,,2022-04-20T20:23:10Z,6,151,5,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
New behavior
Other information (e.g. related issues)",3,1
4598,2023-01-18T02:58:06Z,,2023-10-10T18:06:15Z,91,9182,8714,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
The current examples doesn't include how to implement private messaging in React.
New behavior
This PR adds a new example for implementing private messaging in React.
Other information (e.g. related issues)
#4580",10,6
4622,2023-02-03T12:24:18Z,,2023-02-04T08:04:13Z,2,9,7,"The kind of change this PR does introduce

 a new feature

New behavior
The ""disconnecting"" and ""disconnect"" events will now include additional details to help debugging if anything has gone wrong.
The goal is to mirror this change made to the client : socketio/socket.io-client@b862924",3,3
4625,2023-02-09T18:05:25Z,,2023-02-20T00:17:18Z,1,1,1,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
Types are not found when typescript moduleResolution is set to NodeNext, issue #4621
New behavior
Works normally with NodeNext
Other information (e.g. related issues)
Must be merged together with the engine.io PR socketio/engine.io#669",3,1
4675,2023-03-28T08:41:03Z,,2023-08-11T11:44:43Z,1,2,0,"Parser maybe parse undefined value to null, like msgpackr's encodeUndefinedAsNil option.
The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
Throw error.
New behavior
Work fine.
Other information (e.g. related issues)",3,3
4773,2023-07-19T08:06:04Z,2023-07-21T06:33:46Z,2023-07-21T06:33:46Z,3,74,4,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Change is fixing bug described here: #4772",3,4
4817,2023-09-02T20:54:13Z,2023-10-11T08:37:13Z,2023-10-11T08:37:13Z,11,631,321,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
The types of the emit, emitWithAck, serverSideEmit, and serverSideEmitWithAck have issues with their types.
They revert to any very often or aren't arrays when they should be (server/namespace emit and server/namespace => broadcastOperator emit).
New behavior
This fixes most of this behavior and adds tests for them.
Other information (e.g. related issues)
Fixes #4813",3,7
4878,2023-11-25T00:40:42Z,2024-01-02T16:43:10Z,2024-01-02T16:43:10Z,1,1,1,"The kind of change this PR does introduce

 a bug fix
 a new feature
 an update to the documentation
 a code change that improves performance
 other

Current behavior
On remote sockets don't call callback with arguments.
Returns null as error and data.
New behavior
On remote sockets with call callback with arguments.
Now it returns error and data from callback.
Other information (e.g. related issues)",2,0
