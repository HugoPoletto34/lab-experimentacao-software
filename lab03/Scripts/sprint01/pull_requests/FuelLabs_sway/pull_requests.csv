number,created_at,merged_at,closed_at,files,additions,deletions,body_text,participants,comments
2,2021-01-25T22:40:31Z,2021-05-08T14:03:18Z,2021-05-08T14:03:18Z,81,13255,14,"This PR will track progress and tasks related to the HLL.
The list below is subject to change and serves only to approximate.
Design

 basic language design. making quick decisions based on the philosophy of adopting decisions from familiar languages (rust, solidity)
 formal language synax spec
 heap memory management model (non-freeing permissions based model described by @adlerjohn )
 register management
 macros

Lexing

 functions
 traits
 expressions
 literals
 declarations
 contract, script, and predicate definitions
 use statements
 struct definitions
 typedefs
 sum types, union types
 match exprs
 type ascriptions
 generic types
 vectors and arrays
 references
 impl traits
 colon-delineated paths for calling things
 struct expressions
 mut keyword
 generic structs
 loops
 variable re-assignments
 unit type annotation
 inline assembly

Parsing to AST

 functions
 traits
 expressions
 literals
 declarations
 namespacing in ast
 pattern matching
 exhaustive matches
 generic types
 vectors and arrays
 references
 match exprs
 impl traits
 colon-delineated paths for calling things
 struct expressions
 immutability by default
 Generic structs
 loops
 variable re-assignment
 handling imports
 inline assembly
 trait constraint solver
 generic type checking in traits
 generic type checking in structs
 generic type checking in enums

Program Validity and General Features

 type inferencing and type checking system
 namespaces
 trait checking on generic types
 stdlib written w/ implemented inline bytecode assembly
 control flow analysis

AST Optimizations (incomplete list)

 dead branch elimination
 denoting constantly evaluatable exprs and fns

Assembly Generation (incomplete list)

 non-branching expressions
 branching expressions
 function declarations
 function calls
 contract calls

Other

 formatted error spans and error messages
 error recovery (recovering from errors and reporting multiple back to the user instead of just one -- currently fails on first error)

Things I am choosing to address in future PRs (still before mainnet release probably):

Lifetime checking
Macros",3,12
34,2021-05-08T14:38:31Z,2021-05-09T14:06:56Z,2021-05-09T14:06:56Z,2,15,3,,2,0
35,2021-05-08T18:00:13Z,2021-05-09T12:49:41Z,2021-05-09T12:49:41Z,11,69,0,Add an mdBook book for documentation with some empty pages that can be filled in later. Also add Action to deploy automatically to GitHub pages (tested the same action in a new private repo so it should work fine).,2,0
37,2021-05-09T14:09:55Z,2021-05-14T16:32:41Z,2021-05-14T16:32:41Z,42,1211,697,"Well, it started with writing a testing harness, and then I kept catching bugs and one thing led to another...

Introduce a testing harness that compiles programs using forc  to catch regressions in integration
refactor return statements (code organization)
fixed bug where enums would sometimes resolve to the inner type they represented instead of the enum type itself. e.g. MyEnum::Variant(3) would have type Numeric instead of MyEnum.
Add the ability to annotate the return type of the returned register from inline assembly, so you don't get u64 downcast warnings every time
Introduce the concept of a PartiallyResolvedType, to allow for delayed resolution of some types. This is used to delay deciding what specific integer type a numeric literal has until it is used, instead of always defaulting to u64 and getting downcast warnings.
If there is an error within a trait implementation function, it would previously cause a ""missing function in impl trait"" warning as a side effect. This is no longer the case.
Allow implementing traits from another module, like impl std::ops::Eq
Fix a bug where self was not being properly handled in method invocations.
Update GitHub actions to run the new test suite",2,1
43,2021-05-14T16:31:18Z,2021-05-15T20:44:43Z,2021-05-15T20:44:43Z,11,205,256,"Closes #42
Also does some housekeeping regarding the example project dir and fixes an off-by-one error.",2,0
44,2021-05-17T16:09:06Z,2021-05-18T19:25:27Z,2021-05-18T19:25:27Z,12,198,36,"Allow asm expressions with no initialized registers
Allow references to reserved registers by name (cgas, sp, etc.)
Warn if the user ""shadows"" a reserved ASM register
Add test case for accessing reserved registers
Fix bug where expressions in the implicit return position did not get added to the dead code analysis graph",3,0
45,2021-05-18T00:42:40Z,2021-05-18T21:50:51Z,2021-05-18T21:50:51Z,19,761,454,"Closes #39
Continues to re-pass failed top-level AST nodes, reversing the order each time, until either the errored nodes reach a stable amount of errors or compilation succeeds. This removes any dependency on the ordering of declarations, and is a much more simple algorithm than constructing a dependency graph.
A test for multi-pass compilation is also added in this PR.",2,0
48,2021-05-19T15:34:29Z,2021-05-21T11:57:07Z,2021-05-21T11:57:07Z,75,4193,97,"Includes:

core_lang fields changed to public in order to be usable outside of that crate
restructure of forc CLI, separating operation functions from command line handler functions
Language server initial implementation
vscode-plugin dev implementation",3,0
49,2021-05-19T21:21:01Z,2021-05-19T22:31:08Z,2021-05-19T22:31:08Z,1,1,0,Use profile: minimal when installing toolchain. Should speed up CI.,2,0
50,2021-05-22T19:17:47Z,2021-05-23T17:57:56Z,2021-05-23T17:57:56Z,18,2460,1329,"This merge does not yet handle encoding the data section as bytes after the program section, but it is already large enough so I'm going to feature-freeze this for the sake of a palatable code review.
This merge includes:

VirtualOps -- ops that have not yet been allocated and are unlimited
AllocatedOps -- allocated ops, will never be more than 48
RealizedOps -- ops with no OrganizationalOps. That means the labels are converted to offsets and the references to the data section are also ""realized"" into offsets into the data section. That latter part is not included in this merge.
Updated the ops to use the latest spec
A basic register allocation algorithm which returns registers back to the pool when they are never read again.
VirtualImmediateN -- a size-checked version of our immediate types, to ensure no overflow or user error by using immediates that are too large.",2,1
52,2021-05-23T18:02:19Z,2021-05-30T00:09:34Z,2021-05-30T00:09:34Z,20,799,187,"Tracks the generation of runnable bytes from the compiler.

introduce a static-length str type for char arrays baked into the data section. Length is a part of the type, see below screenshot:



Generate runnable bytecode (accuracy pending VM tests in a subsequent merge -- do not rely on bytecode accuracy from this PR
Defer data section ""rendering"" until the finalization of the asm into bytecode
Adds a bytecode preamble as a place for metadata, currently only used for the data section begin point
Add a --asm flag to forc build to dump the ASM before it is turned into Vec<u8>

I would recommend not trying to manually (mentally) scan this code for bytecode correctness just yet -- we will have tests and debugging with the VM up and running very soon and it will simply be easier to detect errors in that part of the code at that time.",5,0
53,2021-05-26T13:27:07Z,2021-05-26T15:28:53Z,2021-05-26T15:28:54Z,2,1,46,Also remove codecov since it's unused for now. We can re-add it later properly.,3,0
54,2021-05-26T13:38:06Z,2021-05-26T15:45:36Z,2021-05-26T15:45:36Z,16,0,2723,"removed vscode-plugin from this repo
removed js-related stuff from .gitignore",3,0
55,2021-05-26T14:05:23Z,2021-05-26T15:28:41Z,2021-05-26T15:28:41Z,1,1,0,fuel-tx will be needed for forc to craft transactions.,3,0
56,2021-05-26T20:57:28Z,2021-05-26T23:22:37Z,2021-05-26T23:22:37Z,34,18,22,"Rename uses to ""Fume"" to ""Sway"" and .fm to .sw.",2,0
59,2021-05-28T15:47:13Z,2021-06-01T14:48:07Z,2021-06-01T14:48:07Z,24,1645,70,"Change the basic compilation tests to run through the VM and validate that they do not panic or return an error.
Draft pending #52",3,1
61,2021-05-30T00:13:30Z,2021-06-03T13:32:12Z,2021-06-03T13:32:12Z,4,286,87,"expand the stdlib to include Add, Subtract, Eq, Ord, Multiply, and Divide for all primitive numeric types
fix bug where methods defined in the interface surface were unavailable to methods in the methods section of trait declarations, e.g.

trait MyTrait {
  fn foo() -> u64;
} {
  fn bar() -> u64 {
     // this function should be able to use `MyTrait::foo`
    foo()
  }
}

My plan is to put this up for review now, then build a feature that allows you to include multiple files in one project (#62), and then use that to further extend the stdlib.",2,0
62,2021-05-30T15:40:54Z,2021-06-09T14:15:42Z,2021-06-09T14:15:42Z,32,762,135,"Right now, sway programs must be one file. If you want to import other shared code, it must come from a separate library project, which also must only contain one source file.
This draft PR tracks the implementation of include statements, which will allow you to declare a library within your own project and use it in your namespace.
I have chosen to use the specific wording include <name> instead of Rust's mod <name> for two reasons:

The module system in Rust is very powerful but also complicated and often complained about
We don't actually want to reimplement the Rust module system, at least I think, because it is decently complicated and unnecessary for our problem domain. Even more unnecessary for the early versions of Sway.

This feature will be used to further extend the stdlib beyond math ops, which are defined in the current stdlib main.sw file.
See this project in the test suite for some examples of using imports.",2,1
64,2021-05-31T18:34:48Z,2021-06-07T15:51:44Z,2021-06-07T15:51:44Z,5,87,3,"implemented mvprun

compile code at ""../example_project/fuel_project"" and store it as script
read --data argument from CLI and convert it to bytes and store it as script_data
create tx with these two fields
run it with Interpreter::execute_tx
output the log",3,3
72,2021-06-03T23:27:29Z,2021-06-04T14:37:25Z,2021-06-04T14:37:25Z,9,87,14,"closes #69
Also implement byte serialization for remaining literal formats, unit expressions, and add a test case for a large function application.",2,0
74,2021-06-05T08:16:32Z,2021-06-14T16:28:04Z,2021-06-14T16:28:04Z,9,555,11,,2,3
77,2021-06-11T10:01:04Z,2021-06-17T07:58:20Z,2021-06-17T07:58:20Z,4,257,34,"This initial implementation contains the types used by the Sway-DAP
implementation as compile-time generated source mappings.",3,0
81,2021-06-16T16:15:24Z,2021-06-17T14:29:16Z,2021-06-17T14:29:16Z,21,238,56,"Closes #80


I have extracted Formatter into it's own library, since now it's used by sway-server and forc, respectively.


Then I have refactored sway-server code that deals with formatting to use newly created Formatter library.


And then I have created forc fmt that uses Formatter library as well, including --check option to just check the code without formatting",2,0
82,2021-06-16T16:51:00Z,,2021-06-29T15:34:17Z,54,2592,1126,"Implementing Vec is the first bit of serious Sway code being written. It is also the first generic data structure with trait constraints. Because of this the implementation of Vec has served as a smoke test, identifying some lacking areas and bugs. This PR contains both the implementation of Vec as well as those bugfixes and improvements:

Implement Vec in the standard library

The methods are limited, for now. Just the basics: push, pop, new, with_capacity.


Implement trait constraints in generic code
implement fully qualified method invocations

For this, I did introduce a bit of special syntax. We can remove it later if we are able to make the parser smarter, but it was the shortest path forward for now. If you are referring to a a method via its type, like (Rust) T::clone(), then you must flag that it is a type with a ~. So, in Sway, ~T::clone(). You can see this is used in the implementation of vectors.
This means there are two ways to refer to methods, just like Rust: a.b.foo() and TypeName::foo(a.b), assuming the first argument is self.


Fix some parsing bugs in method invocations
Implement inner struct field reassignments",4,0
83,2021-06-17T05:21:09Z,2021-09-01T06:50:12Z,2021-09-01T06:50:12Z,11,277,1,"This is by no means exhaustive or even halfway complete, just getting the ball rolling so we can add to it over time.",3,0
84,2021-06-17T12:10:56Z,2021-06-17T14:00:05Z,2021-06-17T14:00:05Z,1,186,48,"A call frame holds a contract while a transaction script doesn't. This
structural difference is specific for the transaction script context,
and doesn't map the specifics of predicate calls - that should bring
more variants.
This commit introduces the Context type to encapsulate all of these
variants.",2,0
87,2021-06-18T19:21:59Z,2021-06-21T13:39:49Z,2021-06-21T13:39:49Z,2,0,202,,2,0
90,2021-06-21T12:42:40Z,2021-06-22T10:39:11Z,2021-06-22T10:39:12Z,3,99,24,solves #88,2,2
92,2021-06-22T13:08:43Z,2021-06-22T14:10:04Z,2021-06-22T14:10:04Z,4,273,30,"I have added test cases for the formatter and consequently fixed few bugs in it,
also I have added codeType enum instead of using separate fields is_string & is_multiline_comment
this solves #89",2,0
93,2021-06-23T11:26:09Z,2021-06-29T10:52:14Z,2021-06-29T10:52:14Z,13,614,170,"solves #86
Introduced CustomType field for Enum CodeType, to deal with Structs and Enums, to correctly format them
Added a test case for it",3,8
94,2021-06-24T20:38:54Z,2021-07-05T05:26:50Z,2021-07-05T05:26:50Z,36,1571,626,"Implement trait constraints in generic code
implement fully qualified method invocations

For this, I did introduce a bit of special syntax. We can remove it later if we are able to make the parser smarter, but it was the shortest path forward for now. If you are referring to a a method via its type, like (Rust) T::clone(), then you must flag that it is a type with a ~. So, in Sway, ~T::clone(). You can see this is used in the implementation of vectors.
This means there are two ways to refer to methods, just like Rust: a.b.foo() and ~TypeName::foo(a.b), assuming the first argument is self.


Fix some parsing bugs in method invocations
Implement inner struct field reassignments

parsing
semantic analysis
and code generation!


Clean up warnings that have built up over time

The above changes were necessary to allow me to write generic code, which is necessary for the standard library, especially collections.",2,1
99,2021-06-29T11:03:14Z,2021-07-02T08:53:32Z,2021-07-02T08:53:32Z,7,219,45,"Provides flow outlined in #91 , plus I have moved few functions from forc_build to helpers",3,0
100,2021-06-29T15:34:07Z,,2021-08-25T12:32:47Z,4,353,270,"closes #98
This PR will track only Sway code written for the stdlib. Any underlying compiler features needed to make this work will go in separate PRs.

Basic collections for use in contract calls
Contract request and response types
Basic Sized trait, similar to rust's.",2,1
101,2021-06-29T17:13:16Z,2021-07-02T16:58:46Z,2021-07-02T16:58:46Z,9,420,8,"As described in #67
These changes enable users to specify dependencies that are
hosted on GitHub by defining the property git = "":url""
in the dependency, e.g:
std = { git = "":url""}

For now the GitHub repo must be public.
It also enables users to specify either a branch or a versioned tag
along with the git repo, e.g:
std = { git = "":url"", branch = ""my-branch""}

and:
std = { git = "":url"", version = ""0.0.1""}

As of now, version takes precedence over branch references.
These remote dependencies will be installed under ~/.forc/.
If no version/branch is specified, it will download the default
branch at the latest commit.
Future work includes:

A command to check if there are remote changes to the dependency
A command to download updates to the dependencies
I kept this as simple as I could, trying to not pull all the complexity around dependency management that you see in places like cargo. That said, once we have registries and more evolved non-local dependency needs, we'll need to refactor some things, e.g moving dependency-related code out of the forc_build.rs file and creating proper dependency-related abstractions.
Lockfile",4,2
104,2021-07-02T13:48:03Z,2021-07-07T10:15:59Z,2021-07-07T10:15:59Z,6,504,156,"This solves 2 issues,
#95 - now Formatter returns list of errors if parsing fails, and then forc-fmt prints it
#85  - forc-fmt --check displays now diffs of all the files it should format",3,3
106,2021-07-04T04:05:04Z,2021-07-06T21:40:27Z,2021-07-06T21:40:27Z,6,148,19,"This is a draft as it depends on #94, once that goes in then I will clean up the diff here by cherry picking the relevant commits.
Struct field accesses are calculated using the same offset calculation function that is used to lay out the structs in memory in the first place. If the field is a copy type, the value itself is put in the register. If it is not, then a pointer to it (in bytes) is written to the register.",2,0
108,2021-07-04T14:19:23Z,2021-07-04T16:34:56Z,2021-07-04T16:34:56Z,1,6,2,"This PR allows for ASM expressions that don't return a type. Previously, it was assumed that all ASM expressions return a value, but this was an inconsistency between what the grammar allows and what the type checker enforces.",2,0
110,2021-07-05T05:40:31Z,2021-07-05T17:39:02Z,2021-07-05T17:39:02Z,3,37,24,"This PR:

Fixes a bug in the type checker of struct subfield expressions
Prevents a bad error message when there is an error inside the function arguments during assembly generation. Previously, the error would result in the argument being reported as missing, when in reality it just was missing from the asm namespace.
remove the below errors when a method is called on an error value",2,0
117,2021-07-09T14:47:25Z,2021-07-15T17:03:18Z,2021-07-15T17:03:18Z,8,163,26,"solves #116

handle dep and use statements correctly
traverse ImplTrait and ImplSelf
traverse all Sway file types (scripts, contracts, libraries and predicates)
handle case when there is a formatting error in a file that is not used",3,0
122,2021-07-09T20:10:43Z,2021-07-14T16:55:07Z,2021-07-14T16:55:07Z,12,951,213,"This PR introduces a new forc command: update.
update, as the name says, updates a given dependency -d or all GitHub-based dependencies in a project's manifest. With one exception: tagged/versioned dependencies, i.e a dependency with version = ""x.y.z"". I chose not to automatically update tagged deps because it would force a change on the manifest file, which I believe the user should be the only one modifying it.
However, if it's not a tagged dependency, i.e: the user specified only a branch or nothing at all (default branch), forc update will pull and install locally the latest commit on that branch, for example:

If you want to update the tag/version of a dependency, you can use forc update --check to check if there are newer versions:

And then grab that newer semver and update your project's Forc.toml with it. Next time you run forc build it will pull and install that new version.
forc update --check also works with untagged dependencies, it will check if there's a newer commit on top of the default/branch:",4,1
125,2021-07-15T16:25:29Z,2021-07-16T13:05:36Z,2021-07-16T13:05:36Z,10,237,162,solves #123,3,0
126,2021-07-17T13:38:16Z,2021-07-19T19:07:30Z,2021-07-19T19:07:30Z,17,44,92,"Remove unused commands, can always re-add them later.
Document CLI commands and options.
Uniform code style for options and documentation.",3,0
128,2021-07-22T15:42:15Z,2021-07-25T14:05:38Z,2021-07-25T14:05:39Z,3,85,3,"solves #118
reused same logic as for Structs, plus cleanup for Expression::DelineatedPath",3,0
129,2021-07-29T12:55:58Z,2021-08-02T17:09:28Z,2021-08-02T17:09:28Z,9,898,0,closes #58,3,2
130,2021-07-30T16:26:37Z,2021-08-05T18:34:57Z,2021-08-05T18:34:57Z,22,907,399,"When at EthCC, John and I had a lot of time to discuss this and ended up with a very solid general layout. When I returned, I ditched the old contract trait branch and started this one, to implement our abi keyword ideas from scratch.
Features
This PR implements parsing, type checking, and dead code analysis for the abi keyword and its two uses -- declaring an abi (contract trait) and casting a byte32 as a contract. Code generation and the ContractRequest struct for contract calls will come in a follow-up PR in an attempt to keep the PRs smaller.
Examples
Declaring a new abi looks like this:
abi MyContract {
  fn foo(a: u64);
  fn bar(a: InputStruct );
} {
  fn baz(a: ()) { }
}
Casting a hash to an ABI looks like this:
let x = abi(MyContract, 0x0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000);
x.foo(5);
Note that when std::chain is done being implemented, we can use the Address type for a stronger byte32 type in this abi.
Terminology

Contract traits are the in-language representation of a contract abi. They behave similar to traits, but represent contracts, hence the name.
A contract caller is the abstract type that represents the ability to call a contract. It is a type whose methods are contract calls.
Contract casting is the process of casting an address into a contract caller via the abi() function.
(for good measure) The abi is the specification essentially describing the function selectors and potential input/output types of the various functions of a contract’s bytecode

Other non-primary features:

Allow underscores in hex and binary literals (0x00_00_00 or 0b101_111_000).
Small bug fix where if a trait interface function had no parameters, the implementation of it would compile even if it specified some parameters.

Screenshots:",2,0
131,2021-08-03T21:18:52Z,2021-10-04T17:14:43Z,2021-10-04T17:14:43Z,15,2950,1,"This is the initial version of the Fuel ABI encoder and decoder in Rust, which will later be used in the SDK to interact with Sway contracts.
Here we have two low-level components: the ABI encoder and decoder that operate on two main abstractions: the ParamType and Token. These components are able to go from Tokens to raw bytes (the encoded tokens) and from raw bytes + ParamTypes to Tokens.
Then, we have a high-level component that operates on the specified JSON ABI contracts, taking in a JSON ABI file and values to be encoded, turning them into ParamTypes and Tokens in order to encode/decode.
There's also an accompanying CLI tool that I used extensively for debugging and playing with the coder, it's under sway-abi-cli/.
Although this PR seems very long, the majority of additions are actually a lot of test cases.",6,2
135,2021-08-09T14:27:16Z,2021-08-29T18:21:58Z,2021-08-29T18:21:58Z,25,897,1446,"Contract Call Code Generation
note: commit messages are not pretty, I'll clean up the squash commit
Summary
This is the follow-up to #130. This merge contains a workaround to get gas forwarding and metadata and the code generation for contract calls.
The Workaround
Until the stdlib is included in the compiler's type checking pass, I cannot reference any stdlib types in the compiler. As a work-around, I'm requiring all abi functions to require all the parameters needed for a call. We can wrap this in a struct after the compiler can reference stdlib types.
The Code Generation
If an abi cast (casted via abi(ContractTrait, hash)) is used to call an abi method (x.abi_method(5, 5, 5, something())), a CALL op is constructed as per the specs. Below is an example:
.program:
ji   i4
noop
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
lw   $ds $is 1
add  $ds $ds $is
lw   $r0 data_0               ; literal instantiation
move $r1 $sp
cfei i16
lw   $r2 data_1               ; literal instantiation
sw   $r1 $r2 i0
lw   $r2 data_2               ; literal instantiation
sw   $r1 $r2 i1
lw   $r1 data_3               ; load fn selector for call
move $r3 $r2
lw   $r2 data_4               ; literal instantiation
lw   $r4 data_5               ; literal instantiation
move $r5 $r0
lw   $r0 data_6               ; literal instantiation
move $r6 $sp
cfei i48
lw   $r7 data_7               ; constant 32 load for call
mcp  $r6 $r0 $r7              ; copy contract address for call
sw   $r6 $r1 i4               ; write fn selector to rA + 32 for call
sw   $r6 $r3 i5               ; move user param for call
call $r6 $r4 $r5 $r2          ; call external contract
ret  $r0                      ; main fn return value
.data:
data_0 .byte32 0x7777777777777777777777777777777777777777777777777777777777777777
data_1 .bool 0x01
data_2 .u64 0x03
data_3 .u32 0xfd31ddb2
data_4 .u64 0x1388
data_5 .u64 0x00
data_6 .byte32 0x8900c5bec4ca97d4febf9ceb4754a60d782abbf3cd815836c1872116f203f861
data_7 .u32 0x20

Testing
script_8 now calls a contract in a script. This is verified to actually execute in the VM. script_7 implements an ABI call in a helper function of a contract abi implementation.
Actual data correctness is not verified and should be considered a next step.
Next Steps

The test suite should validate data outputs, now that that is possible to do, and there basically should just be a ton more testing in general.
Refactor the construction of the $rA register in CALL so that it uses the yet-to-be-specced MCPI instruction, once that instruction is in the specs and VM.
After the stdlib is referable in the compiler, ABI function calls should use the ContractRequest type.

Other Fixes Along the Way

FuelLabs/fuel-vm#17
Fixed bug where method applications were type checking incorrectly, and cleaned up method application type checking code
#140
#138
Updates the test harness to initially deploy a contract to the interpreter's state for testing contract calls.
Updates the test harness to use the latest VM/Interpreter APIs",4,2
137,2021-08-13T22:13:10Z,2021-08-14T03:38:16Z,2021-08-14T03:38:16Z,1,2,2,"Forc was omitting the last op in the bytecode and the table formatting was suboptimal. This tweak fixes that.
before:

 half-word  byte  op                    raw                  notes

         0  0     JI(4)                 [50, 0, 0, 4]        conditionally jumps to byte 16

         1  4     NOOP                  [240, 0, 0, 0]

         2  8     Undefined             [0, 0, 0, 0]         data section offset lo (0)

         3  12    Undefined             [0, 0, 0, 84]        data section offset hi (84)

         4  16    LW(46, 12, 1)         [67, 184, 192, 1]

         5  20    ADD(46, 46, 12)       [16, 186, 227, 0]

         6  24    LW(16, 46, 0)         [67, 66, 224, 0]

         7  28    LW(17, 46, 4)         [67, 70, 224, 4]

         8  32    LW(18, 46, 5)         [67, 74, 224, 5]

         9  36    LW(19, 46, 6)         [67, 78, 224, 6]

        10  40    LW(20, 46, 7)         [67, 82, 224, 7]

        11  44    MOVE(16, 21)          [31, 65, 80, 0]

        12  48    LW(21, 46, 0)         [67, 86, 224, 0]

        13  52    MOVE(22, 5)           [31, 88, 80, 0]

        14  56    CFEI(48)              [64, 0, 0, 48]

        15  60    LW(23, 46, 8)         [67, 94, 224, 8]

        16  64    MCP(22, 21, 23)       [71, 89, 85, 192]

        17  68    SW(22, 17, 4)         [74, 89, 16, 4]

        18  72    SW(22, 18, 5)         [74, 89, 32, 5]

        19  76    CALL(22, 20, 16, 19)  [83, 89, 68, 19]

        20  80    RET(16)               [52, 64, 0, 0]

        21  84    Undefined             [0, 0, 0, 0]

        22  88    Undefined             [0, 0, 0, 0]

        23  92    Undefined             [0, 0, 0, 0]

        24  96    Undefined             [0, 0, 0, 0]

        25  100   Undefined             [0, 0, 0, 0]

        26  104   Undefined             [0, 0, 0, 0]

        27  108   Undefined             [0, 0, 0, 0]

        28  112   Undefined             [0, 0, 0, 0]

        29  116   Undefined             [0, 0, 0, 0]

        30  120   Undefined             [253, 49, 221, 178]

        31  124   Undefined             [0, 0, 0, 0]

        32  128   Undefined             [0, 0, 0, 7]

        33  132   Undefined             [0, 0, 0, 0]

        34  136   Undefined             [0, 0, 0, 5]

        35  140   Undefined             [0, 0, 0, 0]

        36  144   Undefined             [0, 0, 0, 6]

        37  148   Undefined             [0, 0, 0, 0]

after:
half-word  byte  op                    raw                  notes
         0  0     JI(4)                 [50, 0, 0, 4]        conditionally jumps to byte 16
         1  4     NOOP                  [240, 0, 0, 0]
         2  8     Undefined             [0, 0, 0, 0]         data section offset lo (0)
         3  12    Undefined             [0, 0, 0, 84]        data section offset hi (84)
         4  16    LW(46, 12, 1)         [67, 184, 192, 1]
         5  20    ADD(46, 46, 12)       [16, 186, 227, 0]
         6  24    LW(16, 46, 0)         [67, 66, 224, 0]
         7  28    LW(17, 46, 4)         [67, 70, 224, 4]
         8  32    LW(18, 46, 5)         [67, 74, 224, 5]
         9  36    LW(19, 46, 6)         [67, 78, 224, 6]
        10  40    LW(20, 46, 7)         [67, 82, 224, 7]
        11  44    MOVE(16, 21)          [31, 65, 80, 0]
        12  48    LW(21, 46, 0)         [67, 86, 224, 0]
        13  52    MOVE(22, 5)           [31, 88, 80, 0]
        14  56    CFEI(48)              [64, 0, 0, 48]
        15  60    LW(23, 46, 8)         [67, 94, 224, 8]
        16  64    MCP(22, 21, 23)       [71, 89, 85, 192]
        17  68    SW(22, 17, 4)         [74, 89, 16, 4]
        18  72    SW(22, 18, 5)         [74, 89, 32, 5]
        19  76    CALL(22, 20, 16, 19)  [83, 89, 68, 19]
        20  80    RET(16)               [52, 64, 0, 0]
        21  84    Undefined             [0, 0, 0, 0]
        22  88    Undefined             [0, 0, 0, 0]
        23  92    Undefined             [0, 0, 0, 0]
        24  96    Undefined             [0, 0, 0, 0]
        25  100   Undefined             [0, 0, 0, 0]
        26  104   Undefined             [0, 0, 0, 0]
        27  108   Undefined             [0, 0, 0, 0]
        28  112   Undefined             [0, 0, 0, 0]
        29  116   Undefined             [0, 0, 0, 0]
        30  120   Undefined             [253, 49, 221, 178]
        31  124   Undefined             [0, 0, 0, 0]
        32  128   Undefined             [0, 0, 0, 7]
        33  132   Undefined             [0, 0, 0, 0]
        34  136   Undefined             [0, 0, 0, 5]
        35  140   Undefined             [0, 0, 0, 0]
        36  144   Undefined             [0, 0, 0, 6]
        37  148   Undefined             [0, 0, 0, 0]
        38  152   Undefined             [0, 0, 0, 32]",3,0
138,2021-08-14T15:27:18Z,2021-08-15T02:00:57Z,2021-08-15T02:00:57Z,2,7,7,"In my investigation of bytecode performance (in order to get #135 working), I have uncovered a few bugs. This is the second in a series of off-by-one errors I'm calling ""Off By One: Two"" (the sequel to #137).
The register allocator was considering registers never used again early, because the current opcode being scanned was omitted from the scan. Off by one. So sometimes data would be loaded from uninitialized registers.
This also adds some Debug implementations because I used those to track down this bug, and I'm sure they will be needed in the future.",2,0
139,2021-08-16T01:02:37Z,2021-08-16T04:11:22Z,2021-08-16T04:11:22Z,4,3,5,"Remove the rust keys, apparently they're ignored.
Move the debug profile customisation from sway-server to the workspace root (though I haven't tested that this actually makes a difference).",2,0
140,2021-08-16T20:27:17Z,2021-08-19T13:57:11Z,2021-08-19T13:57:11Z,8,158,53,"This is one of the fixes required for #135
Summary
Previously, all primitive types were handled naïvely. They were assumed to fit in a register, so this conflated the memory handling of types like byte32 and u64. This is invalid because u64 fits in a register and is cheap to copy directly into the register by value, but byte32 does not fit in a register and must be pointed to.
This fix changes the handling of the byte32 type and any type greater than one word in size to use references and offsets from $is (instruction start).
Implementation
At code generation time, if a data value that has a size greater than one word is encountered, then an offset in bytes to that value is stored in the data section. Instead of loading the value directly, that offset is loaded into the destination register instead of the value, serving as a pointer. It is up to the stdlib and other consumers of asm syntax to know not to use math opcodes directly on types that are larger than one word.
This adds complexity to the realize_lw function, which converts virtual loads of abstract data labels into hard-coded loads of data offsets in memory, as it can now mutate the data section and append pointers. Note that it can only append pointers, otherwise previously generated offsets would become invalid.
Testing
This is tested in contract calls, and is covered in the test cases held in #135. The testing relies on the VM to throw an error if an invalid color is passed, denoting a failure to handle the memory correctly, so it cannot be implemented on this branch which does not have contract call code generation.",3,2
141,2021-08-16T22:41:23Z,2021-08-17T20:17:40Z,2021-08-17T20:17:40Z,11,109,19,"This is a small tool I just wrote to help validate @digorithm's spec. It is a bin package attached to core_lang which will parse a function declaration and return its function selector. Be gentle to it and don't be too fancy, the namespace is instantiated to be empty, so custom types and stuff don't work. Instead of stashing it or whatever, I thought it might be handy in the future, so here it is.
Usage
(in core_lang)
$ cargo run --features=selector-debug --bin selector-debug ""fn entry_one(a: u64)""
selector string:         entry_one(u64)
untruncated hash:        0x0c36cb9cb766ff60422db243c4fff06d342949da3c64a3c6ac564941f84b6f06
truncated/padded hash:   0x000000000c36cb9c",4,0
158,2021-08-19T07:42:42Z,2021-08-20T01:29:36Z,2021-08-20T01:29:37Z,1,8,5,"OK, this is attempt 3 at fixing the bug #148 and ended up being the dumbest simplest.
My first attempt was to try to do it at the bottom of the type-checker in TypedParseTree::type_check(), by using a temporary namespace for each node and using it only when the check passed.
This worked for this bug, but it caused a whole lot of errors in the test_suite.  There were a bunch of 'module not found' or 'enum not found' type errors which seem to need to update the namespace to succeed eventually.
The solution in this PR is to focus on function declarations and only let them into the namespace if they type-check successfully.  This fixes #148 without breaking the test_suite.
My impression is that trying too hard to fix this problem isn't worth it -- we really should replace the dodgy type-checker logic with some proper symbol dependency graph logic so that we can do the type checking in a single pass without any 'acceptable' errors.",3,0
159,2021-08-19T15:59:02Z,,2021-08-20T05:07:23Z,1,7,0,"Now that the team is growing even more, it's probably a good idea to nail down some guidelines here.
Feel free to chime in if you have any thoughts. I've tried to encapsulate the conversations we've had in Slack in this initial CONTRIBUTING.md, but if anybody has any other opinions, please voice them.
I've listed the people who contribute to this repo the most as reviewers.",6,2
160,2021-08-19T21:52:44Z,2021-08-20T18:24:35Z,2021-08-20T18:24:35Z,19,158,158,This change renames the type_check! macro to check! per discussion on the related issue.,2,1
165,2021-08-20T05:56:51Z,2021-08-20T22:37:40Z,2021-08-20T22:37:40Z,2,2,2,They were introduced with the #140 fix.  I noticed them just now after pulling.,2,2
166,2021-08-20T09:51:18Z,2021-08-21T06:23:01Z,2021-08-21T06:23:01Z,22,249,650,"From the commit message:

The CompileResult was a bit redundant in that both the arms for Ok and Err had warnings and errors vectors.  Frequently when matching a CompileResult the warnings and errors would be copied redundantly, regardless of the actual result value.
By replacing the enum with a struct which has one copy of warnings and errors and an Option for the value instead we can reduce boilerplate considerably.  This commit has a net change of -400 lines of code from the Sway codebase.

This is pretty contentious as it's changing some public interface!  But I was looking at how often that match against CompilerResult involved always copying the warnings and errors and thought it's worthwhile simplifying things.
OTOH, if we eventually use the try_trait when it hits stable then maybe this is pointless, or even worse?  Not sure.  And also, it looks to me like the test_suite is a bout 5% slower after this change, perhaps because it's doing fancy stuff with Option rather than simple pattern matches.
So I won't be offended if this PR gets rejected as too invasive and not worth it.  👍",2,1
169,2021-08-23T06:14:03Z,2021-08-23T15:29:20Z,2021-08-23T15:29:21Z,14,150,157,"Add and utilise some more methods for CompileResult so that it more resembles std::Result, or perhaps std::Option.

ok() now forwards on warnings and errors.
map() will convert the value while keeping the warnings and errors.
unwrap_or_else() is a lot like check!() in that it forwards on
warnings and errors and returns the fully unwrapped value or an
alternative.
unwrap() now forwards on warnings and errors or panics if empty/none.

check!() is still necessary for alternatives involving control flow, e.g., check!(f(), return abort_gracefully(), warnings, errors);",4,0
172,2021-08-24T17:54:45Z,2021-09-14T16:35:28Z,2021-09-14T16:35:28Z,1,860,665,I propose a refactoring of this file that improves readability.,3,3
173,2021-08-24T19:33:35Z,2021-08-24T20:46:04Z,2021-08-24T20:46:04Z,3,14,4,"This fixes the bug documented this issue (#146)
The code let x = if true { 5 }; now raises the error Because this if expression's value is used, an ""else"" branch is required and it must return type ""needs_type"".",2,0
174,2021-08-24T19:53:33Z,2021-08-26T16:45:44Z,2021-08-26T16:45:44Z,7,21,21,"This renames Byte32 to B256, per issue (#171)",4,0
175,2021-08-24T23:29:57Z,2021-08-27T14:05:01Z,2021-08-27T14:05:01Z,2,159,6,"Closes #79
See the deploy for this PR here: https://github.com/FuelLabs/sway-nightly-binaries/tree/master/nightly-2021-08-26:16:34:12-9f01b41
Summary
This PR builds x86 MacOS and x86 Linux images, makes a new folder of the format nightly-$DATETIME-$SHORT_SHA, and uploads sway-server and forc to subdirectories corresponding to the build arch on every push to master.
Other Notes
Some of our crates unfortunately do not support cross compilation. Because of this, we can only compile for targets that Github has runners for. This page has the available options for Github-hosted runners. Unless Github introduces an ARM runner, or we self host our own runners, we can only build x86 targets for now.
This PR builds and deploys x86 MacOS images and x86 Linux images. It would also be easy to add Windows, if we wanted, since Github has a runner for it. That being said, I'm not sure we want to sign up for supporting Windows.
I propose as a temporary work-around that we manually upload ARM/M1 images as needed when consumers want them. I can run the builds myself and upload them to the nightlies repo.
I also changed the cargo test stage so that it only runs if you change any .rs, .sw,  or .toml files. I thought that might save us some minutes when editing yaml files and stuff.",2,5
176,2021-08-25T00:00:07Z,2021-08-25T03:48:52Z,2021-08-25T03:48:52Z,2,4,0,Closes #168,3,0
178,2021-08-25T05:23:15Z,2021-08-25T17:28:15Z,2021-08-25T17:28:15Z,14,650,361,"This is the second part of the puzzle for #119 and #127 (@leviathanbeak)
Unfortunately, the lock file for the VM on master refers to a version of the VM/fuel-asm from back when LT had not been implemented. The API is changed in newer versions. As a result,  I've also updated test_suite, forc, and core-types to use the new API and refreshed the lockfile as a part of this PR.
Summary

A very basic Ord trait in the standard library which provides eq, neq, lt, gt, le, and ge methods
Implements the above Ord trait for all primitive numeric types.
Adds <= and >= to the grammar
Refreshes lockfile
Updates all sway crates to use the new APIs provided by fuel-asm, fuel-vm, fuel-tx, and fuel-core",3,0
179,2021-08-25T06:10:48Z,2021-08-27T17:39:38Z,2021-08-27T17:39:38Z,5,121,1129,"Companion PR to FuelLabs/fuel-core#31

Update to new fuel-client that will be easier to update in the future.
Disable default features in fuel-client to avoid ingesting axum as a dependency
Use feature resolver v2

Branched off of #135 since has the most up to date dependency on fuel-core.",3,6
180,2021-08-25T17:27:41Z,2021-08-25T21:43:30Z,2021-08-25T21:43:30Z,31,822,52,"To be in line with other similar compiler test suites, namely the rustc one, I've renamed the test cases with descriptive names and renamed test_suite to test.",3,0
182,2021-08-26T18:30:50Z,2021-09-08T21:54:55Z,2021-09-08T21:54:55Z,8,307,276,,2,0
186,2021-08-27T13:04:09Z,2021-08-28T16:42:44Z,2021-08-28T16:42:44Z,4,107,13,"Fixes #119  and #181
There was already a fix for #119 in this draft #127 but I included it here in this fix so will remove that one",3,1
188,2021-08-27T15:54:29Z,2021-08-28T11:37:01Z,2021-08-28T11:37:02Z,8,75,795,"Fixes #183
Previously, the control flow graph did not correctly handle declarations that were nested inside of functions. To be specific, edges were not drawn to the following line of code, making the compiler think it was unreachable.
Along the way, I removed a potential panic and replaced it with a formatted internal error and deleted a massive tmp file (😅 )",2,0
189,2021-08-27T17:58:54Z,2021-08-28T11:36:36Z,2021-08-28T11:36:37Z,9,58,29,"Closes #185
Previously, we had forc build --print-asm, which would print out the FinalizedAsm before it is serialized to bytecode.
This PR:

cleans up some of the messy code that used to implement that feature
renames --print-asm to --print-finalized-asm
implements --print-intermediate-asm, which is the non-optimized, fully labeled (using jump labels), fully commented, not-yet-register-allocated, assembly language that gets generated.

The intermediate asm for our if_elseif_enum test case looks like this:
.program:
jump .0
noop
data section offset placeholder         ; data section offset
.0                                      ; end of metadata
data section register load placeholder
add $ds $ds $is
lw $r2 data_0                           ; PrimaryColor enum instantiation
move $r3 $sp                            ; load $sp for enum pointer
cfei i16
mcli $r3 i2
sw $r3 $r2 i0
move $r1 $r3
                                        ; eq fn call
move $r5 $r1
lw $r7 data_0                           ; PrimaryColor enum instantiation
move $r8 $sp                            ; load $sp for enum pointer
cfei i16
mcli $r8 i2
sw $r8 $r7 i0
move $r6 $r8
move $r9 $r5
move $r10 $r6
eq $r11 $r9 $r10
move $r4 $r11                           ; return value from inline asm
jump .2
.2
                                        ; rgb fn call
move $r13 $r1
                                        ; begin if expression
                                        ; eq fn call
move $r15 $r13
lw $r17 data_1                          ; PrimaryColor enum instantiation
move $r18 $sp                           ; load $sp for enum pointer
cfei i16
mcli $r18 i2
sw $r18 $r17 i0
move $r16 $r18
move $r19 $r15
move $r20 $r16
eq $r21 $r19 $r20
move $r14 $r21                          ; return value from inline asm
jump .6
.6
jnei $r14 $one .4
                                        ; Rgb struct initialization
move $r23 $sp
cfei i24
lw $r24 data_2                          ; literal instantiation
sw $r23 $r24 i0
lw $r25 data_1                          ; literal instantiation
sw $r23 $r25 i1
lw $r26 data_1                          ; literal instantiation
sw $r23 $r26 i2
jump .7
.7
move $r12 $r22
jump .5                                 ; end of then branch
.4                                      ; beginning of else branch
move $r12 $r27
.5                                      ; End of if exp
jump .3
.3
lw $r61 data_3                          ; PrimaryColor enum instantiation
move $r62 $sp                           ; load $sp for enum pointer
cfei i16
mcli $r62 i2
sw $r62 $r61 i0
move $r60 $r62
                                        ; rgb fn call
move $r64 $r60
                                        ; begin if expression
                                        ; eq fn call
move $r66 $r64
lw $r68 data_1                          ; PrimaryColor enum instantiation
move $r69 $sp                           ; load $sp for enum pointer
cfei i16
mcli $r69 i2
sw $r69 $r68 i0
move $r67 $r69
move $r70 $r66
move $r71 $r67
eq $r72 $r70 $r71
move $r65 $r72                          ; return value from inline asm
jump .20
.20
jnei $r65 $one .18
                                        ; Rgb struct initialization
move $r74 $sp
cfei i24
lw $r75 data_2                          ; literal instantiation
sw $r74 $r75 i0
lw $r76 data_1                          ; literal instantiation
sw $r74 $r76 i1
lw $r77 data_1                          ; literal instantiation
sw $r74 $r77 i2
jump .21
.21
move $r63 $r73
jump .19                                ; end of then branch
.18                                     ; beginning of else branch
move $r63 $r78
.19                                     ; End of if exp
jump .17
.17
lw $r112 data_3                         ; PrimaryColor enum instantiation
move $r113 $sp                          ; load $sp for enum pointer
cfei i16
mcli $r113 i2
sw $r113 $r112 i0
move $r111 $r113
                                        ; rgb fn call
move $r115 $r111
                                        ; begin if expression
                                        ; eq fn call
move $r117 $r115
lw $r119 data_1                         ; PrimaryColor enum instantiation
move $r120 $sp                          ; load $sp for enum pointer
cfei i16
mcli $r120 i2
sw $r120 $r119 i0
move $r118 $r120
move $r121 $r117
move $r122 $r118
eq $r123 $r121 $r122
move $r116 $r123                        ; return value from inline asm
jump .34
.34
jnei $r116 $one .32
                                        ; Rgb struct initialization
move $r125 $sp
cfei i24
lw $r126 data_2                         ; literal instantiation
sw $r125 $r126 i0
lw $r127 data_1                         ; literal instantiation
sw $r125 $r127 i1
lw $r128 data_1                         ; literal instantiation
sw $r125 $r128 i2
jump .35
.35
move $r114 $r124
jump .33                                ; end of then branch
.32                                     ; beginning of else branch
move $r114 $r129
.33                                     ; End of if exp
jump .31
.31
lw $r163 data_3                         ; PrimaryColor enum instantiation
move $r164 $sp                          ; load $sp for enum pointer
cfei i16
mcli $r164 i2
sw $r164 $r163 i0
move $r162 $r164
                                        ; rgb fn call
move $r166 $r162
                                        ; begin if expression
                                        ; eq fn call
move $r168 $r166
lw $r170 data_1                         ; PrimaryColor enum instantiation
move $r171 $sp                          ; load $sp for enum pointer
cfei i16
mcli $r171 i2
sw $r171 $r170 i0
move $r169 $r171
move $r172 $r168
move $r173 $r169
eq $r174 $r172 $r173
move $r167 $r174                        ; return value from inline asm
jump .48
.48
jnei $r167 $one .46
                                        ; Rgb struct initialization
move $r176 $sp
cfei i24
lw $r177 data_2                         ; literal instantiation
sw $r176 $r177 i0
lw $r178 data_1                         ; literal instantiation
sw $r176 $r178 i1
lw $r179 data_1                         ; literal instantiation
sw $r176 $r179 i2
jump .49
.49
move $r165 $r175
jump .47                                ; end of then branch
.46                                     ; beginning of else branch
move $r165 $r180
.47                                     ; End of if exp
jump .45
.45
.1
ret $r0                                 ; main fn return value
.data:
data_0 .u64 0x01
data_1 .u64 0x00
data_2 .u64 0xff
data_3 .u64 0x02",2,0
191,2021-08-27T22:02:38Z,,2021-09-16T19:22:11Z,16,463,83,,4,1
192,2021-08-27T23:54:34Z,2021-09-08T22:00:48Z,2021-09-08T22:00:48Z,3,36,46,"This is addressing the various dead code errors we found in #177 as well as a few others.
This PR prevents the throwing of dead code warnings for:

ABI declaration methods
impl T blocks if they are public or used
statements in the implicit return position",3,0
193,2021-08-28T17:39:04Z,2021-08-29T13:50:56Z,2021-08-29T13:50:56Z,2,13,4,"The crate that we currently use for detecting things like snake case vs camel case, etc., is not currently maintained. I have found a few bugs in it that I'd like to fix, so this change points us at my forked version of Inflector. If we'd like, I'm also okay moving that fork over to the Fuel Labs organization.
The warning that really made me want to update this was something like:
Struct name ""Data"" is unidiomatic. Use ClassCase: ""Daum""

Clearly it wanted Datum, which is fair, so I updated the crate to say Datum, as well as fixed People getting singularized into Peoperson",3,4
196,2021-09-01T18:39:02Z,2021-09-02T02:10:55Z,2021-09-02T02:10:55Z,1,3,3,"prefix sway nightlies directory with sway-, since the nightlies repo will serve more than just sway (despite the name)
rename bot to more general",2,0
197,2021-09-01T19:10:13Z,2021-09-02T14:47:32Z,2021-09-02T14:47:32Z,10,102,70,"Bunch of minor improvements and cleanups to docs.

4 spaces for tabs
Use sway for codeblocks
Uniform newlines spacing
Typo fixes",3,0
198,2021-09-01T23:07:30Z,2021-09-17T16:24:21Z,2021-09-17T16:24:21Z,50,1519,831,"Closes #152.
This PR implements a custom span type that allows the Span to keep track of the filename. This is useful because it could allow for users to see more descriptive error messages (#214 #73 ). As a biproduct of this change, the error types in the compiler had to change as well, with any &'sc str components changing to String components, among other small changes.
Summary

Implement custom span type Span
Have all parsing methods use Span",3,2
199,2021-09-01T23:12:58Z,2021-09-02T18:18:21Z,2021-09-02T18:18:21Z,1,0,1,,2,0
200,2021-09-02T07:19:14Z,2021-09-08T21:47:39Z,2021-09-08T21:47:39Z,5,583,202,"Closes #151.
The old type checker resolved forward dependencies by brute forcing for the win.  Try one way, keep the successful checks, reverse the order and go again.  This is not very deterministic or efficient.  It also makes it harder to know when there's a genuine recursive declaration.
This PR reverts the type checker to being single pass.  It also introduces an elaborate system for gathering dependencies between declaration nodes in particular, and uses it to sort the top-level nodes in a file (compilation unit?) allowing the single pass type checker to resolve everything successfully.
The top-level nodes are sorted generally into includes -> uses -> decls -> other so that dependencies are resolved before use statements, and then everything external should be available to the declarations.
The complexity arises in finding dependencies between declarations.  Almost every AstNode type can have dependencies on others, most commonly on enums and structs and on  function declarations.  Added complexity comes from each declaration potentially having dependent traits, and also the fact that impls don't have a syntactic symbolic name, and must be uniquely identified another way.
I may have taken shortcuts with call_paths as I'm currently assuming a call path is to an external symbol and therefore not a local dependency, and not referenced by the dependency map.  If it's possible to use a call_path to a locally declared symbol then we'll hit some trouble.
I also found that we can't have recursive dependencies in the module system any more.  These were also being brute forced by the old type checker.  I've had to make a tiny patch to the dependencies test to remove a recursive use and this is something we need to address elsewhere, in a new issue.  (I've also noticed that that test used to take several seconds to compile and now is instantaneous, proving the brute forcer was doing a tonne of work there.)",4,2
203,2021-09-03T08:32:37Z,2021-09-06T02:26:07Z,2021-09-06T02:26:07Z,1,3,2,"These fixes show that the if expression generation was always broken, AFAICT.  @sezna -- why was the else block code ignored?  Strange.
I haven't added any tests here, because I'm not sure we can test it yet.  We do need to add a framework for validating the output of ASM generation for each basic construct, and for optimisations, by comparing the ASM output to an expected value.
Closes #184.",2,1
204,2021-09-03T15:01:55Z,2021-09-14T21:57:51Z,2021-09-14T21:57:51Z,29,145,26,,3,0
208,2021-09-06T06:27:55Z,2021-09-08T23:22:13Z,2021-09-08T23:22:13Z,13,85,34,"Just sitting in a coffee shop waiting for my daily København tourism...figured I'd give this a shot. Won't be back until Tuesday still, though.
This PR changes our tests to assert the VM's output. This also exposed a memory encoding bug related to strings and strings in structs which is also fixed in this PR.
Main functions without any return value still return undefined memory, so for now I made all of our main functions return a value.",3,0
210,2021-09-07T08:31:53Z,2021-09-09T04:54:50Z,2021-09-09T04:54:50Z,4,35,6,"Closes #207.
This is actually doing the bare minimum to ensure that an empty main returns zero (where beforehand it returned an uninitialised $r0) or more specifically, a main which has a Unit return type returns zero.
I've added a test which will need updating when #208 is merged, to confirm zero does get returned.
We could try harder to fix this problem, since in the test nop() returns Unit too and so it should set $r0 to zero, but the current codebase doesn't easily support this, and I'm in favour of improving the overall codegen side of things via a 'middle end'.",3,0
213,2021-09-08T02:30:07Z,2021-09-08T21:53:37Z,2021-09-08T21:53:37Z,4,18,4,"Closes #205.
The parser for impl_self is:
impl_self =  {impl_keyword ~ type_params? ~ type_name ~  trait_bounds? ~ (""{"" ~ fn_decl* ~ ""}"")}

The trait bounds and actual function declarations can both be empty, and will be for the Sway code impl T { }.  The old code assumed that there would be some function declarations and was trying to peek beyond the end of the iterator.",3,0
221,2021-09-12T07:53:55Z,2021-09-13T01:09:23Z,2021-09-13T01:09:23Z,5,267,55,"The dependency analysis now uses a HashMap of HashSets instead of a 2D array of &str.  Each dependency is to and from a DependentSymbol wrapper which now special cases function declarations.
With the function declarations and their dependencies gathered it's relatively easy to check whether any functions (eventually) depend on themselves.  New errors are now reported when recursion is detected.
I've added a test file but haven't added it to the test suite because it fails deliberately.  We need to update the tests to allow and capture/check errors.",3,1
222,2021-09-13T21:20:58Z,2021-09-14T03:23:59Z,2021-09-14T03:23:59Z,2,20,3,"Currently, our tests only assert successes and validate VM output. We need a way to assert that code should not compile. This is a very basic stab at saying code should not compile. In an ideal world, we could specify the exact errors that it should throw, but that requires substantial rewiring and is therefore, as a task, being punted into the future.
This PR simply allows us to assert that code should not compile, and I've included @otrho's recursion ban test case in it.",2,0
223,2021-09-13T22:36:51Z,2021-09-17T03:18:58Z,2021-09-17T03:18:58Z,17,210,52,"There is currently a pretty poorly half-implemented version of unary operator support. This PR rips that out and replaces it with the Right Thing(tm): unary operators are compiled into function applications during parsing, so the rest of the compiler handles them just as if they were functions.
The only unary op this PR implements for now is ! with the function fn not(bool) -> bool in the standard library.",3,4
224,2021-09-14T14:52:39Z,2021-09-14T18:57:55Z,2021-09-14T18:57:55Z,1,1,1,"To save on minutes, we only want to run our CI tests on pull requests (as per slack).",2,0
225,2021-09-15T17:11:59Z,2021-09-15T21:29:35Z,2021-09-15T21:29:35Z,1,7,6,"I was unable to deploy a contract to the node. @Voxelot helped diagnose and posted this fix in Slack. I think we want to take it, but @vlopes11 and @leviathanbeak should take a look and confirm.",4,1
228,2021-09-16T01:49:26Z,2021-09-17T03:19:09Z,2021-09-17T03:19:09Z,1,33,0,"As the title says...
This example exposed some bugs which I've been trying to track down, but at the very least, here's the example itself that should be compiling soon.",3,0
229,2021-09-16T01:51:45Z,2021-09-19T12:35:51Z,2021-09-19T12:35:51Z,3,35,3,"For demoing purposes.
I've also deleted hello world since we can't println.",4,0
230,2021-09-16T16:26:07Z,2021-09-16T19:01:06Z,2021-09-16T19:01:06Z,2,2,2,"I was just writing some assembly, and got this error:

Clearly there's a typo in the error text for this case. This PR fixes that.",2,0
231,2021-09-16T17:40:22Z,2021-09-18T03:56:37Z,2021-09-18T03:56:37Z,8,48,9,"Removes documentation TODOs and replaces them with something, however minimal.",3,0
234,2021-09-16T23:59:42Z,2021-09-20T15:04:20Z,2021-09-20T15:04:20Z,7,56,63,,2,0
235,2021-09-17T16:31:56Z,2021-09-17T19:21:28Z,2021-09-17T19:21:28Z,2,4,18,"Closes #220.
This PR replaces the last instance of eval! with check! and deletes the eval! macro entirely.",2,0
238,2021-09-18T01:38:20Z,2021-09-21T14:22:11Z,2021-09-21T14:22:11Z,9,106,7,"Closes #46

Introduces the RETD opcode to our asm language.
Uses RETD for script main function returns if the data is larger than a word.
Tests that the returned values from scripts are consistent (although they are hashed/masked)",2,1
239,2021-09-18T02:10:52Z,2021-09-18T03:56:22Z,2021-09-18T03:56:22Z,1,2,3,"As mentioned in the Budget Meeting, we want to save on minutes and only deploy on tagged release.",3,1
245,2021-09-20T11:03:29Z,2021-09-21T14:22:59Z,2021-09-21T14:22:59Z,14,190,133,"What does this PR do:

it splits forc module with 2 different features, test and util features, test is in ""test"" module and util is used in sway-server
handles delete Sway files #202
adds support for multiple sway files within a project #162
supports go-to definition between files, although this should be improved once Compiler provides more info on type/variable declaration within it's span",3,0
248,2021-09-20T17:46:45Z,2021-09-21T00:14:03Z,2021-09-21T00:14:03Z,6,58,31,"Use error recovery in function argument type checking instead of skipping
Use method application for all operators, not function application for some (a typo from an early implementation)
Update operator precedences in general
Add test case

Closes #240",2,0
249,2021-09-20T18:18:01Z,2021-09-21T00:25:28Z,2021-09-21T00:25:28Z,24,90,46,"Closes #247.
This PR creates more informative file_path instances to be used with the custom Span type.",2,1
250,2021-09-20T19:12:37Z,2021-09-21T00:14:14Z,2021-09-21T00:14:14Z,6,76,1,"Closes #243
Adds:

Tests for both too many and too few arguments
Fix where a missing argument would get caught by an ugly internal error in code generation instead of type checking.

See #243 for more details.",2,0
253,2021-09-21T00:16:40Z,2021-09-21T01:41:10Z,2021-09-21T01:41:10Z,8,52,1,"Closes #244
Allows ASM expressions to optionally not return a register if their expected type is Unit.",2,0
255,2021-09-21T05:32:31Z,2021-09-22T04:53:21Z,2021-09-22T04:53:21Z,4,23,6,"The optional argument may be a regex which is checked against the name of the test.
E.g., cargo run ^contract
... will run only the contract_abi_impl and contract_call tests (as of the time of this commit).",3,0
256,2021-09-21T10:59:45Z,2021-09-22T17:11:21Z,2021-09-22T17:11:21Z,8,192,18,"This PR has a couple of changes.  Addresses #218 but we will want to add more functionality in the future.
Firstly this fixes a bug in ASM gen which didn't account for the possibility of LWDataId using two VM ops when calculating offsets for labels.
Secondly it adds some initial support for b256 in the stdlib:

eq() but not lt() nor gt().  The latter will require some extra support either from the VM or from the Sway virtual ops (more likely).
hash_value() takes a single b256 value and hashes it to another b256 value using either SHA256 or Keccak256.
hash_pair() takes two b256 values and hashes them contiguously to a b256 value similarly.",3,3
257,2021-09-21T22:58:50Z,2021-09-22T04:27:07Z,2021-09-22T04:27:07Z,3,90,71,"This also can return based on RET or RETD by the same logic as #238
Closes #251
This is just the code generation bit. We still want to do some type system stuff with data returned from contracts, discussed in #25.",2,0
258,2021-09-22T17:30:32Z,2021-09-23T16:17:43Z,2021-09-23T16:17:44Z,6,415,389,"This breaks apart the current stdlib a bit for better organization.
This also addresses my main concern in #16 , which was that there's a ""stutter"" when dealing with dependencies. Say your dependency name is std, and the entrypoint to std is also library std;. This means all your imports have to be std::std::ops or std::std::hash. Since it is a guarantee that there's only one entry module, I've made it such that the TOML-defined dependency name is the top-level module name, removing the stutter.
Closes #16 -- we can make a new issue if there are other concerns with imports.",3,0
260,2021-09-22T21:07:01Z,,2021-09-27T18:18:19Z,4,21,1,,3,1
261,2021-09-22T21:47:39Z,2021-10-08T02:34:02Z,2021-10-08T02:34:03Z,7,39,7,"Closes #134
This test tests struct field access. @sezna  you mentioned that you thought there was a subtle bug. Did you have a different test in mind?",3,6
262,2021-09-22T22:22:24Z,2021-09-24T13:36:38Z,2021-09-24T13:36:39Z,6,97,68,"Closes #259
@otrho @sezna  how does the below formatting look? Any changes?",2,1
264,2021-09-23T03:20:06Z,2021-09-24T00:54:53Z,2021-09-24T00:54:53Z,12,298,64,"Closes #226.
I've special cased && and || to no longer be overridden std::ops::... method invocations and have instead created a new Expression::LazyOperator variant.  It is type checked into a TypedExpression::LazyOperator which translates to custom ASM gen for the lazy evaluation.
Initially I was thinking it could be a special FunctionApplication which we detected and special-cased in the ASM gen, but I think this approach is nicer.",4,0
265,2021-09-23T19:53:15Z,2021-09-24T13:36:02Z,2021-09-24T13:36:02Z,1,12,0,"I propose that we start using a rustfmt.toml file to illicit more regulated and more documented formatting requirements.
See: https://rust-lang.github.io/rustfmt/?version=v1.4.36&search=",3,4
266,2021-09-24T09:31:17Z,2021-09-27T23:22:59Z,2021-09-27T23:22:59Z,6,82,71,"Closes #187.
Instead of copying and/or merging from namespaces for use declarations we now keep a list of use synonyms.  When an unqualified/relative symbol lookup is made the synonyms can be used to find the path to its module.
I added a new test, taken from #187 and it's passing all the existing tests, but I feel like the whole system is still a bit fragile and could probably do with a bit of a refactor, now that we have it fairly stable.  In the future we may wish to support partial paths -- e.g., use std::hash and then hash::hash_value(...).  While looking at the code I feel like there should be a distinction between a 'module' and a 'namespace', perhaps a namespace maintains a collection of modules.  Dunno.  This is working for now.",3,2
267,2021-09-24T13:54:23Z,2021-09-29T16:17:10Z,2021-09-29T16:17:10Z,19,425,182,"Closes #149
For the test case:
script;

/// Enum representing either a number or a string
///
/// # Examples
///
/// `NumberOrString::Number(42)`
/// `NumberOrString::String(""foo"")`
enum NumberOrString {
	/// The `Number` variant in `NumberOrString`
	Number: u64,
	/// The `String` variant in `NumberOrString`
	String: str[4],
}

/// Struct holding:
///
/// 1. A `value` of type `NumberOrString`
/// 2. An `address` of type `byte`
struct Data {
	/// The `value` field in `Data`
	value: NumberOrString,
	/// The `address` field in `Data`
	address: byte,
}

/// The main function that does all the things!
fn main() -> u64 {
  let mut data = Data { 
                  value: NumberOrString::Number(20),
                  address: 0b00001111,
                };

  return 20;
}
It produces vec:
{
    ""struct.Data.value"": [
        ""/// The `value` field in `Data`"",
    ],
    ""fn.main"": [
        ""/// The main function that does all the things!"",
    ],
    ""enum.NumberOrString"": [
        ""/// Enum representing either a number or a string"",
        ""///"",
        ""/// # Examples"",
        ""///"",
        ""/// `NumberOrString::Number(42)`"",
        ""/// `NumberOrString::String(\""foo\"")`"",
    ],
    ""enum.NumberOrString.String"": [
        ""/// The `String` variant in `NumberOrString`"",
    ],
    ""struct.Data.address"": [
        ""/// The `address` field in `Data`"",
    ],
    ""struct.Data"": [
        ""/// Struct holding:"",
        ""///"",
        ""/// 1. A `value` of type `NumberOrString`"",
        ""/// 2. An `address` of type `byte`"",
    ],
    ""enum.NumberOrString.Number"": [
        ""/// The `Number` variant in `NumberOrString`"",
    ],
}

It doesn't actually do anything with the vec, it just kind of keeps it around for now. I suppose implementing something with it will be a seperate issue.",4,6
269,2021-09-25T11:59:00Z,2021-09-27T09:12:10Z,2021-09-27T09:12:10Z,1,17,9,"this is part 1 one of solving #246
in this part we only check for node's health, and informing user that the node should be started (if it isn't)
in the second part - I will add the ability for user to start the node directly from this command as discussed in slack",3,0
270,2021-09-27T11:04:09Z,2021-09-30T15:35:27Z,2021-09-30T15:35:28Z,6,94,9,"this is the second (and the final) part of #246 ,
in this PR, we implement following:

2 extra command arguments for forc-run with option to read env vars
option to start a client node if not started
option to kill the node that was started by forc-run, by default the node is left alive after the process ends",2,0
275,2021-09-27T22:55:00Z,2021-09-29T04:47:54Z,2021-09-29T04:47:54Z,10,128,141,"Closes #241
Consider a trait declaration:
trait MyTrait {
  some_interface_fn() -> bool;
} { 
  some_method() -> bool { 
    some_interface_fn()
  }
}

In order for some_method to type check its call to some_interface_fn, we need to insert some_interface_fn into the namespace before we actually have a function body for it. I used to_dummy_func(), which would take a typed trait function and insert it with an empty body. In the original design, this didn't matter because it was thrown away before code generation.
Since then, we have added a copy of function declarations inside of function applications for ease of code generation. This was capturing the empty code block and keeping it around until code generation, causing weird bugs. This change throws away any dummy functions and makes trait declarations store FunctionDeclarations instead of TypedFunctionDeclarations, forcing a (correct) type-check when a trait is implemented and those function bodies actually exist.
This change also removes where clauses for now, since their implementation relied on a faulty usage of to_dummy_func. Those will have to be implemented as a part of #272",2,4
277,2021-09-28T22:32:52Z,2021-09-29T13:50:00Z,2021-09-29T13:50:00Z,3,54,0,Introduces a roadmap document which can be elaborated upon as we expand our feature set and design goals.,3,0
278,2021-09-29T14:23:23Z,2021-09-29T22:15:32Z,2021-09-29T22:15:33Z,21,438,104,"This turned out to be bigger than I thought it would.  Closes #215.
For now const declarations can only be initialised with a literal.  In the future we may want to allow any const expression.
I had to touch a bunch of stuff, right from the type checker, the control flow analyser, and asm gen and I'm fairly confident it's right, but much of it was new to me so I might've missed something.
In particular I've added some code to the asm gen which adds ops for the constants and their initialisers before it converts main.  This is because const can be a global, but unlike functions, enums or structs, they do need asm to be generated, and since globals aren't in functions they won't be instantiated when main is.",3,5
279,2021-09-29T15:37:36Z,2021-10-04T00:08:03Z,2021-10-04T00:08:03Z,16,218,36,"Closes #76
This PR adds code that checks for and detects infinite dependencies. In the event of circular or infinite dependencies, the compiler returns an error noting where the circular dependency is created.",2,2
282,2021-09-29T19:34:05Z,2021-09-30T13:14:37Z,2021-09-30T13:14:37Z,1,46,5,Rendered: https://github.com/FuelLabs/sway/tree/adlerjohn/add_build_instr_to_readme,3,0
283,2021-09-30T13:17:17Z,2021-09-30T16:26:02Z,2021-09-30T16:26:02Z,1,5,5,"Use sh instead of console, apparently.",2,0
286,2021-09-30T23:54:09Z,2021-11-04T21:49:47Z,2021-11-04T21:49:47Z,56,2054,1578,"Type Inference Engine
This PR refactors all uses of the old type system (involving MaybeResolvedType, PartiallyResolvedType, etc.) into a Hindley-Milner type engine which uses TypeIds to refer to types. These TypeId mappings are held in a core, global type engine.
Implementation Notes
OwnedTypedEnumVariant and OwnedTypedStructField
Because the type engine is static, we need the <'sc> lifetime to be separate from the type system. Previously, we kept span data in the type itself. These variants had to be introduced to describe these types without any span data that is tied to the lifetime of the source code.
TODO(static span)
I think we could improve our codebase by using an arena for spans. It would simplify handling spans from different files, designing things around lifetimes, etc., and would allow for the type engine to carry spans in it. I've marked locations where this would be relevant with TODO(static span).
Other notes
This may not be perfect, but it will be a good template for allowing stronger type inference over time, and this is a much more scalable approach than what we had before. While the global engine could be considered an anti-pattern, it is not uncommon in compilers and very ergonomic to use.",2,0
288,2021-10-01T01:08:01Z,2021-10-02T00:22:46Z,2021-10-02T00:22:46Z,30,546,517,Pretty much all whitespace changes.,3,1
289,2021-10-01T16:11:22Z,2021-10-03T20:20:12Z,2021-10-03T20:20:12Z,4,48,15,Closes #284,2,0
290,2021-10-03T20:21:14Z,2021-10-07T16:04:09Z,2021-10-07T16:04:09Z,11,67,2,"Closes #276
This PR fixes the bug that was causing filenames with errors and warnings to be incorrect.",3,2
291,2021-10-05T18:59:32Z,,2021-10-15T16:07:46Z,17,651,390,Closes #242,2,2
292,2021-10-05T21:21:48Z,2021-10-06T04:50:34Z,2021-10-06T04:50:34Z,1,2,2,Also made it a bit clearer that [] is referring to the logs.,3,0
293,2021-10-06T16:22:15Z,2021-10-11T17:54:25Z,2021-10-11T17:54:25Z,52,885,334,"Initial Contract State Storage API
It's finally here!
This PR:

Adds the CLI options from forc build to forc deploy and forc run (-o, -s, --print-finalized-asm, etc.)
Adds a silent mode (--silent or -s) to both forc build and forc deploy which stifles warning/error text
Adds a pretty-print mode (--pretty-print or -r) to forc run which pretty prints the returned logs.
Adds contract deployments to the testing suite
Runs fuel-core in pipeline so that contracts can be deployed against it for the tests
Allows dependencies that also have dependencies (previously unimplemented)
Adds stdlib functionality for storing and retrieving primitive types
Allow the specification of transaction inputs in Forc.toml

Automatically append contract outputs with the an index referring to each input contract. (I'm unsure if this is actually valid, but it allows me to test for now. This will probably all be superseded by the Rust SDK anyway)


Adds test cases and examples for stateful contracts. See basic_storage for a trivial example and incrementor_contract/call_incrementor_contract to see a contract which stores a value that can be incremented with successive contract calls

Whew, that's a lot of stuff. A subsequent PR will flesh out the standard library with more storage api stuff.",4,0
296,2021-10-07T22:12:38Z,2021-10-14T00:32:15Z,2021-10-14T00:32:16Z,15,280,108,"Closes #21
This PR:

Reorganizes the code for formatting errors to be located in the core_lang crate as an impl to CompileError and CompileWarning
Edits some of the CompileError variants to include spans for hints.
Introduces alternative formatting methods that allow for errors to be accompanied by hints.",3,2
299,2021-10-10T00:52:39Z,2021-10-11T00:00:31Z,2021-10-11T00:00:31Z,3,113,0,Introduces the subcurrency example as seen here: https://docs.soliditylang.org/en/v0.8.9/introduction-to-smart-contracts.html#subcurrency-example,2,1
300,2021-10-11T01:37:36Z,2021-10-11T16:25:29Z,2021-10-11T16:25:29Z,2,2,2,Fix some broken links introduced in #299,2,0
301,2021-10-11T03:41:35Z,2021-10-11T18:10:19Z,2021-10-11T18:10:19Z,7,120,7,"Caveat, line 1239 in mod.rs:
    // NOTE: this is currently flattening out the entire namespace, which is problematic.  To fix
    // it we need to support hierarchical names (or at least absolute normalised names) to
    // AsmNamespace.  This can be done in the new ASM generator which translates from IR, coming
    // soon.

Closes #297.",2,0
302,2021-10-11T16:59:08Z,2021-10-16T19:30:17Z,2021-10-16T19:30:17Z,18,301,169,"First part of sway-server improvements, these improvements are work in progress,
the flow goes like this:

write similar sway & rust code
compare output of rust-analyzer for vs-code for different capabilities
improve current sway-server to match rust-analyzer as much as possible",3,4
303,2021-10-11T18:12:58Z,2021-10-12T13:53:50Z,2021-10-12T13:53:50Z,2,1,4,"Now that #301 is in, we can use the ETH_COLOR const here and remove the references to the bug report.",2,1
307,2021-10-11T20:22:24Z,2021-10-12T04:25:13Z,2021-10-12T04:25:13Z,7,39,6,"Super basic, will get better when generics land...
As per the call today, this introduces a basic log function and a basic revert function in the standard library. Note that control flow analysis does not abort after the revert call, so it does not know that code afterwards is unreachable, like rust does with panic!()",2,0
310,2021-10-11T21:20:35Z,2021-10-14T00:31:46Z,2021-10-14T00:31:46Z,9,74,15,"Closes #19
This PR introduces import aliasing:
script;

dep a_dependency;

use foo::Foo as MyFoo;

fn main() -> u64 {
    let foo = MyFoo {
        foo: 42,
    };
    foo.foo
}

Other types of instances of import aliasing are possible, but those should be tracked as a separate issue, given there are currently unrelated blockers preventing implementation (#313)",2,0
314,2021-10-13T20:24:54Z,2021-10-14T00:31:20Z,2021-10-14T00:31:20Z,2,16,16,Closes #309,2,0
316,2021-10-14T20:21:51Z,2021-10-15T15:17:57Z,2021-10-15T15:17:57Z,16,175,219,,2,0
317,2021-10-17T13:17:12Z,2021-10-19T05:40:57Z,2021-10-19T05:40:57Z,4,122,31,"this fixes #287
as a bonus it also introduces format functions style the way rust-analyzer does it",2,0
320,2021-10-20T21:24:49Z,2021-10-27T17:27:45Z,2021-10-27T17:27:46Z,26,2176,174,"This PR introduces the fuels-rs ability to generate type-safe Rust bindings from a JSON object/file.
This is better shown as an example:
// Generates the bindings from the an ABI definition inline.
// The generated bindings can be accessed through `SimpleContract`.
abigen!(
    SimpleContract,
    r#""
    [
        {
            ""type"": ""contract"",
            ""inputs"": [
                {
                    ""name"": ""arg"",
                    ""type"": ""u32""
                },
                {
                    ""name"": ""second_arg"",
                    ""type"": ""u16""
                }
            ],
            ""name"": ""takes_ints_returns_bool"",
            ""outputs"": [
                {
                    ""name"": """",
                    ""type"": ""bool""
                }
            ]
        }
    ]
    ""#
);

let contract_instance = SimpleContract::new();

// This is checked at compile time!
let contract_call = contract_instance.takes_ints_returns_bool(42 as u32, 10 as u16);

let encoded = format!(
    ""{}{}"",
    contract_call.encoded_selector, contract_call.encoded_params
);

assert_eq!(""0000000003b568d4000000000000002a000000000000000a"", encoded);
}
This is done with a procedural macro called abigen!, which is the entry point for this whole thing, it can be found under fuels-abigen-macro. From there, it will take us back to a new module fuels-rs/code_gen, that contains all the necessary logic to generate and expand the bindings.
This PR also introduces an initial draft for the Contract abstraction, which will work together with the Abigen and the ABI encoder/decoder in order to actually send transactions and handle responses to/from a fuel node. Right now it's mostly a scaffold, with only one method necessary to the Abigen logic.
For (near-term) future work, we should move fuels-rs into its own repo, add some more component-level tests (though a relatively comprehensive E2E test suite exists under fuels-abigen-macro/tests/harness.rs).",4,1
326,2021-10-24T09:16:43Z,2021-11-02T16:28:45Z,2021-11-02T16:28:45Z,5,101,0,"this deals with #219 , but only rename within a single file, renaming across workspace/project will be implemented once #324 is dealt with",4,1
329,2021-10-25T20:03:42Z,2021-10-26T18:48:46Z,2021-10-26T18:48:46Z,1,2,1,While reading over the sway docs I noticed this example could be improved slightly.,4,4
331,2021-10-26T02:32:37Z,2021-11-02T05:57:41Z,2021-11-02T05:57:41Z,21,233,37,"Closes #195

Expands upon available storage methods in the standard library
Adds authentication module to the standard library
Adds caller_is_external() and caller() to the standard library
Adds binary operator functionality

draft until:

 tests are written (potential VM bug?)
 #340 is merged",2,0
332,2021-10-26T15:23:28Z,2021-10-26T23:51:01Z,2021-10-26T23:51:01Z,1,1,1,"Austin's Intership Clippy
Remove redundant clone
Removing redundant clones minimizes memory allocation.",2,0
334,2021-10-26T23:12:35Z,2021-10-27T20:50:44Z,2021-10-27T20:50:44Z,1,1,67,This PR removes a redundant function that was not being used.,3,0
335,2021-10-26T23:52:38Z,2021-10-27T18:00:26Z,2021-10-27T18:00:26Z,7,25,25,"Lints
1. Redundant Clones
Removing redundant clones minimizes memory allocation.
2. Binary Groupings
Style warning for unusual grouping of hex/binary literals. Changed from ""xxx_xxx_xxx_xxx"" to ""xxxx_xxxx_xxxx"" format for readability.
3. Excessive Single Char Variables
Without descriptive names, it's harder to tell what a variable is at a glance. Clippy will ignore uses of 4 single char vars or less per fn.
4. Enum Varient Size Disparity
Enum size is bound by its largest varient. Large gaps in varient size affect the memory layout of the enum. Boxing reallocates to the heap, and reduces the size of the enum.
5. Referencing a Reference
Double dereferencing is bad for optimization.",3,0
340,2021-10-27T22:18:47Z,2021-10-31T05:36:25Z,2021-10-31T05:36:25Z,15,329,383,"Add the GM opcode to the Sway language, as per the new specs.
Closes #339
This PR also updates sway to the latest fuel-asm with the latest op mapping and fixes the corresponding contract addresses.",2,0
342,2021-10-29T18:08:48Z,2021-11-01T16:37:51Z,2021-11-01T16:37:51Z,16,347,38,This PR introduces an interface for the SDK (fuels-rs) to deploy contracts to any node; a necessary step towards #124.,3,0
343,2021-10-29T20:59:07Z,2021-12-14T18:24:00Z,2021-12-14T18:24:00Z,98,931,258,Closes #322,4,3
344,2021-10-30T01:06:51Z,2021-11-01T03:16:56Z,2021-11-01T03:16:56Z,9,18,18,"Lint
1. Unnecessary Borrowed Reference
Suggests that the receiver of the expression borrows the expression. Checks if reference is immediately de-referenced by compiler.
2. Redundant Clone
Clone is made but never used. It is not always possible for the compiler to eliminate useless allocations and de-allocations generated by redundant clones.
3. Useless Conversion
Converting to the same type is redundant and bad for optimization.
4. Needless Return
No need for return and semicolon at end of return statement.",2,0
351,2021-11-01T01:17:58Z,2021-11-01T03:57:58Z,2021-11-01T03:57:58Z,1,5,0,As the title says.,3,0
352,2021-11-01T16:02:36Z,2021-11-02T19:06:31Z,2021-11-02T19:06:31Z,2,15,10,Updates a few small sections of the sway docs.,3,0
356,2021-11-02T01:19:00Z,2021-11-02T06:04:22Z,2021-11-02T06:04:22Z,2,13,2,"The previous CODEOWNERS file was a little to aggressive since I have no business being the owner of some parts of this codebase. This delegates responsibility to who I think wrote each component? Feel free to propose changes here.
The main impetus for introducing CODEOWNERS, and I hope it didn’t come across as authoritarian, was that there are a lot of people currently working in the same place. As the team scales, it doesn't make much sense to merge in an fuels-rs feature with only my review, since I've barely worked with that part of the code.",3,2
358,2021-11-02T22:42:42Z,2021-11-03T16:42:34Z,2021-11-03T16:42:35Z,44,183,5303,"fuels-rs, born and (half-)raised here in the sway repo, is getting fairly large and needs its own home.
This PR closes #348 and partially closes #349.
The fuels-rs code can soon be found here https://github.com/FuelLabs/fuels-rs, after FuelLabs/fuels-rs#1 is merged.",3,0
362,2021-11-03T20:22:56Z,2021-11-04T18:40:04Z,2021-11-04T18:40:04Z,3,24,35,"Lint
Manual Map
Manual mapping using match is messy and can be simplified using .map() for readability.
Map Clone
Explicit closure on a clone, can be simplified to .cloned().
Option Map Unit Function
Calling .map() on an option value where the variable is a closure that returns the unit type ().
iter_nth
using .get() is faster and more readable than .iter().nth().
into_iter_on_ref
.into_iter() is equivalent to .iter() and doesn't consume the array.",3,2
363,2021-11-04T16:47:09Z,2021-11-05T04:15:38Z,2021-11-05T04:15:39Z,39,809,496,"This change:

Reverts #149
Introduces a new crate for processing docstrings called docstrings
Introduces a new crate to kick off #252 with a new parser.

Why revert #149?
It was causing panics and, since we want to move off of pest anyway, would have to be rewritten when we do so. So, since it was buggy and doomed to be scrapped, it doesn't make sense to spend a lot of effort bugfixing. This change scraps it and sets up the scaffolding for a new version.
But none of this code is actually used yet
We have had a few really big PRs recently, and I don't want the new parser to be another one. This sets us up for incremental implementation and integration of the new parser, with an emphasis on better parse errors and separation of concerns.
What's the big picture?
The docstring parser needs to know about the language's syntax, but not at a deep level. I believe that implementing the new parser to just solve the docstring problem is a good starting point. After that, we can expand it to match the ParseTree API that core_lang currently uses.
For integration, we should be able to copy the ParseTree struct over, replicate it using arena spans (no <'sc>), and then when we are able to parse all syntax into that ParseTree, integrate directly with core_lang by removing all <'sc> stuff and switching to the new parse tree, removing the old parse_tree module.
Then, we can put errors into their own crate, and, finally, type-engine into its own crate as well, since they won't all be so crucially dependent on the pest codegen.
Tooling choices
chumsky
It is much more minimal API-wise. It is a parser combinator and those are easy to rewrite/tweak. It is also very good for parser errors and ergonomic parser behavior.
Closes #359",2,0
365,2021-11-04T19:47:23Z,2021-11-06T04:15:55Z,2021-11-06T04:15:55Z,2,57,16,"This was the only place the compiler was having to manually load a static length to copy b256 types. I've removed the old MCP that used a register and swapped it for MCPI with an immediate, saving one opcode per contract call.
Blocked by FuelLabs/fuel-vm#43",3,1
366,2021-11-04T20:33:14Z,2021-11-04T22:34:13Z,2021-11-04T22:34:14Z,7,111,0,"Closes #350. See the issue for details on what is being solved here. I did not write a test for every single opcode because if the error catching is able to catch one of them, the match statement wouldn't miss the others. And given the speed of the compiler, writing an individual test for every opcode would be expensive in pipeline minutes.
It looks like this:",2,0
367,2021-11-04T21:34:26Z,2021-11-05T00:33:01Z,2021-11-05T00:33:01Z,1,1,1,This speeds up the build fuel-core pipeline step by around 7 minutes.,3,2
369,2021-11-05T19:47:12Z,,2021-11-12T16:47:00Z,8,149,0,"WIP.
A first crack at add a context Struct to the stdLib so that you can do stuff like Context.id() in a contract to get the current contract's id.
It would be nice if:

you don't have to instantiate a context struct manually before using it
the user could just use the field context.id directly rather thancalling the method (minor detail)

Note that this doesn't work yet.
Trying to build the contract gives the error:
  Compiled library ""stdlib"" with 14 warnings.
thread 'main' panicked at 'Out of bounds access', core_lang/src/semantic_analysis/ast_node/expression/typed_expression/method_application.rs:40:14
stack backtrace:
   0:     0x5608ce36b53c - std::backtrace_rs::backtrace::libunwind::trace::hd3a6cb8e32f9fc43
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/../../backtrace/src/backtrace/libunwind.rs:90:5
   1:     0x5608ce36b53c - std::backtrace_rs::backtrace::trace_unsynchronized::h6dcceebcd6a9f2ab
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
   2:     0x5608ce36b53c - std::sys_common::backtrace::_print_fmt::h4eacf4e9ad977499
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/sys_common/backtrace.rs:67:5
   3:     0x5608ce36b53c - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1e42c22572a7e7b4
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/sys_common/backtrace.rs:46:22
   4:     0x5608ce39316c - core::fmt::write::h072b578a8e90aa54
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/core/src/fmt/mod.rs:1150:17
   5:     0x5608ce3641f5 - std::io::Write::write_fmt::hc32d3cabefff1d24
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/io/mod.rs:1667:15
   6:     0x5608ce36d570 - std::sys_common::backtrace::_print::h058b85b6efc15780
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/sys_common/backtrace.rs:49:5
   7:     0x5608ce36d570 - std::sys_common::backtrace::print::hdb7de10b704104b4
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/sys_common/backtrace.rs:36:9
   8:     0x5608ce36d570 - std::panicking::default_hook::{{closure}}::h5451997d203bda2f
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:210:50
   9:     0x5608ce36d127 - std::panicking::default_hook::h419b121e68f746a2
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:227:9
  10:     0x5608ce36dc24 - std::panicking::rust_panic_with_hook::h32c44b1364c1c247
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:624:17
  11:     0x5608ce36d700 - std::panicking::begin_panic_handler::{{closure}}::he2e5f48fb16982d1
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:521:13
  12:     0x5608ce36b9e4 - std::sys_common::backtrace::__rust_end_short_backtrace::haea54a33f9e18aba
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/sys_common/backtrace.rs:141:18
  13:     0x5608ce36d669 - rust_begin_unwind
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:517:5
  14:     0x5608cdc6db01 - core::panicking::panic_fmt::h824e0febbdf5e655
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/core/src/panicking.rs:101:14
  15:     0x5608cdc6d9f3 - core::option::expect_failed::h3867f03951c5322d
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/core/src/option.rs:1615:5
  16:     0x5608ce17e171 - core_lang::semantic_analysis::ast_node::expression::typed_expression::method_application::type_check_method_application::h86d3a2259bdb2bdb
  17:     0x5608ce2217a9 - core_lang::semantic_analysis::ast_node::expression::typed_expression::TypedExpression::type_check::h2017d6b3c8d3544a
  18:     0x5608ce1b9f4a - core_lang::semantic_analysis::ast_node::TypedAstNode::type_check::{{closure}}::h49c3713be9fe514c
  19:     0x5608ce1a57bf - core_lang::semantic_analysis::ast_node::TypedAstNode::type_check::h50077c2b778eb933
  20:     0x5608ce0ac52c - core::ops::function::impls::<impl core::ops::function::FnMut<A> for &mut F>::call_mut::h0be517620c49dd91
  21:     0x5608ce157ff2 - <alloc::vec::Vec<T> as alloc::vec::spec_from_iter::SpecFromIter<T,I>>::from_iter::h3d468b23061aa639
  22:     0x5608ce0c0083 - core_lang::semantic_analysis::ast_node::code_block::TypedCodeBlock::type_check::hb9d924429718c1e0
  23:     0x5608ce0f9565 - core_lang::semantic_analysis::ast_node::declaration::TypedFunctionDeclaration::type_check::hdd7554e4472a541a
  24:     0x5608ce067e2d - core_lang::semantic_analysis::ast_node::impl_trait::type_check_trait_implementation::h144d2d03ad7455e3
  25:     0x5608ce0660f0 - core_lang::semantic_analysis::ast_node::impl_trait::implementation_of_trait::h594f2768ae27886e
  26:     0x5608ce1a7971 - core_lang::semantic_analysis::ast_node::TypedAstNode::type_check::h50077c2b778eb933
  27:     0x5608ce06ea76 - core_lang::semantic_analysis::syntax_tree::TypedParseTree::type_check_nodes::{{closure}}::hb715714e5fa039cf
  28:     0x5608ce14a1d2 - alloc::vec::source_iter_marker::<impl alloc::vec::spec_from_iter::SpecFromIter<T,I> for alloc::vec::Vec<T>>::from_iter::h4255277f74360568
  29:     0x5608ce235b00 - core_lang::semantic_analysis::syntax_tree::TypedParseTree::type_check::hca3860efc63d7b3f
  30:     0x5608ce1879c5 - core_lang::compile_to_asm::{{closure}}::h5246d3bf02574c6d
  31:     0x5608ce18464c - core_lang::compile_to_asm::ha91d8e304f844c74
  32:     0x5608ce187b41 - core_lang::compile_to_bytecode::h40302e1fbda2bf20
  33:     0x5608cdcb797f - forc::ops::forc_build::build::h1568f6f657a18eac
  34:     0x5608cdcaa1d0 - forc::cli::run_cli::{{closure}}::habb5ece9be8d9145
  35:     0x5608cdca75f7 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::hb86145d1833bca62
  36:     0x5608cdc8cca2 - tokio::park::thread::CachedParkThread::block_on::h6174feaf988d2e0a
  37:     0x5608cdc8ce12 - tokio::runtime::thread_pool::ThreadPool::block_on::h15aba608d40d9c4d
  38:     0x5608cdcc9795 - tokio::runtime::Runtime::block_on::h69d8dc2268d7a023
  39:     0x5608cdd0f427 - forc::main::hcbd5036a2d174f05
  40:     0x5608cdc86823 - std::sys_common::backtrace::__rust_begin_short_backtrace::h4864e5d8daa0ae6c
  41:     0x5608cdcc0f0d - std::rt::lang_start::{{closure}}::he6c9ed2ed7630e1c
  42:     0x5608ce36e22a - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h97e9d5f21cbee92f
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/core/src/ops/function.rs:259:13
  43:     0x5608ce36e22a - std::panicking::try::do_call::hdfecd950eba8f698
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:403:40
  44:     0x5608ce36e22a - std::panicking::try::h3c77c8ba3eb0735c
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:367:19
  45:     0x5608ce36e22a - std::panic::catch_unwind::h8e0d62076d8d837e
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panic.rs:129:14
  46:     0x5608ce36e22a - std::rt::lang_start_internal::{{closure}}::h647045b4c6a22e67
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/rt.rs:45:48
  47:     0x5608ce36e22a - std::panicking::try::do_call::h905d96e4a757647e
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:403:40
  48:     0x5608ce36e22a - std::panicking::try::hc113426beb3c908b
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panicking.rs:367:19
  49:     0x5608ce36e22a - std::panic::catch_unwind::h74f684ea7038ea12
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/panic.rs:129:14
  50:     0x5608ce36e22a - std::rt::lang_start_internal::h5ba185919d396c97
                               at /rustc/09c42c45858d5f3aedfa670698275303a3d19afa/library/std/src/rt.rs:45:20
  51:     0x5608cdd0f4f2 - main
  52:     0x7f2fbfef5565 - __libc_start_main
  53:     0x5608cdc6e32e - _start
  54:                0x0 - <unknown>",3,13
371,2021-11-05T20:17:59Z,2021-11-05T21:27:39Z,2021-11-05T21:27:39Z,5,102,10,Closes #370.,2,0
372,2021-11-05T20:56:56Z,2021-11-05T22:44:58Z,2021-11-05T22:44:58Z,7,192,8,Blocked by #371 since the test relies on it.,2,0
373,2021-11-08T17:47:36Z,2021-11-09T02:05:44Z,2021-11-09T02:05:44Z,1,2,2,"Noticed this this morning...
3 | fn main () {
4 |   let x: bool = 5;                                                                                               
  |                 ^ Mismatched types: Expected type u64 but found type bool. Type u64 is not castable to type bool.
  |                    help:  
This change fixes that so it says expected type bool but found u64. This was just a small typo that went in with the type inference engine (#286)",2,0
376,2021-11-11T06:17:23Z,2021-11-12T18:26:43Z,2021-11-12T18:26:43Z,78,597,659,"I ran clippy over the codebase and fixed most of the warnings that it raises. Most the remaining lints are either functions that have too many arguments or large size differences between enum variants. Reducing the number of function arguments would require a better understanding of the codebase so that arguments can be sensibly grouped into logical types. Whether fixing the large enum variant warnings by adding extra layers of indirection is a good idea or not depends on how the offending types are being used in practice, and so I've also relegated that to a time where I know the code better.",4,4
377,2021-11-11T06:40:23Z,2021-11-16T11:02:47Z,2021-11-16T11:02:47Z,3,46,38,"There's some places in the forc code where &str/String are being used to represent paths. This PR changes these to use &Path/PathBuf instead. This makes the code clearer, allows using the methods of Path and also covers the edge-case of users having non-utf8 paths.",5,6
379,2021-11-11T09:16:14Z,2021-11-11T17:45:18Z,2021-11-11T17:45:18Z,4,40,21,"Closes #378.
It was possible for the compiler to try and unify the same Unknown type id with itself, which would in turn create a Ref to itself.  Trying to unify a recursive Ref was itself a recursive operation before a check was added.
I also added a little mod to the test harness to make the deployed contract E2E tests honour the regex filter.",2,1
381,2021-11-11T18:24:11Z,2021-11-11T19:30:20Z,2021-11-11T19:30:21Z,13,172,279,"I had made #346 to encompass this, but since @nfurfaro is blocked on this, I think we need to revert it first and re-implement it later.
This closes #346 but re-opens #21.
The core issue with #296 was that it assumed all spans in an error message will be from the same file. In reality, this is rarely the case. See #346 for some thoughts on an alternate implementation.",2,0
384,2021-11-12T04:46:01Z,2021-11-16T03:53:06Z,2021-11-16T03:53:06Z,8,300,23,"Instead of using the inflector crate, implement our own functions for detecting and converting between identifier styles (eg. snake_case, SCREAMING_SNAKE_CASE, etc.). This fixes the bugs with inflector, for instance that the compiler doesn't detect u32 as being in snake case and suggests changing it to u_32.",4,1
386,2021-11-12T09:25:45Z,2021-11-16T02:43:37Z,2021-11-16T02:43:37Z,15,91,41,"Fixes #375
Allow const and enum declarations to have visibility qualifiers. Disallow importing non-public items.",3,0
388,2021-11-12T16:41:07Z,2021-11-12T18:26:21Z,2021-11-12T18:26:21Z,1,16,2,"There were numerous compiler errors in the example project found by @Dentosal
This fixes them by fully implementing the Ord trait.
Note: we only really need the eq() method here... is there a way to partially implement a trait? Nope.",3,0
389,2021-11-12T16:46:02Z,2021-12-03T21:23:31Z,2021-12-03T21:23:31Z,9,147,0,"This pr replaces #369
There were some strange things happening in that branch with the cargo run command crashing while running the test suite.
OOM errors...I moved the new code to a fresh branch to try to rule out additional possible sources of error.
The biggest change to Context is that it now only uses functions, where before there were structs and methods.",3,3
390,2021-11-12T19:45:18Z,2021-11-27T16:27:49Z,2021-11-27T16:27:49Z,9,137,169,"This will add a wrapper type for B512 to stdlib.
It's a simple struct containing 2 b256 values, and will be useful for passing around public-keys and signatures, both of which are 512 bits in length.",3,0
391,2021-11-12T22:20:15Z,2021-11-27T00:14:44Z,2021-11-27T00:14:44Z,49,1447,415,"Generics
This PR introduces generic functions, structs, and enums into Sway. We are using monomorphization (as opposed to polymorphism or similar) to accomplish this. There may be some rough edges around duplicated warnings and errors right now, as the monomorphizing adds new types to the type engine which, if not used, can result in yet another dead code warnings.
The storage API still needs a proper design and rework, but for now, I've refactored the basic copy/pasted implementation into a generic one.
Script Data Access
This needs to be tested further, but I think this PR is big enough for now. Consider the script data implementation here a rough first-draft.
Remaining work to be addressed in follow-up PRs:

Trait constraints -- needed to improve storage API.
Impl traits and impl-self in general are not guaranteed to work with this PR. That will be coming later.",5,3
393,2021-11-15T08:42:11Z,2021-11-15T19:56:10Z,2021-11-15T19:56:10Z,3,22,25,Store file paths as Arc<PathBuf> instead of PathBuf inside Span and BuildConfig to avoid repeatedly cloning paths. This makes the compiler run about twice as fast in my tests.,3,0
394,2021-11-15T18:56:47Z,2021-11-27T17:12:37Z,2021-11-27T17:12:37Z,5,53,0,,3,0
397,2021-11-17T07:30:18Z,2021-11-18T02:33:42Z,2021-11-18T02:33:42Z,7,56,37,In TypeInfo::parse_from_pair use the parsing rules defined in the grammar rather than parsing the type from the original string of code.,3,1
398,2021-11-17T07:33:57Z,2021-11-18T03:28:29Z,2021-11-18T03:28:29Z,1,16,12,"This builds off of #397. Both this and #397 are precursors to a larger PR to implement tuples.
This PR reduces the number of instructions and memory required by struct expressions for some edge-cases.",4,3
399,2021-11-17T08:47:42Z,2022-01-04T18:20:33Z,2022-01-04T18:20:33Z,32,601,152,"This PR implements parsing, type-checking and code generation for tuples. It doesn't (yet) implement field access (eg. my_tuple.0) or field reassignments, which means it's not yet possible to test that tuples contain the data they're supposed to (hence this PR being a draft). Testing this will require either pattern matching to be implemented or for me to re-work the parser a bit.",6,21
400,2021-11-17T17:37:58Z,2021-11-19T13:49:08Z,2021-11-19T13:49:08Z,4,40,2,"There was discussion in Slack about the preferred way to handle asserting, panics, reverts, etc... in different contexts.
For now, this gives us a simple assert(val: bool) function to use, and renames revert(code: u64) to panic(code: u64) to be more Rust-like.
panic() just calls the RVRT opcode, which should panic in a predicate or script, or revert in a contract (call) context.",4,0
401,2021-11-17T19:01:21Z,2021-11-18T22:33:29Z,2021-11-18T22:33:29Z,4,45,2,All in the title.,3,1
403,2021-11-18T13:59:49Z,2021-11-18T16:43:16Z,2021-11-18T16:43:16Z,1,2,0,"It's obviously not perfect syntax highlighting, but approximating as rust syntax makes Sway files more readable on github.",2,1
404,2021-11-18T16:29:28Z,2021-11-19T00:41:53Z,2021-11-19T00:41:53Z,2,61,7,"Closes #402
Another special case for types larger than a word that I previously missed -- we should be using MCPI instead of LW to reassign struct fields larger than a word, as struct data is laid out inline and doesn't contain single-word references to b256 values like other areas would.
I tested this with @nfurfaro 's types-B512 branch and it passed his tests.",3,0
405,2021-11-18T20:46:16Z,2021-11-19T13:49:45Z,2021-11-19T13:49:45Z,5,32,0,"Naming subject to change.
Feel free to modify and/or correct at will.
This could be greatly expanded... but I also expect that a new Fuel docs website would cover much of the same ground so I'm just starting with a few things here for now.",2,0
410,2021-11-22T10:33:01Z,2021-11-23T01:12:25Z,2021-11-23T01:12:25Z,10,159,178,"This PR addresses a dead-locking issue that can happen when unification tries to return an error. unify_with_self would acquire the lock on TYPE_ENGINE before calling methods on it, however those methods could then try to re-acquire the lock when calling friendly_type_str.
I've fixed this and avoided future, similar issues by factoring out the lock-holding part of the logic into its own data structure.",4,0
414,2021-11-22T22:52:22Z,2021-12-23T19:07:26Z,2021-12-23T19:07:26Z,33,1364,185,"Closes #23
Uses the algorithms implemented here: https://github.com/emilyaherbert/pattern-matcher",3,3
416,2021-11-23T19:07:42Z,2021-11-24T17:57:13Z,2021-11-24T17:57:13Z,3,88,102,"Had some time, this seems only blocking issue for windows build. Basically, annotate-snippets is the same lib that is used with cargo, and with sway looking similar to rust I think it is a good fit.
It now looks like:",4,2
417,2021-11-23T19:13:44Z,2021-11-23T22:24:38Z,2021-11-23T22:24:38Z,1,3,2,,2,0
419,2021-11-24T06:54:11Z,2021-12-08T22:59:44Z,2021-12-08T22:59:44Z,4,18,3,Allow parsing structs/enums with zero fields. Add a test that such types can be compiled.,3,9
420,2021-11-24T10:46:09Z,2021-11-26T08:29:44Z,2021-11-26T08:29:44Z,9,30,35,"Run cargo-sort on workspace, there are some small changes and reorderings.
called cargo sort --workspace .",4,0
424,2021-11-26T08:42:38Z,2021-11-29T23:50:41Z,2021-11-29T23:50:41Z,27,1235,55,"Here's an initial implementation of static arrays.  This has taken me a while and it's arguably not yet finished but I want to get this going sooner rather than later.
The basics work -- declaring both [1, 2, 3] or [false; 3] style initialisers, indexing with a u64 index, type checking everywhere, arrays of arrays, arrays of structs, etc.
But there's still some work:

Parsing of arrays of aggregates is a bit lacking, it currently requires a[0][1] to be (a[0])[1].
The Index trait (or at least my_type.index(arg) for my_type[arg]) is invoked but not at all implemented yet.
No mutation at all.  It doesn't compile if you try.
Code generation is a bit ordinary:

Unnecessary copies may be made during initialisation.
Element initialisation is done one by one, even when a MCP could do it all at once.
Every single index access is bounds checked (and will RVRT on failure) whether it needs it or not.
While testing large arrays the tests just ran out of gas.  They're too expensive.



The first one could be fixed fairly easily, I just wanted to get on with it, working with Pest sucks.
The next two are non-trivial, we can tackle them when they're needed, which maybe now, IDK.
The code generation can be fixed with The Magic Of IR 🪄 -- as I was writing all the code gen code I was thinking, 'dammit, we're going to have to write all this again, except better'.  But that's OK.  The point of IR is to make that sort of thing relatively easy.",3,3
430,2021-11-30T20:12:44Z,2021-12-06T23:04:35Z,2021-12-06T23:04:35Z,6,18,16,All in the title.,4,3
432,2021-12-01T19:14:58Z,2022-01-12T21:44:43Z,2022-01-12T21:44:43Z,8,109,0,"This PR adds tests for FuelLabs/sway-lib-std#5
It also adds sig-gen-util, a small Rust program that starts with a hard-coded private key and a message to sign, and generates a signature, as well as the derived public key and fuel address.
There are more features to add to ec_recover which are tracked here: #1067",4,6
433,2021-12-02T01:47:37Z,2021-12-06T15:37:19Z,2021-12-06T15:37:19Z,7,541,14,"Adds testing functionality to Forc, i.e. forc test.
forc test is a simple wrapper on cargo test, but it leverages new capabilities that forc init offers.
forc init now creates a Rust-based test harness under tests/harness.rs:
$ forc init my-fuel-project
$ cd my-fuel-project
$ tree
.
├── Forc.toml
├── src
│   └── main.sw
└── tests
    ├── Cargo.toml
    └── harness.rs

This tests/ directory is a Rust package (hence the Cargo.toml) containing all the necessary dependencies to write Rust-based tests (fuels-rs for the SDK, fuel-core for running a local node, and so on.)
Then, to run these Rust-based tests:
$ forc test

running 1 test
test harness ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.64s

The tests are written using fuels-rs (our SDK), for instance:
use fuel_tx::Salt;
use fuels_abigen_macro::abigen;
use fuels_rs::contract::Contract;
use rand::rngs::StdRng;
use rand::{Rng, SeedableRng};

// Generate Rust bindings from our contract JSON ABI
abigen!(MyContract, ""./my-contract-abi.json"");

#[tokio::test]
async fn harness() {
    let rng = &mut StdRng::seed_from_u64(2322u64);

    // Build the contract
    let salt: [u8; 32] = rng.gen();
    let salt = Salt::from(salt);
    let compiled = Contract::compile_sway_contract(""../"", salt).unwrap();

    // Launch a local network and deploy the contract
    let (client, contract_id) = Contract::launch_and_deploy(&compiled).await.unwrap();

    let contract_instance = MyContract::new(compiled, client);

    // Call `initialize_counter()` method in our deployed contract.
    // Note that, here, you get type-safety for free!
    let result = contract_instance
        .initialize_counter(42)
        .call()
        .await
        .unwrap();

    assert_eq!(42, result.unwrap());

    // Call `increment_counter()` method in our deployed contract.
    let result = contract_instance
        .increment_counter(10)
        .call()
        .await
        .unwrap();

    assert_eq!(52, result.unwrap());
}
Running forc test on it:
$ forc test
    Finished test [unoptimized + debuginfo] target(s) in 0.50s
     Running harness.rs (target/debug/deps/integration_tests-a8f0d1f6c54af8f9)

running 1 test
  Compiled library ""stdlib"".
  Compiled script ""my-second-project"".
  Bytecode size is 264 bytes.
Contract deployed @ 2dff0048ba56eb2473c453f630c6a3dfdffbdd1d5d5bbcad4a05b95cdc72d56f
test harness ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.66s",5,11
434,2021-12-03T08:26:44Z,2021-12-03T18:48:16Z,2021-12-03T18:48:16Z,16,434,377,"This PR makes the crate_namespace field of Namespace a reference to avoid exponential-cloning of namespaces.
I'm in the process of further re-jigging the handling of namespaces which will make this code cleaner and remove the enormous amount of unnecessary deep-cloning which is still happening. However since that's turned out to be non-trivial I'm pushing this PR now so we can get back to running tests without oom-ing.",3,1
435,2021-12-03T16:18:19Z,2021-12-03T19:57:40Z,2021-12-03T19:57:40Z,5,30,0,"This adds a single height() function to the stdlib.
1 question: As the function is already namespace under the std::block lib, could we shorten the name to just height() without sacrificing too much in the way of semantics?
ie:
use std::block::height;

if height() >= n {
    do stuff...
}


update: name changed to height().",3,1
436,2021-12-03T21:09:52Z,,2022-01-28T16:43:59Z,8,171,0,"Adds mint, burn, transfer_to_output and force_transfer functions.
I don't like the name of transfer_to_output personally.
Still WIP.",2,5
437,2021-12-06T02:38:55Z,2021-12-09T06:22:48Z,2021-12-09T06:22:48Z,16,456,417,For most the places where we use Namespace it doesn't make sense to have a crate_namespace field. This PR splits out the field and passes it separately to the functions where it's needed.,4,1
441,2021-12-07T00:44:07Z,2021-12-07T18:45:00Z,2021-12-07T18:45:00Z,70,121,112,"Closes #440
This introduces a lib-core, similar to Rust's core, which contains things truly primitive and fundamental. These are abstracted into a separate library so that the standard library doesn't have a bootstrapping problem in referencing operators defined within it.
Also, I renamed stdlib to lib-std to be more UNIXy and cool. The new core lib lib-core is consistent with that as well.
I went ahead and swapped the few things using operator functions in the standard library to use the actual ! operator.",5,1
442,2021-12-07T20:37:07Z,2021-12-07T22:12:32Z,2021-12-07T22:12:32Z,4,53,0,"This is identical to the Address type in all but name.
Provided in the lib-std solely for type-safety.",2,0
443,2021-12-07T20:57:18Z,2021-12-15T23:33:40Z,2021-12-15T23:33:40Z,8,70,13,"This implements some  functions to allow querying the balance of either the current contract, or a given contract_id for a given token color(token_id/asset/_id).
Once token-ops are merged I'd like to backfill some additional tests here using a real deployed token and non-zero balances.
Ref: Slack discussion: https://fuellabs.slack.com/archives/C01L1HUJSL8/p1637329561415200",3,1
446,2021-12-08T22:37:26Z,2021-12-09T16:16:28Z,2021-12-09T16:16:29Z,1,1,1,Massively improves performance as we aren't using exponentially more memory per dependency :),3,1
447,2021-12-09T07:28:47Z,2021-12-09T18:18:19Z,2021-12-09T18:18:19Z,8,182,375,"This type was originally defined like this:
pub struct HllParseTree<'sc> {
    pub contract_ast: Option<ParseTree<'sc>>,
    pub script_ast: Option<ParseTree<'sc>>,
    pub predicate_ast: Option<ParseTree<'sc>>,
    pub library_exports: Vec<(Ident<'sc>, ParseTree<'sc>)>,
 }
Which says that a parse tree can optionally contain an AST for a contract, and optionally contain an AST for a script, and optionally contain an AST for a predicate, and contains any number of ASTs of libraries.
It's now defined like this:
pub struct HllParseTree<'sc> {
    pub tree_type: TreeType<'sc>,
    pub tree: ParseTree<'sc>,
}

pub enum TreeType<'sc> {
    Predicate,
    Script,
    Contract,
    Library { name: Ident<'sc> },
}",4,1
448,2021-12-09T09:44:39Z,2021-12-13T16:43:59Z,2021-12-13T16:43:59Z,5,38,81,"The LibraryExports type contained a namespace which happened to only ever contain a single sub-namespace. This PR makes this statically true by inlining the sub-namespace and its name into LibraryExports. Its trees: Vec<TypedParseTree<'sc>> field (which actually only ever contained 1 tree, rather than n) was unused so it has been removed. LibraryExports is then removed entirely since it's simpler to just inline it into the parent type.
Note that this PR includes PRs #446 and #447 and so will need to be rebased once those are merged.",3,2
451,2021-12-09T16:57:11Z,2021-12-15T20:57:35Z,2021-12-15T20:57:35Z,17,135,464,"All in the title.
Unblocks #443",3,4
452,2021-12-09T22:52:37Z,2021-12-12T03:28:09Z,2021-12-12T03:28:09Z,1,201,0,,2,0
453,2021-12-10T04:36:11Z,2021-12-11T20:36:05Z,2021-12-11T20:36:05Z,7,86,10,"added documentation for public functions, enums and structs for lib.rs
other minor changes related to the doc & naming conventions",2,0
455,2021-12-13T21:12:22Z,2022-01-01T04:51:37Z,2022-01-01T04:51:37Z,11,23,11,"Internship Documentation


Additional documentation


Minor fixes to broken links


Minor fixes to doc styling",4,2
459,2021-12-15T17:45:44Z,2021-12-15T19:26:38Z,2021-12-15T19:26:38Z,10,30,12,"There is nondeterminism in the order in which constant declarations are added to the data section. We only ever had one constant before, ETH_COLOR, so this didn’t matter. This is combined with another bug in which all imported constants are in the bytecode even if they are not used. That bug will be fixed by IR, so we haven’t prioritized it.
These two things combined are causing bytecode generation to be inconsistent, resulting in different contract IDs. This change makes that iteration deterministic.",3,0
461,2021-12-15T20:47:47Z,2021-12-21T19:36:05Z,2021-12-21T19:36:05Z,4,136,35,Closes #427,4,2
464,2021-12-16T15:15:45Z,2021-12-16T17:36:51Z,2021-12-16T17:36:51Z,25,78,57,"Lint
Into to From:
Optimization
: From gives Into for free, where the inverse isn't true. I've replaced std::convert::Into with std::convert::From and changed the implementation & function to use From & from in type_parameter.rs.
to_bytecode to to_bytecode_mut:
Readability
: Added postfix _mut to mutable conversion functions since it takes a mutable reference to self and may implement the Copy trait.
Enum Variant Size Disparity
Optimization
: Used std::boxed::Box to allocate large variants on the heap and reduce enum size.
Removed Unused Lifetimes
Readability
Removed Redundant Clones
Optimization
Too Many Arguments
Readability
: Added #[allow(clippy::too_many_arguments)] since it's unclear at this point in time if they can be simplified further.",3,0
466,2021-12-16T18:00:00Z,2021-12-17T04:35:00Z,2021-12-17T04:35:00Z,34,1421,1057,"This is a part of implementing the new storage API. This change introduces the concept of pure and impure functions. An impure function is one which accesses storage opcodes. The basic rules are:

Impurity can only be utilized inside of a contract
Pure functions cannot call impure functions
Purity is the default mode for a function, so there is no keyword for purity. There's only the impure keyword which decorates function signatures.

This PR also starts the process of a type checking refactor, which adds a single TypeCheckArguments type. This doesn't mend a lot of pain yet, but I think it will open us up to some organizational gains in the future, especially once #463 goes in.
Note that this PR does not check that all usages of storage opcodes are within impure functions. So you can call, e.g. SWW from a pure function right now. That's the next step -- this PR was getting big enough without it, so I figured I'd separate that feature into another PR.
Some notes on the impure keyword
Pure functions are a thing in functional languages, and naturally the converse is impure. In that context, purity refers to side effects. I feel storage access is a form of side effect, same as I/O access in traditional programming. For this reason, impure felt like a natural choice.
Impure is a lot of letters though. IMO it offsets the fn keyword too much 😅 .  So from an aesthetic perspective, imp fn, ifn, etc., could also be considered. But we can bikeshed that later",4,4
468,2021-12-16T21:19:17Z,2021-12-17T19:44:31Z,2021-12-17T19:44:31Z,5,41,0,"All in the title.
I need this for my token-ops pr, #436",2,1
471,2021-12-17T16:26:26Z,2021-12-17T17:57:40Z,2021-12-17T17:57:40Z,5,64,17,"This PR changes:

This allows the LW opcode in asm blocks. The LW opcode is a tricky one to get right, since it takes an absolute pointer, but we need it to allow us to pull certain constants from VM memory.
Reports unknown opcode errors earlier. Before, it would only report them when you use them, as the errors were reported during code generation which happens after dead code elimination. With this change, they are reported at parsing time so that is no longer an issue.
Fixes a register allocation bug in the ALOC opcode
Tweaks the still untested script data function to use heap memory for dynamic allocation",2,0
472,2021-12-17T17:33:41Z,2022-02-23T23:51:55Z,2022-02-23T23:51:55Z,36,429,233,Closes #75,4,7
473,2021-12-17T17:51:46Z,2021-12-21T19:36:20Z,2021-12-21T19:36:20Z,5,51,5,Closes #469,3,2
476,2021-12-22T16:08:07Z,2021-12-23T20:07:02Z,2021-12-23T20:07:02Z,23,78,77,"There's more to be done on this front.
This PR tackles the user-facing usage of the terminology (Sway book), lib-std and the sway test-suite.
It does not touch anything lower level than this.",3,3
477,2021-12-22T18:10:29Z,2022-01-01T21:43:37Z,2022-01-01T21:43:37Z,14,91,81,"Clippy Lint Workflow

intended to catch warnings at time of PR",3,2
478,2021-12-22T19:37:18Z,2021-12-28T01:24:35Z,2021-12-28T01:24:35Z,28,522,58,"As the title says, writing more documentation for the Sway book. I've been using The Rust Book as a template for structure and tone.",4,2
479,2021-12-22T20:47:15Z,2021-12-23T19:08:12Z,2021-12-23T19:08:12Z,96,119,105,,3,0
480,2021-12-23T02:16:56Z,2021-12-23T16:39:16Z,2021-12-23T16:39:16Z,88,92,92,"Fixes #449

And update license file of existing Forc manifest files.
Also re-order fields for the default manifest files to conform with conventions.
Also fix Cargo manifest to use authors instead of author.
Remove an extra whitespace.",2,0
481,2021-12-23T02:38:58Z,2021-12-23T20:06:44Z,2021-12-23T20:06:44Z,5,56,19,"This removes usage of ""colored coins"" and adds the ContractId type to the docs.
I also ran MarkdownLint to fix some formatting.",3,0
483,2021-12-23T08:57:23Z,2022-01-05T13:51:20Z,2022-01-05T13:51:20Z,103,2501,2702,This PR removes the <'sc> lifetime which was on just about every type and function in the codebase. Source code is now stored in an Arc<str> and Span is used to represent a sub-slice of the string.,4,9
485,2021-12-23T20:45:26Z,2021-12-24T17:28:41Z,2021-12-24T17:28:41Z,26,128,81,"This change converts sway-server into a library which is consumed by forc and executed via the cli command forc lsp.

It is not configurable right now, but as it takes a Command just like all the others, we can add flags as needed.
In order to avoid circular dependencies, I introduced a common use crate for reusable utility functions and constants.",2,0
486,2021-12-24T19:57:42Z,2021-12-25T00:40:56Z,2021-12-25T00:40:56Z,142,320,263,won't pass yet; pending other publishes,2,0
490,2021-12-25T05:03:46Z,2021-12-25T06:25:11Z,2021-12-25T06:25:11Z,10,32,32,"The cargo publish action seems to want an exact match, so use the exact version for local deps. Also bump version to v0.1.1.",2,0
493,2021-12-25T15:31:15Z,2021-12-25T17:24:34Z,2021-12-25T17:24:34Z,16,233,255,"Fixes #492

Regenerate lockfile
Fix API breaks for lspower
Bump version to 0.1.2

This is a bandaid in the long run, as we'll need a way to know that publishing library crates (which don't use the lockfile iiuc) don't break before actually tagging a release.",2,0
494,2021-12-25T18:23:25Z,2021-12-25T19:45:07Z,2021-12-25T19:45:07Z,10,31,31,Crates.io doesn't accept *s,2,0
498,2021-12-26T02:34:35Z,2021-12-28T01:18:46Z,2021-12-28T01:18:46Z,1,6,6,"Fix order of parameters to properly fill in package name and author(s).
Use [] for Cargo authors.
Use crates.io instead of git dependencies.",2,0
500,2021-12-26T14:55:41Z,2021-12-26T17:35:19Z,2021-12-26T17:35:19Z,1,1,2,Fixes #499,2,0
504,2021-12-27T15:43:30Z,2021-12-28T21:41:25Z,2021-12-28T21:41:25Z,3,67,0,Document some temporary hiccups.,3,2
505,2021-12-27T15:47:31Z,2021-12-28T01:17:49Z,2021-12-28T01:17:49Z,1,0,2,,2,0
511,2021-12-28T01:51:54Z,2021-12-28T15:18:33Z,2021-12-28T15:18:33Z,1,0,2,Won't be necessary soon once repos are public.,2,0
512,2021-12-28T02:00:04Z,2021-12-28T15:14:21Z,2021-12-28T15:14:21Z,1,0,2,There's more than one to do things is just confusing.,2,0
517,2021-12-28T17:21:21Z,2021-12-28T22:10:12Z,2021-12-28T22:10:12Z,1,1,0,"I'm not actually sure why this is necessary, shouldn't fuels-core be a dependency of fuels-rs? Regardless, here it is. cc @digorithm",3,1
522,2021-12-28T19:49:30Z,2021-12-28T21:52:00Z,2021-12-28T21:52:00Z,71,175,931,"This change:

Fixes a bug in nested git dependency handling
Switches the tests to use git dependencies for the standard and core libraries
Removes lib-std and lib-core since they are in their own repos now
Uses the git version for the standard library dependency in the default forc manifest",2,1
524,2021-12-28T20:21:38Z,2021-12-28T21:22:39Z,2021-12-28T21:22:40Z,2,63,28,"Closes #519
This PR removes the internal compiler error message in the case where a literal number is just too large for the type. We now show a prettier error:",2,0
532,2021-12-29T17:25:51Z,2021-12-29T19:44:11Z,2021-12-29T19:44:12Z,15,82,35,This fixes a bug found by @ControlCplusControlV on the discord server -- we were stopping the search for methods early if any methods at all exist in the local namespace.,2,0
533,2021-12-29T20:47:13Z,2021-12-30T00:23:48Z,2021-12-30T00:23:48Z,1,2,0,,2,0
535,2021-12-30T00:05:14Z,2021-12-30T02:22:32Z,2021-12-30T02:22:32Z,6,56,16,"Previously, certain if expressions were not unifying the unknown type with the unit type. Instead of comparing types, unification should have been used. This PR makes that change, renames some variables for ease of reading, adds a test case for this, and bumps the version to 0.1.8.",2,0
537,2021-12-30T18:02:12Z,2021-12-30T19:25:35Z,2021-12-30T19:25:35Z,3,25,0,"Not exhaustive, but a start.",2,0
539,2021-12-30T19:23:19Z,2021-12-30T20:49:53Z,2021-12-30T20:49:53Z,3,7,13,forc build would return success (0) even if the build failed. This PR updates it to return a failed status code.,2,0
542,2021-12-30T21:40:18Z,2021-12-30T22:48:40Z,2021-12-30T22:48:40Z,4,40,0,"Just a simple test that ensures Modulo can return a 0 value and non zero value for each type, test may not work on your machine until my fork is merged to the core lib, but worked for me when using the fork of core-lib with modulo support installed on my machine.
If you want to replicate first just clear your .forc folder and install my fork of core-lib, then run cargo run -- modulo_uint_test",3,1
546,2021-12-31T21:57:22Z,2022-01-01T04:50:43Z,2022-01-01T04:50:43Z,9,16,10,Some lints that needed to be cleared before the Clippy Check Workflow could be finished.,2,0
547,2022-01-01T01:26:39Z,2022-01-01T16:05:35Z,2022-01-01T16:05:35Z,2,159,133,"Fixes #503
Solidity syntax highlighting doesn't seem to be maintained well, and isn't compatible with with current version of highlight.js as per the docs: https://github.com/highlightjs/highlightjs-solidity",2,0
548,2022-01-01T01:47:12Z,2022-01-01T16:06:19Z,2022-01-01T16:06:19Z,3,37,32,,2,0
549,2022-01-01T01:49:56Z,2022-01-01T16:06:04Z,2022-01-01T16:06:04Z,1,2,2,,2,0
550,2022-01-01T01:53:37Z,2022-01-01T16:05:51Z,2022-01-01T16:05:51Z,1,1,2,,2,0
551,2022-01-01T17:22:22Z,2022-01-01T23:05:16Z,2022-01-01T23:05:16Z,2,163,151,toml is apparently ini highlightjs/highlight.js#1814,3,1
552,2022-01-01T17:45:45Z,2022-01-02T00:14:45Z,2022-01-02T00:14:46Z,1,1,0,,2,0
553,2022-01-01T17:48:53Z,2022-01-02T00:14:38Z,2022-01-02T00:14:38Z,1,2,2,,2,0
554,2022-01-01T17:52:27Z,2022-01-02T00:14:30Z,2022-01-02T00:14:30Z,1,3,5,"Change String to str[].
Change Boolean to bool.
Remove Byte.
Remove arrays from list of primitive types (it's in a section further down).",2,0
555,2022-01-01T18:01:54Z,2022-01-02T00:14:21Z,2022-01-02T00:14:21Z,1,3,2,,2,0
556,2022-01-01T19:08:33Z,2022-01-02T00:04:48Z,2022-01-02T00:04:48Z,1,74,70,,2,0
557,2022-01-01T19:17:05Z,2022-01-01T23:34:01Z,2022-01-01T23:34:01Z,1,7,7,,2,0
558,2022-01-01T21:32:43Z,2022-01-01T23:33:49Z,2022-01-01T23:33:49Z,7,42,69,,2,0
559,2022-01-01T21:38:39Z,2022-01-01T23:33:35Z,2022-01-01T23:33:35Z,2,0,59,"The page was largely unmaintained, and would be difficult to maintain. Half of it does not even belong in The Sway Book as it's an explanation of how a compiler works. There's a Wikipedia page for that. Feature completion and planned features should either be in https://github.com/FuelLabs/rfcs, or some other place than The Sway Book, like the README of this repository.",2,0
560,2022-01-02T00:13:54Z,2022-01-02T01:26:37Z,2022-01-02T01:26:37Z,1,0,6,No longer work ever since forc is on crates.io.,2,0
561,2022-01-02T01:27:27Z,2022-01-02T03:29:37Z,2022-01-02T03:29:37Z,7,29,30,,2,0
562,2022-01-02T01:34:03Z,2022-01-02T03:29:44Z,2022-01-02T03:29:44Z,3,0,18,"This already exists in the getting started section, in more detail.",2,0
564,2022-01-02T19:21:49Z,2022-01-03T00:17:25Z,2022-01-03T00:17:25Z,7,131,5,,2,0
565,2022-01-03T02:14:30Z,2022-01-03T15:21:10Z,2022-01-03T15:21:10Z,4,54,6,I expanded upon Program Types more to give an idea of a usecase for each type and when to use each. I also added more to the scripts section which was fairly barebones. I also added a lot the library section to help better outline the purpose of each library. If I messed up the wording anywhere let me know. It was a little bit late when writing this so it's possible I missed somethings,3,0
568,2022-01-03T15:40:10Z,2022-01-11T20:52:02Z,2022-01-11T20:52:02Z,2,12,2,Hover functionality was broken in the language server. Fixed it and also added types when hovering on variables in VS Code,3,1
573,2022-01-04T22:42:21Z,2022-01-06T17:55:18Z,2022-01-06T17:55:18Z,19,291,41,"Closes #572
This PR implements tuple desugaring in match statments. It is now possible to write:
script;

fn gimme_a_pair() -> (u32, u64) {
    (1u32, 2u64)
}

fn main() -> u32 {
    let x = gimme_a_pair();
    match x {
        (a, 2u64) => { a },
        (a, b) => { 0u32 },
    }
}",2,1
574,2022-01-04T22:43:49Z,2022-01-05T00:32:51Z,2022-01-05T00:32:51Z,1,2,2,,2,0
583,2022-01-05T23:55:08Z,2022-01-06T19:22:03Z,2022-01-06T19:22:03Z,2,2,2,,3,2
584,2022-01-05T23:57:59Z,2022-01-07T18:41:22Z,2022-01-07T18:41:22Z,19,200,80,"Closes #563
This enables a wider range of cases than the one mentioned in the issue. Specifically, the target is to eventually support all patterns supported by Rust: https://doc.rust-lang.org/reference/items/use-declarations.html
Right now, the following should work:
use a::b::{c}
use a::b::{c, d}
use a::b::{c as abc, d as abd}
use a::b::{c as abc, d::{e, f::g as abdfg}}
use a::b::{c as abc, d::{e, f::g, *}}
and so on.
Using Self is not yet covered.
The parsing algorithm is recurisve since a list of items could have its own list of items etc.
I still need to add a comprehensive test but here I'm converting some of the existing tests to use the newly supported method which gives extra coverage.
Edit: Added a test that covers a few cases. The remaining gaps, I believe, are:

Supporting self (as in: use a::b::{self as ab, c as abc};)
Handling the case where we have a trailing as after the }. Rust erros out for this. e.g. use a::{b, c} as d (this, of course, is meanignless).

Edit 2: Two more changes:

Handling trailing as after the }.
Handling non-final * more generically in the language file.
So, the following should give a parsing error:
use a::b::*::c
use a::b::c::{d, e::*::f}
use a::b::{c, d} as e",4,17
586,2022-01-06T00:54:11Z,2022-01-06T17:55:30Z,2022-01-06T17:55:30Z,1,2,2,"It was size_to_allocate_in_words which is misleading.  Changed to size_to_allocate_in_bytes.
This is a commit I've had floating around in my IR branch for a couple of months, I want to just commit it to get it out of the way.",3,0
588,2022-01-06T18:20:53Z,2022-01-06T21:37:51Z,2022-01-06T21:37:51Z,6,52,11,"This is the resolution to a bug found by @ControlCplusControlV in Discord. Trait implementations were not being pulled in to the local namespace when a star import was being used to bring the trait in. This doesn't matter with operators, since operators use the fully qualified method path (e.g. std::core::ops), but if you want to directly call a method, this falls apart.",4,0
593,2022-01-06T23:41:59Z,2022-01-07T19:39:40Z,2022-01-07T19:39:40Z,10,29,29,,2,0
594,2022-01-07T00:03:04Z,2022-01-07T19:34:42Z,2022-01-07T19:34:42Z,2,56,52,Looks like we missed the fact that one of the PRs overrode a dependency specification. This should fix that.,2,0
596,2022-01-07T06:46:39Z,2022-01-12T22:44:39Z,2022-01-12T22:44:40Z,31,4531,1,"This is the first step in getting the IR merged in.  It's just the source for the sway-ir crate, as a sibling to sway-core etc, with no actual dependencies between the two yet.
It's also still a WIP, needs documentation and the tests to be improved and fleshed out some more, etc.  But at this stage it has enough support to be used to compile Sway and pass the E2E tests, so merging it in (as an optional part of the pipeline initially) sooner rather than later would be beneficial.",5,10
597,2022-01-07T08:08:16Z,2022-01-12T21:39:30Z,2022-01-12T21:39:30Z,2,114,0,"Build & Publish Sway Docker Image via ci.yml for master branch and releases
Add docker-compose.yml for local deployment",3,6
598,2022-01-07T12:20:33Z,2022-01-07T16:31:34Z,2022-01-07T16:31:34Z,1,1,1,,3,0
611,2022-01-10T16:51:13Z,2022-01-11T16:22:37Z,2022-01-11T16:22:38Z,2,8,3,"Updated the file that a git dependency is downloaded to to avoid collisions where dependencies have the same name, but different URLs.",3,0
612,2022-01-10T17:10:31Z,2022-01-12T00:31:25Z,2022-01-12T00:31:25Z,2,71,57,"In Discord, @ControlCplusControlV found that we panic on generic traits. We don't actually have them implemented yet, so this PR changes that behavior from a compiler panic to a proper unimplemented compiler error.",3,1
613,2022-01-10T19:09:43Z,2022-01-10T21:01:40Z,2022-01-10T21:01:40Z,4,0,103,"This PR does two things:

Removes some dead code in sway-core that formatted errors using a Linux/OSX-only library
Removes that dependency from the workspace, thus restoring Windows compatibility.",2,0
616,2022-01-11T16:21:55Z,2022-01-14T18:28:33Z,2022-01-14T18:28:33Z,5,268,45,"This PR fixes issue #422 by implementing a format checker for the forc manifest
file (Forc.toml) in the forc fmt tool.

fix: add core dependency in sway example project and fix formatting
docs: warn about the formatter needing code that compiles
refactor: put the diff display inside its own function
feat: format manifest with forc fmt command",4,1
617,2022-01-11T20:55:12Z,2022-01-12T00:07:26Z,2022-01-12T00:07:26Z,1,20,179,Re-run cargo build to regenerate the lockfile.,3,0
618,2022-01-11T21:03:23Z,2022-01-11T23:17:53Z,2022-01-11T23:17:53Z,1,1,1,Fixes a display bug identified over slack.,2,0
620,2022-01-12T00:49:20Z,2022-01-12T03:10:32Z,2022-01-12T03:10:32Z,1,1,1,The test harness was using less gas than forc run.,2,0
622,2022-01-12T14:15:03Z,2022-01-13T01:37:47Z,2022-01-13T01:37:47Z,4,59,31,"I have refactored the formatter a bit, the changes could be separated into 2 parts:


Just added few comments to make it easier for newcomers to go through the code, and better naming of certain functions (now that they serve slightly different purpose)


Since we might have a case where we would like to perform different formatting on different types, I have extracted the formatting of comments into a reusable function, that also takes a closure which will do the rest of the formatting.


one example of this is: #578
The implementer of that issue should only worry about the enum parts and not about the comments possibly contained within it.
so he can solve it like this
custom_format_with_comments(text, &mut move |text, result, current_char, iter| {
    // your formatting logic here
}",3,1
623,2022-01-12T19:29:43Z,2022-01-12T21:44:01Z,2022-01-12T21:44:01Z,4,0,99,"As mentioned per issue [#615 ] removes the example_project directory. I have removed it, then cloned and tested to ensure it still builds correctly (building it, grepping through to see if there were any references. Also ran the test crate and all appears well.
Later commits will introduce some more complete code examples (with tests) to the docs rather than as a stand-alone folder in the repo. If there is some external doc dependency or similar which requires this then I can remove this PR until those are resolved",3,0
626,2022-01-12T21:58:49Z,2022-01-14T21:31:42Z,2022-01-14T21:31:42Z,1,7,1,"Formerly, only ec_recover_address tests were implemented.
This fixes that.
The code being tested is here: FuelLabs/sway-lib-std#18",2,0
627,2022-01-12T22:28:48Z,2022-01-13T00:34:16Z,2022-01-13T00:34:16Z,1,10,3,"This is kind of a funny one. To solve #521, we saved the download to a folder named after its github repo. Well, humorously, that led to tree structures like this (which still worked fine!)
├── core-http:
│   └── github.com
│       └── FuelLabs
│           └── sway-lib-core
│               └── default
│                   └── FuelLabs-sway-lib-core-87138fb
│                       ├── Forc.toml
│                       ├── LICENSE
│                       ├── README.md
│                       └── src
│                           ├── lib.sw
│                           └── ops.sw

This PR changes that to just use a hash, so we know the character set:
├── 7786363458449203048
│   └── default
│       └── FuelLabs-sway-lib-core-87138fb
│           ├── Forc.toml
│           ├── LICENSE
│           ├── README.md
│           └── src
│               ├── lib.sw
│               └── ops.sw",3,0
629,2022-01-13T04:08:48Z,2022-01-13T05:12:39Z,2022-01-13T05:12:39Z,1,1,1,,3,0
630,2022-01-13T10:25:42Z,2022-01-13T19:22:21Z,2022-01-13T19:22:21Z,68,527,397,"Both Span and Ident are fairly ubiquitous in the compiler, from the parser down to asm gen.  It makes sense to use them both in the IR, rather than the IR having its own versions of the same types and translating back and forth.
In that case, we don't want circular dependencies between sway-core and sway-ir so this PR proposes we put them in sway-types where they can both see them.  If/when we put asm gen in its own crate it'll need it too, to avoid depending on sway-core.",3,2
631,2022-01-13T15:07:13Z,2022-01-16T08:08:58Z,2022-01-16T08:08:58Z,2,5,1,"This PR adds the ""organization"" field in the Forc.toml manifest file.
It closes #607.",4,1
637,2022-01-13T20:00:37Z,2022-01-13T21:08:36Z,2022-01-13T21:08:37Z,2,47,187,Closes #585,2,1
639,2022-01-13T21:00:39Z,2022-01-28T17:10:43Z,2022-01-28T17:10:43Z,8,15,12,Closes #444,4,0
640,2022-01-14T04:42:50Z,2022-01-15T03:59:48Z,2022-01-15T03:59:49Z,86,4465,114,"OK, this is the rest of the IR changes.  It's still a WIP to a degree, I'll list why below, but it's close enough that I'd like to merge it in.
Each commit is fairly specialised, it might be easier to review them individually.
Most of the work is in sway-core/src/optimize.rs and in sway-core/src/asm_generation/from_ir.rs.  There are some changes to lib.rs and to forc to allow a new --use-ir flag, for optionally turning compilaion via IR on.  It's obviously false/off by default.
I've changed a couple of ASM gen things too, just to make re-using them easier, same with a couple of error.rs changes.
So, while it should pass the E2E tests (last time I checked, which was actually a day or two ago, so that might not be quite true still...) it still needs a bit of work to be usable:

Spans.  Because I started this before we had the new Spans I just did all the work without them.  Ideally each instruction in the IR would have a span, partly for better errors but mostly for source mapping.
Errors.  Most of the new code just uses a Result<_, String>.  This should use a proper error struct rather than String.
Hairier crypto stuff.  Contract calls are working, but I think they're a little slapdash still.  Predicates and libraries are pretty much untested and there might be other non-script cases which don't work.

I'm PRing this now before I go away partly so I don't have to come back and catch up to master and re-implement everything codegen-wise then.  If this is merged it can pretty much be ignored, as long as it compiles, and to make it compile it's good enough to just put in todo!() stubs if I'm needed to make sense of anything.
Closes #211.",4,1
643,2022-01-14T21:23:14Z,2022-01-14T23:22:48Z,2022-01-14T23:22:48Z,2,9,5,Closes #642,2,1
646,2022-01-15T01:27:24Z,2022-03-24T01:16:43Z,2022-03-24T01:16:44Z,39,1354,309,"This closes #645. This is a WIP currently.
Remaining:

 parse storage accesses
 type check storage accesses
 build out some storage data structures and rules around what works and what doesn't in a storage block (tl;dr: implement mapping)
 correctness tests

This enables storage declarations, accesses, and reassignment via the storage keyword.
Syntax
Storage Declaration
storage {
    <id>: <type>,
    ....
}
Storage Accesses
    ... = storage.<var>;
    ... = storage.<struct_var>;
    ... = storage.<struct_var>.<field>....
Storage Reassignment
    storage.<var> = ...
    storage.<struct_var> = ...
    storage.<struct_var>.<field> = ....
Notes

Each subfield is stored in its own storage slot (i.e. gets its own key). By subfield, I mean the most primitive type of an aggregate, though not all aggregates are fully supported yet. For example for the following storage:

struct T { x: u64, y: b256 } 
struct S { t: T };
storage {
    s: S,    
}

x and y will get their own storage slots.

This only works with IR so the test I added won't pass for now, though I did test it manually.
Functionally, this PR also depends on #976.",4,7
648,2022-01-15T05:18:49Z,2022-01-19T19:26:30Z,2022-01-19T19:26:30Z,2,7,8,Fix a todo introduced in #493,2,0
649,2022-01-15T05:36:50Z,2022-01-19T19:26:39Z,2022-01-19T19:26:39Z,1,1,1,"Fix todo introduced in #493.
I'm not sure if this is the correct fix, but it seems like (re)-assignment is an operator? cc @leviathanbeak",2,0
650,2022-01-15T05:45:00Z,2022-01-15T08:23:54Z,2022-01-15T08:23:54Z,10,61,61,"Change ""Fuel HLL (Name Subject to Change)"" to ""Sway.""",2,0
651,2022-01-15T07:00:40Z,2022-01-18T14:06:16Z,2022-01-18T14:06:17Z,3,124,146,"Fixes #567

Use the rustls-tls feature for reqwest and turn off default features (which would use native OpenSSL).
Use ureq instead of curl.",4,4
654,2022-01-16T20:01:36Z,2022-01-18T14:06:32Z,2022-01-18T14:06:32Z,1,1,0,30 seconds.,2,0
655,2022-01-16T20:13:19Z,2022-01-18T15:42:39Z,2022-01-18T15:42:39Z,9,159,37,"I have added a config struct for formatting to sway-fmt, currently only 2 fields: align_fields & tab_size.
I have updated Language Server to get that info (and any other in the future) from the Client during server initialization and pass it to the formatter.
I have updated forc to also currently use default formatting options.
Future TODOs:

add options to forc fmt command
for forc fmt read the manifest file for formatting options
actually start using align_fields -> should be introduced with #578
implement onConfigChanged so that the SwayConfig within Language Server can get updated as well",5,2
656,2022-01-17T13:15:17Z,2022-01-28T16:31:46Z,2022-01-28T16:31:46Z,13,116,9,Dumps a simple source map to a JSON file,3,5
660,2022-01-18T14:13:57Z,2022-01-18T20:17:06Z,2022-01-18T20:17:06Z,1,3,1,"adds forc abi-json and details about entry in Forc.toml` to the ""A Forc Project"" page, fixing #658 and #659",2,0
661,2022-01-18T20:22:55Z,2022-01-19T00:38:09Z,2022-01-19T00:38:09Z,14,69,40,"Also fuel-vm and fuel-gql-client, downstream dependencies of fuel-tx.",2,0
664,2022-01-19T00:51:01Z,2022-01-19T03:21:09Z,2022-01-19T03:21:09Z,4,6,6,"To avoid polluting publish PRs with unnecessary changes, just set the version of non-published crates to 0.0.0.",2,0
666,2022-01-19T01:04:36Z,2022-01-19T03:20:54Z,2022-01-19T03:20:54Z,1,1,1,"Comment had an annoying typo, but isn't really useful so just removed altogether.",2,0
669,2022-01-19T16:28:36Z,2022-01-19T19:23:33Z,2022-01-19T19:23:33Z,4,16,15,"Changed the name to test-sig-gen-utility for additional clarity on the use of this util.
Added an additional comment on how the fuel address is derived.",3,0
672,2022-01-19T22:21:07Z,2022-01-28T16:32:17Z,2022-01-28T16:32:17Z,2,55,3,"This adds a test for new code PRd here: FuelLabs/sway-lib-std#25
CI will fail until the above PR is merged.",3,1
673,2022-01-19T23:44:04Z,2022-01-20T00:45:45Z,2022-01-20T00:45:45Z,1,6,1,Closes #662,2,0
674,2022-01-20T00:32:26Z,2022-02-12T18:48:47Z,2022-02-12T18:48:47Z,7,428,21,"Close #608
This PR adds the command for spinning up a local server that serves the static files of the Explorer app. These are fetched from the public releases of the Explorer repo and stored in ~/.fuel/explorer/<version> directories
Usage:
forc explorer            # start server
forc explorer -p 9999    # custom port number
forc explorer clean      # delete files from disk
Feel free to add other reviewers",5,5
675,2022-01-20T02:28:59Z,2022-01-22T01:58:19Z,2022-01-22T01:58:19Z,12,77,226,"Fixes #665

 Add a new --contract option for forc run, a list of contract IDs that the transaction will touch.
 Rework forc run to construct a minimal input and output set from the above option, instead of handling it at the manifest file level.
 Remove [[tx-input]] as a thing in the manifest file.
 Remove [[tx-input]] from tests.
 Rework tests to run and pass in the appropriate contract ID(s), instead of hard-coding them in the test manifest files.

Note that this does not remove the need for hard-coding the contract ID in certain tests. That will be left to a future PR, if anything.",3,1
677,2022-01-20T03:42:19Z,,2022-03-24T22:06:31Z,4,182,20,"Format Align: Structs and Enums


Intended to be the default of a configuration that adds greater readability to struct and enum fields by way of adding white-space.


 Add function that returns length of longest field


 Amend length function to handle comments


 Add logic that applies the necessary white-space


 Fix fmt tests",4,3
679,2022-01-20T18:50:08Z,2022-01-24T01:23:51Z,2022-01-24T01:23:51Z,8,101,0,"This adds some tests for the stdlib functions added here: FuelLabs/sway-lib-std#26
As usual, this build will fail until the other PR is merged to the stdlib master branch.",3,0
680,2022-01-21T00:06:06Z,2022-01-21T03:15:51Z,2022-01-21T03:15:51Z,39,1149,925,"The compiler has been getting more and more sluggish due to some poorly scaling decisions I made back in the beginning of this project. Generally, this PR refactors the usage of namespaces as a metaphor for scopes. Previously, cloning namespaces happened to denote a new ""scope"". This is common when writing a compiler in a functional language with a garbage collector for a small language, and is what I learned in compilers class. Well, these namespaces are usually not modified and are cloned a lot, which means exponential memory growth and performance loss.
Overall I tried not to touch codegen since that will be improved with IR anyway -- these changes are almost entirely in the semantic analysis module.
Overview
This PR:

Modifies constant declarations to just be immutable variable declarations, although they remain more or less functionally the same
Introduces an arena which contains all modules and hands out references to those modules. Accessing a module can be done via read_module or write_module, which take a function that modifies or reads a module and the id of that module and handles it accordingly. The general idea is that while cloning namespaces is now much quicker, if you truly need to make a new scope, use create_new_scope instead of cloning the namespace.

Further Work/Drawbacks

Using an RwLock can leave us vulnerable to deadlocks. I would like to refactor this into a concurrent slab or similar, like how @canndrew did to the last RwLock-based refactoring I did. I need to learn a bit more about how to design that, though.
Trait namespaces are still pretty hard to deal with.

Closes #678",3,3
681,2022-01-21T00:06:21Z,2022-02-02T21:42:58Z,2022-02-02T21:42:59Z,24,586,111,Closes #632,3,0
683,2022-01-21T17:04:09Z,2022-01-23T04:47:45Z,2022-01-23T04:47:45Z,58,118,118,"Now that we have a v0.0.1 of lib-core and lib-std, we can pin them in our test suite to avoid having to synchronize PRs.",2,0
686,2022-01-22T18:34:36Z,2022-01-23T16:42:25Z,2022-01-23T16:42:26Z,1,9,14,"This PR fixes a dumb bug where the formatter didn't actually format the code.
It also formats all tests manifests using said formatter.
This closes #671.",3,0
688,2022-01-22T20:39:17Z,2022-01-23T16:42:47Z,2022-01-23T16:42:47Z,10,31,31,"While we could say that technically the removal of [[tx-input]] in #675 was breaking, it was 1) undocumented and 2) only used in this repo, since everyone else used the SDK. So, bump the patch version.",3,0
689,2022-01-22T20:46:25Z,2022-01-23T05:41:02Z,2022-01-23T05:41:02Z,1,2,2,"Depends on #683. If that goes in before, then merge this into #472, otherwise rebase against master.",2,0
690,2022-01-22T21:01:20Z,2022-01-23T05:40:46Z,2022-01-23T05:40:46Z,2,3,3,,2,0
691,2022-01-22T21:14:14Z,2022-01-23T05:41:19Z,2022-01-23T05:41:19Z,1,5,3,,2,0
692,2022-01-22T21:31:08Z,2022-01-23T05:27:58Z,2022-01-23T05:27:58Z,1,20,150,"Remove unmaintained usage documentation, and clean up remaining.",2,0
693,2022-01-23T01:52:10Z,2022-01-23T16:50:48Z,2022-01-23T16:50:48Z,1,6,17,,5,5
696,2022-01-24T11:59:00Z,2022-01-24T23:22:32Z,2022-01-24T23:22:32Z,18,76,88,"Builds on top of now-closed #695, which is closed in favor of this PR.",4,0
697,2022-01-24T17:58:19Z,2022-01-28T17:56:30Z,2022-01-28T17:56:30Z,6,38,9,The tests for this PR: FuelLabs/sway-lib-std#27,3,2
700,2022-01-25T01:33:11Z,2022-01-25T20:51:47Z,2022-01-25T20:51:47Z,1,10,6,Closes #415. Removes the onslaught of expected: unknown due to error messages when you have an unimplemented feature.,2,0
701,2022-01-25T01:45:28Z,2022-03-22T18:34:44Z,2022-03-22T18:34:44Z,37,4318,579,"Closes #581
This PR does two things:

I had to introduce a pretty significant change to the way Expressions are parsed. In order to reliably gather type information for exhaustivity checking, all ""primary expressions"" inside of match expressions must first be named as variables, then that new generated variable name is used within the match expression. The problem is that before this PR, match expressions could not declare variables as they had no access to creating AstNodes. This PR introduces a new type ParseResult that ""bubbles up"" a Vec that is populated by match expressions. Moreover, this change fixes a silent bug where if the value of your match expression was a function with side effects, that function would have been called n number of times for n match arms.
Implement match exhaustivity checking and match arm reachability checking. There is a bit of math involved, but I describe it at a high level in sway-core/src/semantic_analysis/ast_node/expression/usefulness/mod.rs. Let me know if you have questions 😄",5,6
703,2022-01-25T21:18:51Z,2022-01-28T16:52:20Z,2022-01-28T16:52:20Z,1,5,5,"Default Cargo.toml for a new Rust project utilizes old dependencies which have some pretty significant bugs, move the version up to most recent versions of Fuel packages.",3,0
707,2022-01-27T00:09:35Z,2022-01-28T16:53:11Z,2022-01-28T16:53:11Z,1,20,6,"The harness will now check for the existence (but not care about the
value) of two environment variables while running tests:

SWAY_TEST_VERBOSE - this disables silent_mode and prints warnings
and errors to stdout.
SWAY_TEST_USE_IR - this turns on the use_ir flag to run the tests
using the IR pipeline (useful presently until IR becomes the default).

E.g.,
$ cd sway/test
$ SWAY_TEST_VERBOSE=yes cargo r neq
    Finished dev [unoptimized + debuginfo] target(s) in 0.17s
     Running `sway/target/debug/test neq`
 Compiling neq_4_test
  Compiled library ""core"".
  Compiled library ""core"".
warning
 --> FuelLabs-sway-lib-std-5a0938f/src/result.sw:0:5
  |
...
3 |     Ok: T,
  |     -- Enum variant Ok is never constructed.
  |
warning
 --> FuelLabs-sway-lib-std-5a0938f/src/result.sw:0:5
  |
...
4 |     Err: E,
  |     --- Enum variant Err is never constructed.
  |
  Compiled library ""lib-std"" with 2 warnings.
  Compiled script ""neq_4_test"".
  Bytecode size is 108 bytes.
   ABI gen neq_4_test
  Compiled library ""core"".
  Compiled library ""core"".
  Compiled library ""lib-std"" with 2 warnings.
  Compiled script ""neq_4_test"".
_________________________________
Tests passed.
1 tests run (81 skipped)",3,2
708,2022-01-27T01:35:04Z,2022-01-28T16:53:33Z,2022-01-28T16:53:33Z,1,1,0,Fixes #497,3,0
711,2022-01-27T18:32:10Z,2022-01-28T17:31:24Z,2022-01-28T17:31:24Z,13,204,44,"Fixes #653
This patch basically tries to remove the assumption that integer literals are 64 bit wide. This implies the following:

Writing let x:u32 = 5; does not generate a warning.
Writing let x:u8 = 256; generates an error because 256 does not fit in a u8.
I was hoping to completely remove implicit casting between UnsignedIntegers in engine.rs, but there are more complex situations for which resolving the type of literals without the 64-bit assumption is not yet possible. E.g.:

struct Foo<T> {
  a: T,
}

fn main() {
  let foo = Foo { a: 256 };
  let x:u8 = foo.a;
}

Ideally, we would recognize 256 has to be a u8 and error out, but that requires more complex analysis than what I have in this change.",3,2
712,2022-01-27T19:44:07Z,2022-01-28T05:10:44Z,2022-01-28T05:10:44Z,2,64,7,"It appears there was a regression in warning/error formatting where all spans would start from line 0:

This PR fixes that:

I've also removed folding (omission of lines within the annotation) for better readability. The window size is currently two lines before the annotation and two lines after, which I feel is reasonable.",4,2
725,2022-01-31T06:01:36Z,2022-02-03T03:11:55Z,2022-02-03T03:11:55Z,3,4,4,This is a small change to accommodate the (proposed) changes to B512 and ec_recover() in sway-lib-std.,3,0
728,2022-01-31T19:56:44Z,2022-02-02T21:36:20Z,2022-02-02T21:36:20Z,6,27,1,"Fixes #720
A new copy of namespace is required when compiling a new file. Previously, we were adding to the original namespace directly.
Signed-off-by: Mohammad Fawaz mohammadfawaz89@gmail.com",4,0
729,2022-02-01T00:46:27Z,2022-02-03T20:20:49Z,2022-02-03T20:20:49Z,11,69,6,"Closes #589
Supporting self and adding a new error message for when an alias is used with a * import.
I believe we now fully match the Rust syntax.",4,0
731,2022-02-01T19:27:38Z,2022-02-02T21:35:53Z,2022-02-02T21:35:53Z,5,148,111,"First step of #544
No tests or CI in this PR.",3,0
734,2022-02-02T04:14:35Z,2022-02-03T03:11:39Z,2022-02-03T03:11:40Z,15,159,92,"These are some relatively minor fixes for bugs which accrued while I was away.  The E2E tests were failing sometimes when using IR, these changes fix that.
The ec_recover_test still fails with IR but will be resolved when the new B512 code in sway-lib-std is released.
Closes #709",4,1
735,2022-02-02T15:28:34Z,2022-02-04T16:40:37Z,2022-02-04T16:40:38Z,1,44,1,"Tried to explain dep using examples, although actual definition may still be too short as I've only learned what it does via the standard and core libraries, so feel free to suggest any changes!",4,3
736,2022-02-02T22:46:57Z,2022-02-06T18:38:26Z,2022-02-06T18:38:26Z,6,188,22,"Fixes: #716
Basically, I'm calling monomorphize() when resolving a generic type so that the original type doesn't get modified. Also copying the methods of the original type to the new type.",2,0
739,2022-02-03T19:39:01Z,2022-02-03T20:44:53Z,2022-02-03T20:44:53Z,8,62,2,"Closes #727
This is important because one can currently write:
use ::bar::Bar1 as Bar2;
use ::bar::Bar2;
but that, of course, is confusing.",2,0
740,2022-02-03T20:13:49Z,2022-02-03T22:51:20Z,2022-02-03T22:51:20Z,3,5,5,"Recently, fuels-rs, the sub-crate inside fuels-rs the repo was renamed to fuels-contract. This PR makes the necessary renaming so that forc init will generate the right Cargo.toml for the SDK-based tests.
More context on the renaming here: FuelLabs/fuels-rs#66.",2,0
741,2022-02-04T07:15:36Z,2022-02-11T22:14:51Z,2022-02-11T22:14:51Z,7,198,5,"This PR adds inverse source code mapping, i.e. addr2line utility.
It improves the source mapping format by adding paths of downloaded dependencies to it.
Usage example:
$ forc build -p example_project/fuel_project/ -o fp.bin -g fp.map.json
...
  Compiled script ""Fuel example project"".
  Bytecode size is 180 bytes.
$ forc addr2line -s example_project -g fp.map.json -i 6
  --> ""example_project/fuel_project/src/main.sw"":25:14
   |
23 |
24 | fn main() {
25 |   let a = f0(0);
   |              - note: here
26 | }
   |
$ forc addr2line -s example_project -g fp.map.json -i 28 -c 5
  --> ""/home/user/.forc/7786363458449203048/default/FuelLabs-sway-lib-core-87138fb/src/ops.sw"":13:27
   |
 8 |     fn add(self, other: Self) -> Self;
 9 | }
10 |
11 | impl Add for u64 {
12 |     fn add(self, other: Self) -> Self {
13 |         asm(r1: self, r2: other, r3) {
   |                           ----- note: here
14 |             add r3 r2 r1;
15 |             r3: u64
16 |         }
17 |     }
18 | }
   |",3,0
745,2022-02-06T19:45:02Z,2022-02-07T23:49:59Z,2022-02-07T23:49:59Z,10,38,21,,2,0
752,2022-02-07T21:12:19Z,2022-02-11T22:14:14Z,2022-02-11T22:14:14Z,24,501,12,Closes #628,3,1
754,2022-02-08T00:25:44Z,2022-02-08T18:15:30Z,2022-02-08T18:15:30Z,1,8,10,closes #724 by arranging forc.toml fields alphabetically,3,0
756,2022-02-08T03:24:15Z,2022-02-10T22:45:15Z,2022-02-10T22:45:15Z,1,2,1,,3,0
760,2022-02-08T21:57:17Z,2022-02-09T04:37:21Z,2022-02-09T04:37:21Z,9,23,23,,4,5
766,2022-02-10T09:53:39Z,2022-02-15T00:53:48Z,2022-02-15T00:53:48Z,21,359,143,"Closes #544, follows the example set in #731.
This also adds all examples to the Sway workspace so that we can test both projects under CI. Doing so means the Cargo.lock for the workspace requires an update, but I haven't included it yet to reduce noise in the PR. @adlerjohn shall I add the Cargo.lock changes as a final commit in this PR? Or do you generally update the lock file separately?
TODO

 hello_world
 fizzbuzz
 wallet_smart_contract
 Ensure tests are run for examples in CI.
 Ensure forc build is ran for each example in CI.",3,6
768,2022-02-10T15:59:31Z,2022-02-10T20:46:04Z,2022-02-10T20:46:04Z,1,52,0,This will notify an internal slack channel of any failed ci steps in the sway CI pipeline,3,0
773,2022-02-11T14:35:36Z,2022-02-13T23:22:10Z,2022-02-13T23:22:10Z,3,32,3,This PR fixes #684,6,4
774,2022-02-11T21:53:31Z,2022-02-18T14:07:49Z,2022-02-18T14:07:49Z,2,9,2,Close #748,4,1
775,2022-02-12T16:17:22Z,2022-02-12T23:23:00Z,2022-02-12T23:23:00Z,1,8,8,#760 missed bumping the lockfile.,2,0
785,2022-02-13T23:02:04Z,2022-02-14T00:03:05Z,2022-02-14T00:03:05Z,3,11,8,Also make error consistent across subcommands.,4,0
790,2022-02-14T03:20:31Z,2022-02-15T00:41:57Z,2022-02-15T00:41:57Z,1,0,12,"File isn't really being maintained with changing and new directories, and owners are outdated.",2,0
793,2022-02-14T03:41:20Z,2022-02-14T19:00:38Z,2022-02-14T19:00:38Z,2,31,1,Fixes #780,2,0
794,2022-02-14T03:58:47Z,2022-02-14T05:18:34Z,2022-02-14T05:18:34Z,1,0,2,,2,0
796,2022-02-14T12:33:51Z,2022-02-17T00:29:00Z,2022-02-17T00:29:00Z,26,534,449,"Closes #764, #765.
Users can now specify a directory in which all compiler output artifacts
will be placed by forc upon forc build.
When unspecified, --output-directory defaults to <project>/out/.
More specifically, artifacts are placed in <project>/out/<profile>
where the profile subdirectory is in anticipation of support for
multiple different build profiles. Currently ""debug"" is assumed.
TODO

 Add --output-directory flag to forc build and related commands.
 Create output directory if it doesn't exit.
 On forc build write compiled output binary to <project>/out/<profile>/<project-name>.bin
 Add out to sway repo .gitignore.
 Reminder to check related PR #527.
 On forc build write contract ABI JSON to <project>/out/<profile>/<project-name>-abi.json. #764.
 Consider updating forc test to first forc build to make it easier to ensure necessary contract ABI files are available.
 Update examples to check for generated ABI in default output directory.
 On forc init, create .gitignore with out and target.
 Add forc clean that removes out and target.",5,2
797,2022-02-14T21:36:17Z,2022-02-16T16:27:10Z,2022-02-16T16:27:11Z,2,109,6,Fixes #777,6,5
803,2022-02-15T13:23:40Z,2022-02-15T23:12:04Z,2022-02-15T23:12:04Z,1,4,0,Missed this in #766.,2,0
804,2022-02-16T00:48:41Z,2022-03-01T04:13:14Z,2022-03-01T04:13:14Z,5,194,1,"Intended to close #641
we want to include core and std in the list of restricted names, but they are excluded for now to prevent blocking
Disallow whitespace & special chars

 name
 organization
 include restricted names",3,0
807,2022-02-17T05:46:41Z,2022-02-22T23:27:11Z,2022-02-22T23:27:11Z,2,88,64,"Not sure if this will work just yet, but hoping this splits up the
build CI job to execute jobs in parallel, synchronising where
necessary using the <job_id>.needs.<other_job_id> feature.
Hopefully this cuts down on waiting time and makes the results a little
more readible from within the PRs.
Closes #772.",3,6
808,2022-02-17T07:12:55Z,2022-02-22T22:11:40Z,2022-02-22T22:11:40Z,38,1986,786,"This is 95% to where I'd like it to be.  There's #795 and #801 which will change how we work with spans, but they're semi-blocked by the new parser (I don't want to have to do it twice).  If we take the source out of Span as #795 suggests then the metadata can be simplified.
There are a few changes in the IR -> ASM here which are doing a bunch of calculations for memory allocations for aggregates which I'd like to see simplified by addressing #738.
Closes #718.",2,0
809,2022-02-17T13:50:49Z,2022-02-20T12:47:03Z,2022-02-20T12:47:04Z,6,48,69,"This changes the forc explorer tool from using .fuel as its user
directory to follow suit of forc's dependency handling and use .forc
instead.
Path handling for both has also been fixed to theoretically better
support windows (though I haven't tested).
Both are now implemented in terms of the new user_forc_directory
function.
Closes #778.",3,0
812,2022-02-17T19:11:50Z,2022-02-17T22:06:21Z,2022-02-17T22:06:21Z,1,7,11,"It looks like #796 introduced a bug where we would call print_on_failure if a forc build was called on a library, even if compilation was successful. This resulted in compiling the standard library printing this out:
  Aborting due to 0 error.
Error: ""Failed to compile lib-std""

The deduplication of fn compile() code is amazing, though, and I tried my best to preserve that. cc @mitchmindtree could you make sure I am not messing anything up here? I know you did that refactor.",3,0
815,2022-02-18T14:10:00Z,2022-03-10T19:56:04Z,2022-03-10T19:56:05Z,76,1595,589,"Why?
As we don't have any form of destructuring, getting values out of enums is impossible. This hinders our progress in developing the standard library and basic demos -- primarily SwaySwap.
What?
This PR implements if let for enums, although not to complete parity with Rust's pattern matching. Some general fixes around generic types/enums/etc., are included in this PR as well.
List O' Changes

Previously, ​​return​​ statements inside of ​​if​​ expressions were not being type checked correctly. This PR fixes that.
Enum monomorphization was not implemented at all, this PR implements that.
Help text has been reintroduced to type errors.
Implements if let expressions, which compare an enum's tag and conditionally pull out its contents into a variable.
Improved error messages around generics: before


afer

7. Improved dead code detection such that publicly exported enums don't warn that their variants are unused.
8. Allow type annotations for enum instantiations, i.e. `let x = Result::Ok::(5u64)` 
Remaining work

Generic impl blocks and trait interactions are still not there. This PR was big enough as is, so that'll be coming later.
Arbitrary pattern destructuring is not implemented. This version of if let only allows for destructuring the top-level enum. This is okay: if let Result::Ok(val) = foo { .. }, this is not okay: if let Result::Ok(Option::Some(Enum::Variant(x, y, Struct { field, .. } ) ) ) = foo { .. }

closes #817
closes #624",5,3
816,2022-02-19T03:03:49Z,2022-02-23T19:03:11Z,2022-02-23T19:03:12Z,18,1236,188,"Closes #155 and #800
This is basically Chaitin's original graph-coloring based algorithm for register allocation. The new file that I that added, called register_allocator.rs, has all the steps in details. I tried to make the steps and the different pieces of the algorithm as clear as possible. I couldn't really find one source where the full algorithm in details is described. However, my comments should contain the union of what I found in the literature and how it applies to the data structures we have in CodeGen.
With this, the bytecode size typically goes down due to the coalescing phase. The table below shows the bytecode size saving percentages. I noticed that the larger the code, the bigger the savings.



Pipeline
Min
Max
Average




Without IR
0%
56%
17%


With IR
0%
58%
16%



Also, this patch fixes the functional issue described in #800. Loops introduce complexities to liveness analysis due to all the backward jumps, so I suspect something is going wrong with the existing allocator.
Now that I have all the building blocks, I can experiment with other algorithms such as the iterartive one described in https://c9x.me/compile/bib/irc.pdf. The steps are basically the same with minor tweeks and run in an iterative outer loop.
Update: E2E tests with the IR pipeline enabled seem to be okay except for three tests that are currently failing on master and the test that I'm adding here (due to #821).",4,6
818,2022-02-19T17:41:32Z,2022-02-25T22:31:55Z,2022-02-25T22:31:55Z,16,372,37,Closes one of the items here: FuelLabs/swayswap#1,4,18
822,2022-02-22T00:05:43Z,2022-02-28T02:05:13Z,2022-02-28T02:05:13Z,119,128,126,"Currently in the Forc.toml we only specify a single author as opposed to the Cargo.toml that allows for an array of authors.
This PR changes Forc.toml to take an array of authors so it's structured the same as Cargo.toml files.",2,6
826,2022-02-22T05:19:25Z,2022-02-22T20:56:01Z,2022-02-22T20:56:01Z,14,10,147,"While working on #825 I noticed that that the dependency_graph is
unused throughout sway-core. I think the reason why cargo doesn't emit
any warnings about this is that at one point, it was stored in the public
TypeCheckArgument struct, so cargo believes that it is intentionally
being re-exported, however in reality we don't use it anywhere else in
the fuel/sway/forc ecosystem.

Edit: Oh also, It's not clear in the diff, but the source_map.rs file change just removes executable permissions from the file so that the file permissions match the rest of the src. I noticed it had executable permissions for some reason, but I'm quite certain that trying to run ./sway/sway-core/src/source_map.rs directly won't do anything interesting 😂",3,1
828,2022-02-22T22:48:17Z,2022-02-23T23:53:10Z,2022-02-23T23:53:10Z,55,390,261,"Introduce IrError, which at the moment is pretty small and simple, will grow in time.
IR API returns Result<T, IrError> now.
Scrap the module name, which was never actually needed.  Hence a lot of script script { ... } in the tests.
Move the aggregate symbol name management out of the IR library back into sway-core.  The IR doesn't have named fields for structs or enums but for convenience I originally put the symbol table needed during compilation into the IR context.  It's only needed by sway-core/src/optimize.rs so that's where it now lives.

Closes #647.",3,2
835,2022-02-23T23:17:20Z,2022-02-24T23:02:05Z,2022-02-24T23:02:06Z,24,358,366,"My original implementation of traits did not align with Rust. I previously expected the trait and its supertraits to all be implemented in a single impl block. Rust expects that each trait continues to be implemented in its own impl block. If a trait B has a supertrait A, this really means that if B is implemented for a type T, then A has to also be implemented for T.
Two missing things:

There are still some issues around having multiple functions with the same name defined for the same type. That may be through a trait/supertrait relationship or even the same function defined twice for a single trait. I'm openning an issue about that. I think in some cases, this can be resolved with having call paths directly in the code (e.g. #472). Issue opened: #837
This case:

trait A {
    fn f(self) -> u64;
} {
    fn add_f(self, x: u64) -> u64 {
        self.f() + x
    }
}

trait B: A {
    fn g(self) -> u64;
} {
    fn add_g(self, x: u64) -> u64 {
       // Should this function have access to `f()` from `trait A`?        
    }
}
Also closes #767",4,3
836,2022-02-24T01:51:18Z,2022-03-08T00:44:00Z,2022-03-08T00:44:01Z,8,336,19,"This PR allows a user to create a new sway project from an existing template project.
There are three ways a user can create a new project from,
1: FuelLabs example
Currently, I've included 3 examples from FuelLabs that can be used as a starting point for a new sway project, counter sway-swap, and wallet. We might not actually want these to be the 3 examples but I'm including them so we can get an idea for how this option might work. @SilentCicero suggested in #530 that along with the counter example we might also want more complex examples like Uniswap which is why I'm including the sway-swap example for now. I can imagine a Token template would also be useful as well.
Creating a new project using the counter example as a template currently looks like:
forc init --template counter my_sway_project
2: GitHub URL
This allows you to paste a GitHub URL of a sway project. It works with links where the project is at either the root level or a subdirectory within the repository. For example, a project within a subdirectory looks like:
forc init --template https://github.com/JoshuaBatty/fuel_test_project/tree/main/hello_world_test my_sway_project
3: Local Path
Finally, if you would like to use a sway project on your local machine as a template, you can pass in the absolute path into the --template argument, for example:
forc init --template /home/josh/rust/templates/token_example my_sway_project
CLI Help Output
Running forc init --help now displays the following.
Create a new Forc project

USAGE:
    forc init [OPTIONS] <project-name>

FLAGS:
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
    -t, --template <template>    Initialize a new project from a template.
                                 
                                 Option 1: Create a new project using supported examples from FuelLabs
                                 example templates: 
                                  - counter
                                  - wallet
                                  - sway-swap

ARGS:
    <project-name>    The name of your project

Currently, this PR includes the commits of #822. We will need to land that PR first before this can be merged as the Forc.toml parsing expects that there is an authors field.
I'll also add some documentation to the sway book outlining this feature once this PR finally lands.",4,5
843,2022-02-25T19:31:54Z,2022-02-26T04:11:10Z,2022-02-26T04:11:10Z,1,4,3,"closes #842
Also, adding a few safety guards to make sure we don't run into this again. Substracting unsigned integers is dangerous :D",3,0
848,2022-02-26T19:52:45Z,2022-02-27T16:40:49Z,2022-02-27T16:40:49Z,4,48,4,"Simply changing rv to ret and rl to retl as per the specs 
This:
script;

pub fn return_value() -> u64 {
    asm() {
       ret
    }
}

pub fn return_length() -> u64 {
    asm() {
       retl
    }
}

fn main() {
    let x = return_value();
    let y = return_length();
}
now compiles to:
.program:
ji   i4
noop
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
lw   $ds $is 1
add  $$ds $$ds $is
move $r0 $ret                 ; return value from inline asm
move $r0 $retl                ; return value from inline asm
ret  $zero                    ; fn main returns unit
.data:

as expected.",2,3
852,2022-02-28T07:19:09Z,2022-03-02T00:02:06Z,2022-03-02T00:02:07Z,27,446,273,"This mostly addresses the problems with passing E2E via IR with the latest changes to sway-core.  As of this PR they're all passing except funcs_with_generic_types and size_of.  The former of which may be resolved by addressing #827 and the latter I'll work on next.
I found a couple new bugs and added tests for those and the bigger change is the resignation to the fact that the Sway function call paths are too ambiguous for it to be truly modular -- we inline calls, therefore they don't need absolute names -- so the IR will no longer try to compile any functions other than main().  I still strongly believe this needs to change soon, but it will be a pretty big job.
Closes #821.
Closes #840.",4,1
857,2022-03-01T05:00:25Z,2022-03-08T00:50:53Z,2022-03-08T00:50:53Z,2,140,81,"Also fix compiling strings for IR.  Blocked by #852, need that to be merged first since this PR is attached to it.
Closes #717.",5,2
859,2022-03-02T04:24:37Z,2022-03-05T01:56:23Z,2022-03-05T01:56:23Z,57,597,496,"Closes #298
Syntax
Old syntax:
abi Wallet {
    fn send_funds(gas: u64, coins_to_forward: u64, asset_id: b256, req: SendFundsRequest);
}

impl Wallet for Contract {
     fn send_funds(gas_to_forward: u64, coins_to_forward: u64, asset_id: b256, req: SendFundsRequest) {
        ...
    }
}
...
fn main() {
    let contract_address = 0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b;
    let caller = abi(Wallet, contract_address);
    let req = SendFundsRequest {
        amount_to_send: 200,
        recipient_address: 0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b,
    };
    caller.send_funds(10000, 0, ETH_ID, req);
}
New syntax:
abi Wallet {
    fn send_funds(amount_to_send: u64, recipient_address: b256);
}

impl Wallet for Contract {
     fn send_funds(amount_to_send: u64, recipient_address: b256) {
        ...
    }
}
...
fn main() {
    let contract_address = 0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b;
    let caller = abi(Wallet, contract_address);
    
    caller.send_funds{
        gas: 10000, // Can be skipped
        coins: 0, // Can be skipped or set to something other than the default value
        asset_id: ETH_ID // Can be skipped or set to something other than the default value
    } 
    (200, 0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b);
}

There is no need to wrap the user arguments into a struct anymore and any number of arguments can be used.
There is no need to pass () when no arguments are required.
The contract parameters gas, coins, and asset_id are optional and they can be specified in any order. If a parameter is skipped, its default value is used in the CALL instruction. The default values for gas, coins, and asset_id are $cgas, 0, and ETH_ID respectively. ETH_ID is stored as a compiler constant.
When none of the call parameters are set, both of these syntaxes work: caller.send_funs{}(...) or caller.send_funds().
Specifying any of the parameters more than once is a compile error.
Specifying a parameter other than gas, coins, or asset_id is a compile error.

Implementation
The implementation is simple:

On the caller side, gather the contract parameters, assign them to registers, and use them in the CALL instruction as before. Then, create a struct of all user arguments and follow the same flow that is used for user-defined struct.
On the contract side, create a struct type that contains the user arguments and re-use some of the code used for subfields to handle field offsets and so on.
On both sides, no wrapper struct is created if only a single argument is passed.

Testing
All contract tests were failing before this change because the hardcoded contract IDs in the calling scripts were outdated (+ some other minor issues). I updated all the required contract IDs here but there are 2 tests that continue to fail (even on master), namely:

(""context_testing_contract"", ""caller_context_test"")
(""contract_abi_impl"", ""contract_call"")

Editi. Updated the default values for the parameters.
Generated assembly on the caller side in the default case:
lw   $r1 data_7               ; load fn selector for call
lw   $r5 $cgas i0             ; loading $cgas (gas) into abi function
lw   $r4 data_4               ; loading the default coins value for call
lw   $r3 data_5               ; loading the default asset_id value for call
...
data_4 .u64 0x00
data_5 .b256 0x0000000000000000000000000000000000000000000000000000000000000000
call $r0 $r4 $r3 $r5

Generated assembly on the caller side in the non-default case:
lw   $r5 data_3               ; literal instantiation
lw   $r4 data_8               ; literal instantiation
lw   $r3 data_9               ; literal instantiation
...
call $r0 $r4 $r3 $r5          ; call external contract
...
data_3 .u64 0x2710
data_8 .u64 0x32
data_9 .b256 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0",5,6
860,2022-03-02T17:43:06Z,2022-03-03T01:58:28Z,2022-03-03T01:58:28Z,32,185,150,"Intended to close #851
I've gone through and replaced any instance I could find of Result<(), String> with anyhow, along with error messages.",3,2
866,2022-03-03T09:54:08Z,2022-03-04T23:45:38Z,2022-03-04T23:45:38Z,37,620,272,"This adds the ability implement the storage instructions via IR.  They're not exercised at all yet, other than a little IR test, but not all the way to ASM.  Once #646 is done we can do it then.
Closes #856.  Will probably conflict with #857.",3,3
867,2022-03-03T18:28:53Z,2022-03-05T04:08:55Z,2022-03-05T04:08:55Z,2,15,8,In accordance with FuelLabs/fuels-rs#113,4,0
873,2022-03-04T02:10:24Z,2022-03-04T21:09:21Z,2022-03-04T21:09:21Z,1,11,5,"Related PRs #825, #796.
Also moves the forc update section to follow the section related to the lock file and pinning.",2,1
876,2022-03-04T05:52:44Z,2022-03-07T21:44:41Z,2022-03-07T21:44:41Z,150,193,959,"This speeds up the E2E tests quite a bit, as previously many of them
compiled two versions of core (e.g. v0.0.1 as listed in
[dependencies], and master via the std dependency).
Many tests have also had declared dependencies removed where unnecessary
and irrelevant to the test.
I did run into a couple issues:

I was unable to update b512_panic_test, b512_test and
empty_method_initializer as the lo and hi bits fields no longer
appear to be accessible on the b512 type. For now I've left these
pinned to the old versions.
The context_testing_contract test fails with: expected: b256, found:
struct ContractId<b256>. Seems I just had to import ContractId and use it in the abi!

Closes #875.",6,4
877,2022-03-04T13:53:05Z,2022-03-04T18:47:34Z,2022-03-04T18:47:35Z,7,7,7,,2,0
879,2022-03-04T15:45:16Z,2022-03-04T23:14:09Z,2022-03-04T23:14:09Z,2,15,9,"closes #676
Two things:

The change in forc/src/utils/helpers.rs helps display the internal compiler error that was being created but not displayed: Attempted to construct return path error....
The change in sway-core/src/control_flow_analysis/analyze_return_paths.rs avoids the internal error.

For this code:
contract;

abi Foo {
    fn foo(gas_to_forward: u64, coins_to_forward: u64, asset_id_of_coins: b256, storage: ()) -> u64;
}

impl Foo for Contract {
    fn foo(gas_to_forward: u64, coins_to_forward: u64, asset_id_of_coins: b256, storage: ()) -> u64 {

    }
}
we now display the error:
 7 |   impl Foo for Contract {
 8 |       fn foo(gas_to_forward: u64, coins_to_forward: u64, asset_id_of_coins: b256, storage: ()) -> u64 {
   |  _____^
 9 | | 
10 | |     }
   | |_____^ This path must return a value of type ""u64"" from function ""foo"", but it does not.
11 |   }
   |
  Aborting due to 1 error.

instead of panicking.",2,0
880,2022-03-04T17:43:02Z,2022-03-14T23:08:05Z,2022-03-14T23:08:06Z,19,420,140,"Adding a getting started guide
Added getting started guide part 2 in Typescript and Rust
Moved some stuff to a Reference section",3,5
886,2022-03-06T03:21:33Z,2022-03-06T04:55:23Z,2022-03-06T04:55:23Z,9,67,29,"Dependencies

fuel-asm to 0.2
fuel-crypto to 0.3
fuel-gql-client to 0.4
fuel-tx to 0.6
fuel-vm to 0.5

CI

fuel-core to 0.4.1",2,1
888,2022-03-06T22:35:30Z,2022-03-07T01:11:49Z,2022-03-07T01:11:49Z,3,21,48,Update for new syntax introduced in #859,3,0
889,2022-03-07T01:32:53Z,2022-03-13T21:25:35Z,2022-03-13T21:25:35Z,1,14,0,,3,0
894,2022-03-07T17:21:36Z,2022-03-07T18:58:36Z,2022-03-07T18:58:36Z,1,43,13,"Closes #892
The existing behavior impacts the liveness analysis phase of the register allocator and make it seem like the problematic register is alive since the start of the program.",2,0
899,2022-03-08T00:21:45Z,2022-03-08T22:40:41Z,2022-03-08T22:40:41Z,2,35,0,"Question, @adlerjohn do we want to embed the autocompletions gif at the end of that section? Or would we prefer to keep the sway book text only?",3,5
901,2022-03-08T06:15:08Z,2022-03-08T22:30:36Z,2022-03-08T22:30:36Z,26,429,368,"This makes a start on #863 by refactoring the ""package"" handling code
into a forc-pkg crate. This new crate is solely responsible for
building, fetching, locking and updating of forc packages.
forc-pkg pulls in around 170 dependencies altogether, as opposed to
forc's current ~460. This should be useful for downstream crates that
may want to depend on forc without all the bloat of the CLI tooling,
explorer, etc. The sway-lsp crate comes to mind.
To achieve this, some of forc's utility functionality has been moved
into forc-util so that it may be shared between forc-pkg and forc
itself.",3,0
902,2022-03-08T07:23:16Z,2022-03-08T11:47:46Z,2022-03-08T11:47:46Z,30,9,9,"Closes #891
Stands for the ""sway lumpy space princess""",3,0
907,2022-03-08T21:51:49Z,2022-03-09T02:45:10Z,2022-03-09T02:45:11Z,7,90,13,Closes #904,3,0
909,2022-03-09T08:14:57Z,2022-03-23T23:28:24Z,2022-03-23T23:28:24Z,34,1890,1171,"When building a new IR context one can now call .verify() and it'll essentially lint it.
There are a bunch of new verification errors which are mostly fairly terse and could be made richer in the future.  Also, the reporting of these errors can be improved by providing a string with the offending value, much like the spans in core.  This isn't the highest priority right now though.
I found a day week or two's worth of bugs which also needed to be fixed, mostly around type mismatches.
And then I implemented if let for IR, which involved updating how structs are handled and local symbol shadowing and also needed an integer cmp instruction in IR to compare tags.",3,4
911,2022-03-09T16:03:17Z,2022-03-10T01:35:06Z,2022-03-10T01:35:06Z,7,151,10,"My change in https://github.com/FuelLabs/sway/pull/907/files was too aggressive. Reverting parts of it and improving test coverage.
Closes #910",2,0
913,2022-03-09T17:58:54Z,2022-03-25T06:07:47Z,2022-03-25T06:07:48Z,62,3171,1670,"Closes #827
Closes #814
Closes #929
Closes #1022
Closes #425

Also:

implement PartialEq for a large portion of the types in the compiler. I had to do this for an approach I was taking to solve a bug, but then it didn't end up being necessary in the end. I feel that the PartialEq impls are still useful though, so I left them in there.

Note:

It turns out that it was necessary to require generic params after the impl. This is so that the compiler is able to handle complex cases like:

struct Data<T, F> {
  first: T,
  second: F
}

impl<T, F> Data<Data<F, F>, Data<T, T>> {
  ...
}",3,3
914,2022-03-09T22:46:36Z,,2022-03-09T23:56:31Z,2,7,7,,3,1
917,2022-03-10T01:03:29Z,2022-03-10T09:31:28Z,2022-03-10T09:31:28Z,1,46,17,This closes #915 by implementing the solution mentioned there.,5,4
918,2022-03-10T03:19:50Z,2022-03-12T00:42:24Z,2022-03-12T00:42:24Z,3,19,4,"closes #694
Uses toml::de::Deserializer to create a new deserializer, which can then be passed to serde_ignored to find out which keys aren't being used and prints a warning if any are found.",4,0
921,2022-03-10T14:24:03Z,2022-03-10T17:43:48Z,2022-03-10T17:43:48Z,12,43,43,Includes #917,3,0
922,2022-03-10T19:53:03Z,2022-03-22T18:53:15Z,2022-03-22T18:53:16Z,12,44,44,"Depends on

 #624
 #308
 #814 (optional)",2,1
942,2022-03-14T17:13:34Z,2022-03-16T00:30:48Z,2022-03-16T00:30:48Z,1,15,4,"Closes #925
This updates the validate method to check that the path from the manifest entry field exists.",4,0
943,2022-03-14T19:53:17Z,2022-03-16T01:34:34Z,2022-03-16T01:34:34Z,38,895,266,"I've decided to split the storage access work in multiple PRs.
I do have most of the work done for the full flow, but the change is too big to review effectively. This first PR handles IR and IR -> ASM.
Changes in the IR

Modified the get_ptr instruction to also take a pointer type and an offset: get_ptr <base_ptr>, <ptr_ty>, <offset>. The instruction now convertsbase_ptr to ptr_ty and then offsets the result by offset. The unit of offset here is basically the size of ptr_ty. So, if ptr_ty is ptr u64 and offset is 5, then we basically have to add 5*sizeof(ptr_ty) to base_ptr.
Removed ptr_cast for now as its functionality can now be accomplished using get_ptr.
Replaced state_load and state_store with 4 instructions:

state_load_word <key>: returns a word (u64) from the storage location key. key has to be a b256.
state_load_quad_word <val>, <key>: reads 4 words (b256) from storage location key into val where val is a pointer to a b256.
state_store_word <val>, <key>: stores val to storage location key. val has to be a u64.
state_store_quad_word <val>, <key>: stores 4 words pointed to by val to storage location key.


Modified the parser to handle contracts and function selectors

Changes in IR -> ASM

Basically supporting the 4 new IR instructions above and the new syntax for get_ptr.

Notes

The IR generator is expected to break each storage access into a list of state_load_*/state_store_*.
The ASM generator will need some additional updates to support the new get_ptr arguments, especially load and store, but for now, the new arguments are only exercised for state_load_* and state_store_*.",2,0
945,2022-03-15T00:32:00Z,2022-03-16T23:16:27Z,2022-03-16T23:16:27Z,2,20,10,"Closes #932
I've updated the find_manifest_dir function to be dynamic, so that we can find either a Forc.toml or Cargo.toml, then used that function to check for a Cargo.toml and if one is not found, emit a non-error warning message that without one cargo clean will be bypassed.",3,1
957,2022-03-17T04:31:30Z,2022-03-23T03:35:22Z,2022-03-23T03:35:22Z,11,41,36,"Closes #955
I've moved the functions dealing with finding manifest files from sway_util to forc_util and updated the corresponding use and imports of said functions.",4,0
959,2022-03-17T20:23:53Z,2022-03-18T00:37:58Z,2022-03-18T00:37:58Z,13,539,51,"Part 2 of the storage change.
This PR does two things;

Creates the necessary data structures for accessing or reassigning a storage field. For now, this only covers storage fields that are of primitive types or some nested struct type.
Uses the data structures above to emit IR.
I don't have tests here but I spot tested this. Sway -> IR tests will be added once the full changes are in.

Credit to @sezna for starting this work in #646. Many pieces of this code were borrowed from that PR.",3,0
960,2022-03-17T21:04:37Z,2022-03-18T15:56:47Z,2022-03-18T15:56:47Z,9,131,0,"All in the title.

adds a new e2e test in the sway repo.
adds a new Control Flow section in the sway book.

closes #749",2,1
961,2022-03-18T17:33:05Z,2022-03-19T03:59:30Z,2022-03-19T03:59:30Z,1,2,2,"I am working on  #308, and I'm noticing that when a lot of errors are generated, they can be very difficult to visually differentiate.

This PR adds (somewhat primitive) visual boundaries between the errors/warnings:

I don't know if this is the best way of doing this, and I'm open to feedback and/or using an alternate separator. But I do think this improves the UX a bit.",5,3
962,2022-03-18T18:52:15Z,2022-03-20T03:32:00Z,2022-03-20T03:32:00Z,4,109,0,"It's all in the title. I pulled inspiration from the fuel-core Contributing.md file.
close #940",3,0
964,2022-03-18T20:52:14Z,2022-03-22T01:23:05Z,2022-03-22T01:23:06Z,16,397,42,"This should unblock the final hard blocker for swayswap.
What does this do?
In Rust, if a branch aborts control flow, then its return type doesn't matter. Here is an example.
We want this behavior so we can implement .unwrap() -- panicking if there is no value present in an Option requires that we don't type check the else branch in case of a deterministic abort.
How does this do?
This PR introduces a .deterministically_aborts() method on AST nodes, expressions, and code blocks which returns a true if, in its control flow, there is a RVRT, RET, or return that is impossible to avoid. We then special case some type checking in branched code around that, as well as take it into consideration when type checking expressions against their annotations.
Other things
While implementing this, I found a bug in return statement type checking -- we were not type checking returns that are on the RHS of a variable declaration. For example, the below compiles when it should not.
fn main() -> u64 {
  let x = return true;
}
This PR includes a fix for that.
Closes #308",3,1
965,2022-03-18T23:02:35Z,2022-03-20T01:32:53Z,2022-03-20T01:32:53Z,520,295,175,"This is an attempt to better organize our e2e tests.

There are a lot of changes, but they are all either just moving or renaming things.
I had to update all the file paths for tests and contracts in mod.rs, which adds visual clutter.
the language folder could be further sub-divided as well if that would be helpful.

As we move towards refactoring the test harness/driver, this could be improved upon. I think this also sets us up for merging the sway-lib-std tests with the sway repo tests, as it distinguishes between language tests and stdlib tests already.
Here's the gist of the directory layout:
└── test_programs
    ├── should_fail
    └── should_pass
        ├── language
        ├── require_contract_deployment
        ├── stdlib
        ├── test_abis
        └── test_contracts

close #460",3,2
966,2022-03-19T02:37:30Z,2022-03-19T14:16:24Z,2022-03-19T14:16:24Z,1,173,73,Missed in a previous PR,4,0
969,2022-03-19T21:07:29Z,2022-03-20T03:51:21Z,2022-03-20T03:51:21Z,2,39,0,"As always if my language doesn't match docs style or code examples aren't in depth enough lmk. The mention of the core library Ord isn't implemented yet but planning on getting to it, the examples don't focus on implementing other things but showing how you would, so if they need to be expanded into more real world examples I can do that
Closes #753 and #854",2,2
971,2022-03-20T06:55:56Z,2022-03-21T00:12:40Z,2022-03-21T00:12:40Z,11,69,27,Closes #968.,4,0
973,2022-03-20T07:44:09Z,2022-03-20T13:47:35Z,2022-03-20T13:47:35Z,1,1,2,"Remove core as a dependency since 100% (rounded) of users will not use core directly.
Use https instead of http.",3,0
974,2022-03-20T16:30:57Z,2022-03-21T01:31:21Z,2022-03-21T01:31:21Z,1,5,5,,2,0
975,2022-03-20T16:32:10Z,2022-03-21T01:31:32Z,2022-03-21T01:31:32Z,1,1,2,,2,0
976,2022-03-20T22:20:27Z,2022-03-23T03:09:30Z,2022-03-23T03:09:30Z,20,1274,260,"This change basically enables contract calls for IR. Main changes

Introduce a new IR instruction contract_call to call a contract. E.g.:
v12 = contract_call get_b256<42123b96>{addr: v8, coins: v9, asset_id: v10, gas:v11}(v7)

note the selector ID, contract address, coins, asset_id, gas, and then the user arguments.


Handle asm generation for contract method arguments on both the caller side and the callee side.

I tested the contract tests manually with --use-ir and they seemed okay.",3,5
978,2022-03-21T00:11:48Z,2022-03-28T06:35:17Z,2022-03-28T06:35:17Z,3,76,20,"Closes #952.
This should be complete for the most part, though depends on implementing #977 first.
Edit: Testing this nicely is blocked on #1016, so I'm addressing that issue first.",3,0
980,2022-03-21T20:19:57Z,2022-03-25T18:00:19Z,2022-03-25T18:00:19Z,31,293,205,,2,0
986,2022-03-22T01:50:48Z,2022-03-22T03:07:27Z,2022-03-22T03:07:27Z,4,350,31,"Adds functionality for testing the language server. This allows us to emulate the communication between a client (VScode for example) and the server. So far basic communication and document open/close/change are working as expected.
I will write tests against each current capability and open individual PR's for them after we land this.
Hopefully, now that tests are part of CI it should help keep the langauge server up to date as the sway language develops.",2,0
989,2022-03-22T14:14:52Z,2022-03-22T16:22:54Z,2022-03-22T16:22:54Z,5,6,6,,2,0
990,2022-03-22T15:39:14Z,2022-03-22T17:01:01Z,2022-03-22T17:01:02Z,4,0,65,closes #988,3,0
1001,2022-03-23T02:37:32Z,2022-03-23T12:56:27Z,2022-03-23T12:56:27Z,1,1,1,,2,0
1002,2022-03-23T05:07:52Z,2022-03-23T23:36:03Z,2022-03-23T23:36:03Z,50,367,201,"Closes #977 - see that issue for motivation. Unblocks #978.
A new should_pass/forc/dependency_package_field test has been added that tests the functionality.
All tests that depend on std and are pinned to a sway-lib-std commit older than FuelLabs/sway-lib-std@385c457 have been updated to the latest commit.",3,1
1020,2022-03-24T13:54:20Z,2022-03-25T00:37:51Z,2022-03-25T00:37:51Z,22,282,319,"Closes #1015 and parts of #1003

Added two more fields to the contract_callinstruction:

A return type to be used by the verifier
A contract name which is not really used but helps when reading the IR


Changed lw from $cgas and other special registers to a move, for both codegens. Now, the gas parameters don't need to be set in every test. Updated some tests accordingly.
The new storage tests storage_accesses passes with --use-ir again (and doesn't need the gas parameter to be set for any call)",4,2
1021,2022-03-24T16:18:53Z,2022-03-24T21:54:52Z,2022-03-24T21:54:53Z,3,3,17,Fixes #993,2,0
1023,2022-03-24T16:44:54Z,2022-03-25T04:06:17Z,2022-03-25T04:06:17Z,4,51,3,Fixes #1018,2,0
1027,2022-03-25T18:35:30Z,2022-03-25T23:40:49Z,2022-03-25T23:40:49Z,12,45,45,,2,0
1029,2022-03-26T02:40:42Z,2022-03-26T18:52:17Z,2022-03-26T18:52:17Z,23,94,139,,2,0
1031,2022-03-26T22:36:20Z,2022-03-28T15:15:46Z,2022-03-28T15:15:46Z,1,2,1,"I think fuels-signers needs to be there as most SDK tests need it for all the test_helpers stuff.
Making master the default branch for sway-lib-std.
Updating the SDK version. The version will likely have to change though.

Marking this PR as a draft for now since I'm having issues with working with forc 0.8 and fuels-rs 0.7.1.",2,0
1032,2022-03-26T23:25:15Z,2022-03-27T05:12:46Z,2022-03-27T05:12:47Z,1,6,0,I got some heavy errors when trying to install forc from cargo on nightly. We should ensure developers know to use stable for now.,2,0
1034,2022-03-27T02:20:14Z,2022-03-27T04:21:23Z,2022-03-27T04:21:23Z,11,107,92,"A couple of E2E tests were failing again.  The new RETD behaviour needed to be ported across.  Also, the IR->ASM was performing an optimisation which turned out to be buggy (causing a couple of E2E failures).
It would decide at ASMgen whether a local would be stored on the stack or in a register, but it wasn't quite working all the time.  This is something that should be done by an IR pass anyway -- e.g., llvm -mem2reg.
By maximising stack use it changed a bunch of the tests, but also requires a extra registers for some code to manage the stack.  The fix_opcode_bug already uses a tonne of registers and using more tipped the code into using $r30 which happens to be the reserved 'data section start' register.
There are 64 registers.  The first 16 are reserved by the VM.  The general purpose registers start at register 16, or $r0. The compiler may want to reserve some too, so it uses the last registers.   It makes sense then that the 'data section start' reserved register would be the last register, register 63, or $r47.  But a bug in the implementation made it register 46 / $r30.",3,0
1036,2022-03-27T04:11:07Z,2022-03-27T05:11:09Z,2022-03-27T05:11:10Z,6,32,2,Closes #1035.,3,0
1037,2022-03-27T17:23:30Z,2022-03-27T20:47:00Z,2022-03-27T20:47:00Z,10,424,202,,2,2
1041,2022-03-28T00:29:40Z,2022-03-28T19:19:19Z,2022-03-28T19:19:19Z,6,49,1,"Not sure how this was not caught until now, but I clearly need to relearn my basic boolean algebra.",3,2
1043,2022-03-28T01:27:03Z,2022-03-28T20:59:21Z,2022-03-28T20:59:21Z,12,45,45,"Requires

 #1041
 #1037 (breaking)
 #1044",2,0
1044,2022-03-28T01:28:52Z,2022-03-28T20:01:55Z,2022-03-28T20:01:55Z,1,1,1,https://github.com/FuelLabs/fuel-core/releases/tag/v0.5.0,2,0
1045,2022-03-28T02:35:34Z,2022-03-28T04:05:13Z,2022-03-28T04:05:13Z,74,466,321,"Previously, we initialised the temporary git repository with a clone operation. By default, this only fetches a subset of git references, meaning that using references other than those provided by default with clone failed to resolve.
Inspired by cargo, this commit updates the behaviour to instead first initialise the repository, then attempt to fetch only those references that are relevant to the user specified git reference.
In order to construct an accurate set of refspecs and fetch only the relevant commits, its useful to retain knowledge about the kind of git reference. This introduces a new GitReference type and updates the git source lock file serialization to account for this.
The lock files of all examples and tests have been updated for the new approach to serializing the pinned git sources.
Closes #1019
Closes #1016
Unblocks #978",2,1
1046,2022-03-28T02:38:46Z,2022-04-05T05:32:19Z,2022-04-05T05:32:20Z,4,3,18,closes #1042,5,5
1047,2022-03-28T03:37:30Z,2022-04-12T08:02:34Z,2022-04-12T08:02:34Z,25,1571,1,"Closes #883

Moved content from the README.md within /forc under a new Forc section within the book, under the relevant command page. For example, the forc deploy example is copied into the deploy page
Also added in other commands when running forc --help along with their help details

May not be the ideal section number to place the changes in since there were new updates to the book since i commented on the issue, not sure if it should be moved somewhere later in the book, or if the section itself is too long and should be trimmed. Let me know if changes are needed
EDIT:
Agreed to extend this PR with the following action items:

 a script that runs all forc commands and generates markdown documentation for each command, containing their names, descriptions, args, options
 fetch examples for individual commands (if any) from examples and include them in the command doc
 integrate mdbook build into the CI",3,4
1051,2022-03-28T06:01:08Z,2022-03-28T22:46:46Z,2022-03-28T22:46:46Z,2,12,6,"Addressing 2 TODOs left by Elvis, @leviathanbeak was there a reason why you posed these TODOs as questions?",3,0
1052,2022-03-28T07:35:18Z,2022-03-29T01:30:23Z,2022-03-29T01:30:24Z,247,3584,326,"OK! After wading through a long list of blockers I think we might be ready to try and land this :)

As discussed in #830, this PR merges the sway core and std libraries into the sway repository.
This doesn't yet address #330, but is one of the final steps towards doing so.
Examples and tests have been updated to depend on core and std via path. This should be useful for ensuring that any changes to either core or std are accounted for in the E2E tests, while also ensuring that any changes to sway-core or forc are accounted for in core and std under CI.
I've added two more dedicated CI jobs for building sway-lib-core and sway-lib-std so that it should be clear by glancing at a PR if either of those are the cause of CI failure.
At the very least I'll wait to get ⛔ or ✔️  from @adlerjohn and @nfurfaro as both have pending PRs at sway-lib-std, but I've also requested reviews from most folk who touch each of these repos regularly in case anyone else has feedback too!
Closes #830
History-preserving merge
Rather than copying across the contents of the directories, I've attempted to preserve our history from the sway-lib-core and sway-lib-std repos by git mergeing both into this repository.
To do so, I used the following approach for both:
$ git remote add fuellabs/sway-lib-core git@github.com:FuelLabs/sway-lib-core.git
$ git fetch fuellabs/sway-lib-core
$ git merge fuellabs/sway-lib-core/master --allow-unrelated-histories
# Resolve conflicts

Conflicts were only related to README.md, .gitignore and ci.yml, but otherwise went smoothly.
How does std depend on core?
One issue I noticed when beginning to merge in std is that to ensure std and core are synchronised under each commit, std needs to depend on core via path as there is of course no way to depend on a library via a commit that doesn't exist yet.
I thought std's use of path for the core dependency might cause issues for projects that would depend on std remotely via git. However it turns out that forc can handle path in dependencies of dependencies without issue as long as the dependency's path declaration is relative and points to a location within the same git repository.
Intuitively I think this behaviour makes sense and I'm yet to think of a good case against it. That said, I think it should be clearly documented and enforced by forc with friendlier errors in a follow-up PR.
Existing sway-lib-std PRs
cc @adlerjohn @nfurfaro I see that there are a few PRs remaining at sway-lib-std. Would you like to land those first? Or are you happy to rebase that work onto this repo after this lands? It would be nice if we could avoid too many merge conflicts, but I can manage it fine if you're worried about rebasing the existing work.
Follow-up

 Migrate the ./sway-lib-std/tests into the E2E stdlib directory and get them all working. #1058
 Migrate the sway-lib-core and sway-lib-std issues and PRs to this repo. #1059",11,8
1054,2022-03-28T17:13:13Z,,2022-04-23T04:30:07Z,2,150,2,"Closes #726

 handles collections
 handles nested collections
 special formatting for large array lengths
 implement max-width for code lines
 add tests to ./sway-fmt/test",4,2
1088,2022-03-29T06:17:50Z,2022-03-29T12:49:39Z,2022-03-29T12:49:39Z,12,45,45,"v0.9.0 had a broken standard library so the release never published. The broken code was fixed in #1052 though, so just tagging a new release should work.",4,0
1089,2022-03-29T07:00:06Z,2022-03-29T14:33:22Z,2022-03-29T14:33:22Z,7,42,7,Closes #1030,3,0
1092,2022-03-29T07:26:01Z,2022-03-30T01:46:48Z,2022-03-30T01:46:48Z,9,78,39,"While finishing up Swayswap, @mohammadfawaz noticed that our existing ge/le/neq implementations were broken. This fixes that using supertraits, which didn't exist at the time of writing those functions. Additionally, this fixes a small bug in supertraits. Previously, supertraits were not adding the methods from the supertraits that were relied upon.
This only fixes the interface surface part of that issue, but not the methods part as it would take more substantial work. I've filed #1091 to track that.",2,0
1093,2022-03-29T13:37:43Z,2022-03-29T22:12:30Z,2022-03-29T22:12:30Z,1,1,1,Fixes #1086,2,0
1094,2022-03-29T13:41:19Z,2022-03-30T01:00:10Z,2022-03-30T01:00:10Z,7,9,10,,2,0
1095,2022-03-29T14:43:16Z,2022-03-29T16:27:20Z,2022-03-29T16:27:20Z,1,23,0,"This is a bash script that @simonr0204 wrote to simplify building multiple test projects and dependencies.
Ref: (Old PR in sway-lib-std repo) FuelLabs/sway-lib-std#100",2,0
1096,2022-03-29T16:49:38Z,2022-03-29T18:11:42Z,2022-03-29T18:11:42Z,21,231,3,"This adds the lock files for each test project in sway-lib-std, otherwise, the first PR to add tests to the std lib will need to contain these unrelated changes.


also adds an empty [workspace] the  sway-lib-std/tests/cargo.toml to resolve error when running sway/build.sh.",2,0
1097,2022-03-29T18:43:15Z,2022-03-30T17:18:06Z,2022-03-30T17:18:06Z,5,281,87,,3,4
1100,2022-03-30T03:13:41Z,2022-03-30T04:52:47Z,2022-03-30T04:52:47Z,3,40,4,"NOTE: This PR is based against @nfurfaro's branch at #1097 - not master. I'm happy to see either #1097 land first or for this to get merged into the work at #1097.
This gets some CI testing happening for the sway-lib-std tests pending further discussion on consolidation of the sway-lib-std tests and the rest of the E2E tests. #1058
This PR

Moves the build script for lib-std tests to sway-lib-std subdirectory.
Adds a CI job for sway-lib-std tests.
Fix sway-lib-std tests README for build script move and --no-capture -> --nocapture flag.

cc @nfurfaro",3,2
1105,2022-03-30T05:36:56Z,2022-04-04T22:56:39Z,2022-04-04T22:56:40Z,87,282,409,"Closes #526 -- Initially reused the logic found in forc_deploy & forc_run to throw an error instead of an empty abi [] if the wrong program type was found.
Closes #1106 -- Replaced the CliError struct with anyhow::Error.
Closes #1117 -- Separated the tests in vec positive_project_names in e2e_vm_tests::mod into ...no_abi, ...with_abi, removed the json.oracle files and updated the surrounding functions to handle the aforementioned changes.
I've also converted the reused logic in forc_abi_json, forc_deploy & forc_run into a single function called check_program_type. To avoid circular dependency, I've moved it and its associated functions out of utils::cli_error and into forc_pkg::pkg since we decided to implement program_type as a method on manifest::Manifest. This helps by removing duplicate code which is being tracked here: #1107 .",6,6
1110,2022-03-30T06:42:12Z,2022-03-30T08:07:46Z,2022-03-30T08:07:46Z,9,54,7,Closes #949,2,0
1112,2022-03-30T08:06:20Z,2022-04-01T04:28:56Z,2022-04-01T04:28:56Z,1,38,18,"Closes #60
Closes #1111",4,0
1113,2022-03-30T08:18:31Z,2022-03-31T00:01:55Z,2022-03-31T00:01:55Z,19,303,106,"This was one of the final tasks on my list and now we're yet again passing E2E with IR.
I've decided to just represent strings as Vec<u8> in the IR, there's no point in trying to get tricky with UTF-8 support.  UTF-8 strings will still 'work', but in IR they're serialised with escaped hex representation.
I also updated the serialiser so it doesn't write out constants which are re-used more than once.  And I changed the syntax for unions to be less ambiguous.",2,1
1114,2022-03-30T17:50:09Z,2022-03-30T19:39:14Z,2022-03-30T19:39:14Z,1,2,0,Added a small explanation for subcurrency.,2,0
1115,2022-03-30T18:48:48Z,2022-04-02T03:14:58Z,2022-04-02T03:14:58Z,22,483,0,"This PR:

adds a new module reentrancy.sw
exposes is_reentrant() & reentrancy_guard() functions
moves helper functions to call_frames.sw
adds better documentation for const values
adds tests

PR discussion history: FuelLabs/sway-lib-std#34",3,5
1121,2022-03-31T10:16:42Z,2022-04-02T01:31:42Z,2022-04-02T01:31:43Z,16,322,145,"Returns false for copy types (unit, bool, byte, uint), true otherwise.
This is a temporary measure to assist in getting the stdlib richer now, i.e., to make decisions regarding ASM block instructions based on generic types, but isn't reliable once we have optimisations which could invalidate compile time assertions like this.  A 'reference type' may not always be used by reference if optimisations allow a value to be passed by value.
is_reference_type::<T>() closely resembles size_of::<T>() in both syntax and semantics and so I've combined them into a builtin 'type property' expression and split the size_of_value(expr) expression
into its own thing.
Closes #1119.
Closes #1120.",3,1
1130,2022-04-03T11:07:18Z,2022-04-04T13:31:45Z,2022-04-04T13:31:45Z,17,457,278,"This makes the IR pipeline the default.  The tests are all passing (for me) or to be more accurate, the should_pass and should_fail tests are passing, and the contract tests are either passing or panickng in the same manner as the original codegen.

 The lib-std test is failing.  Might be to do with contract calls via the SDK?
 The array OOB test is not giving a proper span for the error.
 Need to check that the errors and warnings for the passing tests all match too.

Closes #847.",4,4
1132,2022-04-03T16:20:03Z,2022-04-03T17:33:45Z,2022-04-03T17:33:45Z,7,28,29,,2,0
1134,2022-04-03T19:43:34Z,2022-04-04T01:14:30Z,2022-04-04T01:14:30Z,1,101,0,This lays out some basic call system information for Sway and Fuel.,3,1
1137,2022-04-04T03:34:03Z,2022-04-06T22:49:00Z,2022-04-06T22:49:00Z,137,637,111,"While loading a Manifest with the from_file constructor, we check for dependencies declared with either std or core packages.
If neither core or std exist, we add their associated git dependencies pointing to this sway repo at the tag equal to forc's current semver version. This way, the implicit core and std deps are pinned alongside the version of forc that fetches them, guaranteeing that the manifests are compatible and that the core and std versions are compatible with eachother.
If both core and std are supplied by the user, or if only one of either core or std are provided by the user, then we don't implicitly include either. This is because in the case that only either core or std are provided, we cannot guarantee that an implicitly included core or std would be compatible with the user-specified one.
Closes #330
Sway repo examples/tests
It's best we leave the examples and test suite with the explicit path dependencies in order to ensure that they remain tested against the current state of forc rather than the latest tagged commit. This will also avoid running into CI issues during the PRs where forc's version is updated but the tag hasn't yet been pushed.
This also adds a core dependency declaration to all tests that otherwise contained an empty [dependencies] table. By overriding either the core or std dependency manually, we disable the implicit inclusion of the std dependency.
TODO

 Pass forc semver version through to Manifest::from_file constructor in order to set tag for core and std git dependencies.
 Ensure build plan validation works with implicit core/std.",4,4
1139,2022-04-04T14:20:43Z,2022-04-06T16:13:30Z,2022-04-06T16:13:30Z,6,21,5,,3,0
1141,2022-04-04T14:29:50Z,2022-04-05T01:53:24Z,2022-04-05T01:53:24Z,34,56,207,"Updating contract IDs where needed
Enabling storage_accesses tests.
Disabling one broken test (contract_abi_impl).
Disabling broken parts of one test (context_testing_contract).
Some cleanup.",3,1
1142,2022-04-04T15:50:01Z,2022-04-04T17:55:34Z,2022-04-04T17:55:34Z,1,1,1,,2,0
1144,2022-04-04T21:04:55Z,2022-04-06T16:02:32Z,2022-04-06T16:02:32Z,2,4,2,Closes #1126,3,1
1148,2022-04-05T05:22:01Z,2022-04-07T02:44:34Z,2022-04-07T02:44:35Z,9,92,23,"This enables a flag to be set when developing and debugging the sway-lsp server. See issue #1123 for more context, but essentially it visually shows the successfully parsed tokens in VSCode. This allows for quickly scanning a bunch of sway files to see what tokens are being ignored by our current implementation of the sway-lsp parser. See the below image for how this looks in the editor when enabled. For example, In the image below we can see that the entire impl block is being ignored.

closes #1123",4,3
1149,2022-04-05T11:46:17Z,2022-04-05T22:03:56Z,2022-04-05T22:03:56Z,2,22,17,"This improves performance a fair bit as it was doing an O(n) search for the location when creating any new span.
It reduces the time for me to run the E2E tests by about 30%, which is OK.
I don't see any obvious outliers in the profile any more but there are very likely some higher level algorithmic changes we could make, and identifying redundant work.  I'm especially suspicious of the function construction the IR does when compiling a call, which will recreate every function called redundantly.  It's very hard to avoid this at the moment though, since functions have no unique identifiers -- we need to enforce using full module callpaths.  Right now they're still optional.",2,1
1152,2022-04-05T16:47:11Z,2022-04-06T04:05:26Z,2022-04-06T04:05:26Z,8,774,10,"Closes #1124
Found that the majority of contracts aren't being tested while sorting out #526 so I'm adding them here.",2,0
1154,2022-04-05T17:07:45Z,2022-04-05T19:06:24Z,2022-04-05T19:06:24Z,3,95,5,"this PR adds:

a mint_to_contract() function (a simple wrapper around mint() and force_transfer() )
a mint_to_address() function (a simple wrapper around mint() and transfer_to_output() )
tests for both

These are convenience functions, wrapping existing functions in the token module to allow minting and sending tokens in one function call.
closes #1083
closes #1084",2,0
1165,2022-04-05T19:51:55Z,,2022-04-11T17:11:51Z,87,1262,1059,"This PR changes the error handling scheme to instead rely on IndexSet (https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html#) from the indexmap crate (https://crates.io/crates/indexmap). The diff is kind of obnoxious but the changes are syntactic changes to accommodate for the new IndexSet.


Closes #1129",6,10
1166,2022-04-05T20:02:40Z,2022-04-06T04:21:04Z,2022-04-06T04:21:04Z,2,15,0,"Not tracked in an issue, but needed nonetheless.


This follows the implementation for eq for Address and ContractId, with the difference being the number of bytes to compare.


Tests were added under e2e harness as this was the most logical place to test this directly.",4,3
1168,2022-04-05T22:55:09Z,,2022-05-17T01:27:44Z,6,74,37,Closes #1116,4,2
1171,2022-04-06T18:05:08Z,2022-04-08T03:02:50Z,2022-04-08T03:02:50Z,3,68,33,"Pretty straightforward.
This PR:

adds a new error type EcRecoverError
updates the return types in both ecr functions
updates the testing to handle the returned results
reactors ec_recover_address() to remove all asm

Notes:

As the SDK can't currently handle returned Results, the e2e harness is still the best place to test these functions.",3,0
1173,2022-04-07T00:05:00Z,2022-04-07T13:14:27Z,2022-04-07T13:14:27Z,8,137,29,"Closes: #1169
When looking for the value to reassign, also look for it in the argument list of the function.",2,3
1176,2022-04-07T00:41:07Z,2022-04-07T01:52:47Z,2022-04-07T01:52:47Z,6,7,40,"This was originally required in order to support the separate implicit
bin and lib targets for forc without getting loads of warnings,
but as of #1174 cargo is aware of the separate targets and this is no
longer necessary.
The utils::client module was removed in favour of #1175.",2,0
1178,2022-04-07T05:33:26Z,2022-04-07T23:50:56Z,2022-04-07T23:50:56Z,2,85,6,"Adds support for treating external executables as forc plugins, provided they are of the name forc-* and are available via PATH.
For example, this allows for using an installed forc-foo <args> plugin via forc foo <args>.
This should enable us to cut down on some of forc's bloat by moving support for things like the block explorer, language server and running a fuel node into dedicated plugins.
This approach to plugin support is very much inspired by cargo's, but also takes advantage of clap's support for external commands to keep things a bit tidier.
Tested locally with the new forc-lsp plugin - see #1179.
Closes #944.
Related: #946, #1175.",3,1
1179,2022-04-07T05:35:35Z,2022-04-08T02:47:40Z,2022-04-08T02:47:40Z,11,56,41,"NOTE: This PR is Based on #1178 - we should land that first. I've opened this draft as a working demonstration of plugin support implemented in #1178.
This creates a dedicated forc-lsp plugin crate. With forc's new
plugin support, having this plugin installed and available via PATH
enables the original behaviour of starting the sway language server via
forc lsp <args>.
This also acts as a local test for forc plugin support and as a simple
example of how to implement a forc plugin.
The old lsp and forc_lsp modules have been removed from forc in
favour of this new forc-lsp plugin.",3,1
1180,2022-04-07T07:47:43Z,2022-04-08T03:40:13Z,2022-04-08T03:40:13Z,11,225,229,"NOTE: This PR is Based on #1178.
I've taken the liberty to clean-up/refactor the code a little during the move too.
Closes #946.",4,0
1181,2022-04-07T09:24:35Z,2022-04-08T00:21:50Z,2022-04-08T00:21:50Z,1,55,16,"This allows for forwarding both custom options and custom arguments
through to forc test's underlying cargo test invocation.
See the documentation for the new test::Command fields for
information on how to forward options and arguments.
This also removes the permanent ""--nocapture"" arg that we previously
passed through to cargo test in favour of allowing the user to
optionally specify it if they wish.
To achieve the original behaviour, you can invoke forc test with the
following:
forc test -- --nocapture

Note that this PR does keep the original behaviour of permanently
setting --color always in order to provide nice colorful output by
default. This is useful as cargo appears to disable colored output by
default when run as a child process.
In the case that the user wishes to disable colored output, they can
still do so by specifying the necessary cargo test option, e.g.
forc test --cargo-test-opts=""--color never""

Closes #1004, cc @nfurfaro",3,0
1187,2022-04-07T15:26:34Z,2022-04-08T03:50:01Z,2022-04-08T03:50:01Z,23,398,76,"This unblocks adding a layer of abstraction around abi casting and using ContractIds for that. Closes #947, and I think that's the only issue for this?

 Allow for ABI names to be passed by argument into functions
 Allow for the ContractCaller<_> type to have a dynamic ABI return (since it's all in the type system anyway)

Associated fixes:

Node dependencies would only check for one level of dependence, but not dependees of dependees.
Abi casts did not have their node dependencies checked.
Abi types also did not have their node dependencies checked.
Remove OwnedCallPath

Extra notes
ABI types are kind of weird. ABI casts and contract caller types are entirely known at compile time and zero-sized at runtime. So, the type system kind of ""solves"" these expressions (i.e. constantly evaluates them). This is because we need to know all of the details of the ABI at codegen time in order to properly format the CALL opcode and the data it needs.
This PR makes three main concessions for handling ABIs as expressions: parsing of contract caller types, the AbiName expression and some type-engine logic around ContractCallers. The type engine logic is a best attempt at what seems ""sensible"" for the type system to do, given the special-caseness of these types.",5,0
1194,2022-04-08T00:29:28Z,2022-04-11T21:12:39Z,2022-04-11T21:12:40Z,2,48,10,"Updated the default harness.rs that spawns from forc init to utilize an updated testing boilerplate, so that people using forc have something to start with, while keeping the default files from being cluttered.
Also makes the default main.sw a contract instead of a script so that is works with the test, and as contracts are probably the most common sway file people will be writing.
*Note - forc test will will not pass until the project contains {project_name}.json file with a [] abi, I considered adding a json to contain abi but wasn't sure if we wanted to introduce another file in forc init by default",4,8
1196,2022-04-08T04:36:16Z,2022-04-08T13:04:57Z,2022-04-08T13:04:57Z,10,67,98,"Follow-up to #1178.

This slims down forc a little further, and matches cargo's behaviour of shipping the formatter under a dedicated plugin. In cargo's case, many folk aren't even aware cargo fmt is provided by a plugin! I think we can provide an on-par experience once we get a forcup tool or similar going.
In the meantime (once they're published) you can install forc with the forc-fmt plugin crate like so:
$ cargo install forc forc-fmt
For sway devs who wish to install from local src, the best one-liner I can think of is:
$ cargo install --path ./forc ; cargo install --path ./forc-fmt

This also removes the FormatError type in favour of using the strictly more flexible anyhow::Error.",4,0
1199,2022-04-08T06:58:10Z,2022-04-11T05:59:16Z,2022-04-11T05:59:16Z,6,38,1,"Closes #1198.
Lists the full path to every forc-* plugin discovered under the user's
PATH.
For example:
[mindtree@minddesk:~]$ forc plugins
/home/mindtree/.cargo/bin/forc-fmt
/home/mindtree/.cargo/bin/forc-explore
/home/mindtree/.cargo/bin/forc-lsp
We could potentially add flags to this command in the future for:

only emitting executable names (not full paths)
printing versions and descriptions in a table
outputting via JSON or TOML for easier machine digestion.

For now, this PR just aims to add initial support.
The logic included in this should make it easier to include available
plugin commands in a future forc --list command too (ala #702).",4,2
1202,2022-04-08T14:07:14Z,,2022-04-22T20:52:55Z,1,6,0,"This small PR just adds a checker method which is a cleaner interface for a check
we do a lot in the ABIgen side of the SDK.
I wanted to add a unit test for it but I didin't see any in lib.rs, so I didn't go ahead.",5,5
1203,2022-04-08T16:35:44Z,2022-04-08T23:59:19Z,2022-04-08T23:59:19Z,22,317,15,closes #1146,2,0
1204,2022-04-08T18:35:54Z,2022-04-08T23:49:53Z,2022-04-08T23:49:53Z,1,5,0,"Using LLVM as a reference language here.. not ideal but better than nothing. There is a lot of overlap in instruction names and some basic syntax, so we'll get some colours in.",2,0
1205,2022-04-08T21:02:42Z,2022-04-12T18:16:10Z,2022-04-12T18:16:10Z,4,74,40,"Closes #484, #685",4,1
1207,2022-04-09T00:33:45Z,2022-04-11T17:24:34Z,2022-04-11T17:24:34Z,15,54,54,"This would be the first release with IR enabled by default. And much more!

 Fix duplicate errors: #1219",3,1
1208,2022-04-09T17:17:57Z,2022-04-11T14:13:57Z,2022-04-11T14:13:57Z,5,86,72,"Basically, use new features such as storage and the authentication module.

 hello_world
 counter - now identical to hello_world.
 wallet_smart_contract
 fizzbuzz
 subcurrency

Only updating the examples in this PR. Another PR will update the Sway book.",2,2
1212,2022-04-10T21:53:42Z,,2022-04-11T12:06:48Z,1,47,50,,3,4
1213,2022-04-11T04:45:17Z,2022-05-10T00:41:02Z,2022-05-10T00:41:03Z,26,1681,1651,"Closes #682
Part 1. Gobal State Structural Sharing
This removes the global arena used for managing namespaces during type
checking in favour of reverting to the original approach of representing
new scopes by cloning the namespace.
Prior to the introduction of the global arena, cloning the namespace to
represent new scopes caused exponential memory growth as the entirety of
each of the inner collections was cloned along with the namespace
itself.
In this new approach, we aim to avoid this by using clone-friendly,
drop-in-replacement collections from the im crate that enable
""structural sharing"" of the Namespace fields. See TODO below for
whether this is done yet or not.
You can read more about structural sharing here. The gist is that
rather than deep cloning the entire structure, we clone a reference to
the original state, and new allocations only occur upon modifying the
data structure with only the memory needed to record the difference.
The result is that we can avoid the side-effecting nature of maintaining
global state, making it easier to reason about how Namespaces are
accessed and updated within functions by reading their signatures.
It should also allow us to lean on RAII for cleaning up the namespace
contents, solving the bug where we are currently unable to compile the
same project more than once within the same process as mentioned
here. This is particularly relevant to sway-lsp where we will
likely want to lean on sway-core to type check the same code many
times within one process.
This also gets us a step toward achieving referential transparency for a
lot of our type checking functions which may enable easier caching and
parallelism in the future, though this would still currently be blocked
by the type engine's global state.
Many of the newer methods previously provided by NamespaceWrapper and
NamespaceRef have been moved to Namespace itself.
Part 2. Absolute Paths
The final set of changes in this PR are a refactor of the Namespace type in
order to ensure access to the whole module hierarchy (as well as the init
namespace) during all of type-checking.
Splitting Namespace into Root, Module and Items.
Previously, we used a single Namespace structure to represent not only the
module tree but the items within each module too.
This PR refactors the original Namespace type into:

Module: Represents a single module. Stores the set of items available within
the module as well as the set of submodules.
Items: The set of declarations, implementations, synonyms and aliases
available within a particular scope.

This allows for moving module-level behaviour onto the Module type, and
item-level behaviour to the Items type. This is particularly useful in
type-checking for distinguishing between whether or not we need the entire
module tree or just the set of items for a particular module (e.g. the
monomorphize methods).
The new Root type is a wrapper around the project's root Module. Methods
that should only be called on the root module (e.g. those that involve resolving
absolute paths, or internally resolving synonyms) have been moved onto this
type.
Module derefs to its inner Items, and Root derefs to its inner Module.
This is useful for retaining the ergonomics of the old Namespace type while
gaining the separation-of-concerns benefits of the new type separation in
function signatures.
Adding a new Namespace contextual type
A new higher-level Namespace type has been added that acts as a context,
making it easier to enter/exit submodules and scopes, and provides some
short-hand methods to avoid the need for repeatedly indexing into root with
the current module path.
The Namespace derefs to the Module that is currently being checked, allowing
to minimize the changes throughout the rest of type-checking.
TODO

 Replace collections in Namespace fields with clone-friendly
alternatives provided by im.
 Solve E2E errors. Since the arena was introduced, a lot of new
global mutation has also been introduced disguised by the RwLock.
E.g. the monomorphize functions now mutate the namespace at the
given reference, meaning that ns.resolve_self_* is also
self-mutating. Need to review how these methods are used to ensure the
new behaviour achieves the same intended results.",5,3
1223,2022-04-12T01:27:23Z,2022-04-13T00:50:46Z,2022-04-13T00:50:46Z,2,472,111,"Closes #1091
Three things:

#1092 makes the interface of a supertrait available in the namespace of a trait. This patch also makes this recursive so that we can climb the chain of supertraits and make their interfaces also available to the trait.
Similarly to the above, this change also makes the methods of supertraits (and their supertraits, etc.) available to the trait. For that, we need to make dummy versions of the methods of the supertraits by converting each FunctionDeclaration (each method) into a TypedFunctionDeclaration where we only care about the types of the parameters and the value returned.
Pulled out all the logic into separate functions for code cleanliness.",2,0
1228,2022-04-12T21:15:47Z,2022-04-14T23:38:57Z,2022-04-14T23:38:57Z,4,48,59,"Adding a small section on working with storage by-hand
Adding work-around methods for storing b256 values",3,2
1232,2022-04-12T23:28:36Z,2022-04-14T13:21:08Z,2022-04-14T13:21:08Z,7,37,62,"Adds find_manifest_dir function to manifest::from_dir method since we commonly check that a parent directory contains a Forc.toml. I've also moved check_project_type function as a method on Manifest as well since its use case was associated with Manifest and may later be moved into a from_dir_expecting_program_type method.
Tracking: #1107",2,3
1235,2022-04-13T07:57:09Z,2022-05-27T05:02:20Z,2022-05-27T05:02:20Z,9,486,7,Fixes #1229.,5,3
1243,2022-04-13T20:00:10Z,2022-04-19T14:55:15Z,2022-04-19T14:55:15Z,11,81,43,"Closes #1090
When type checking trait methods, those methods need access to the namespace where the trait was declared.",3,1
1245,2022-04-14T00:49:56Z,2022-04-14T05:05:50Z,2022-04-14T05:05:50Z,2,39,7,"Fixes a bug with forc init --template counter. It was expecting a Cargo.toml file to be there but since the /tests were removed from the examples folder there was nothing there to edit.
We now check if the tests folder exists, if not, we create a default test harness to go along with the counter example.
Currently, we are just using the default_test_program. There seems to be a bug related to the whole by-copy v.s. by-ref issue that the IR introduced. Once this is resolved, we can update the test harness file to reflect what is mentioned in the sway book here. https://fuellabs.github.io/sway/latest/testing/testing-with-rust.html
closes #1233
closes #1234",2,2
1247,2022-04-14T04:11:59Z,2022-04-14T16:32:58Z,2022-04-14T16:32:58Z,1,1,1,,3,1
1248,2022-04-14T09:00:57Z,2022-05-10T04:41:03Z,2022-05-10T04:41:03Z,5,183,137,"Fixes #1246

 Add tab indentation to forc deploy example string (outdated, we now link the example to fuels-rs book)
 Fix forc completions code block formatting (done by omitting it in the help string, moving it to the book)

This PR also contains a little refactoring to better separate examples from constants in the script (examples.rs, constants.rs)
Edit:
This PR will now only contain updates to the forc completions documentation issue, as filed in #1246

Moved after_help text into the examples section of the book instead to avoid unformatted text within the book, as well as to be able to format it better (with code blocks/bold text improving readability)

Decided not to refactor examples within the constants.rs file by moving it into a more aptly named examples.rs as first discussed for this PR for the sake of keeping diffs small, since the issue is about fixing the formatting of forc completions documentation and not refactoring.
I will open a separate issue + PR to better segregate texts within constants.rs as a QOL improvement, so in future if anyone wants to edit the examples within the book, they can easily find it within examples.rs, instead of going to (a less appropriately named) constants.rs",4,1
1249,2022-04-14T12:59:01Z,2022-04-14T22:27:02Z,2022-04-14T22:27:02Z,8,149,95,"Follow-up to #1232
After loading a Manifest, most useful operations involving it require
knowledge of the directory path from which it was loaded from (i.e.
entry_string, program_type).
This introduces a ManifestFile type that stores the path to the
Forc.toml from which its inner Manifest was read. This allows to
avoid a lot of unnecessary code duplication related to traversing the
parents to find the root manifest directory. Now, we can just load the
ManifestFile and call manifest.path() or manifest.dir() to get the
path to the Forc.toml or its enclosing directory respectively.
cc @eureka-cpu this is what I had in mind w.r.t. my comment here - I'll merge #1232 then rebase this work onto master. Edit: done.
Closes #1242",2,0
1251,2022-04-14T13:48:59Z,2022-04-14T22:24:35Z,2022-04-14T22:24:36Z,1,7,1,"Closes #1236
Warnings from the issue now go away.",2,0
1255,2022-04-14T21:20:15Z,2022-04-15T00:49:56Z,2022-04-15T00:49:56Z,1,13,13,"These const values were already defined in tx.sw but couldn't be used correctly.
Now they can.",2,0
1257,2022-04-14T21:51:35Z,2022-04-15T16:47:12Z,2022-04-15T16:47:12Z,1,31,1,"Added a welcome message to forc init, with some nice links and helpful information.
Uses: https://crates.io/crates/terminal-link which is fairly light no dependency library (recommended by Brandon K).
Related: #1252
Looks something like this below the success message (in green):
Now try `forc build` or `forc test`

----

Read the Docs:
- Sway Book
- Rust SDK Book
- Typescript SDK Docs

Join the Community:
- Follow us @SwayLang
- Ask questions in dev-chat on Discord

Report Bugs:
- Sway Issues",4,0
1259,2022-04-14T23:19:04Z,2022-04-15T16:46:35Z,2022-04-15T16:46:35Z,7,69,0,Adding a method to allow the logging of b256 type in the standard library.,3,0
1264,2022-04-15T02:42:54Z,2022-04-15T10:55:57Z,2022-04-15T10:55:58Z,3,2,13,"I think this section is no longer needed.
Also, fixing some links.",4,1
1266,2022-04-15T02:54:06Z,2022-04-15T16:47:01Z,2022-04-15T16:47:01Z,1,3,1,"1.58 version specified
And update instructions

Related: #1240",3,0
1269,2022-04-15T06:16:41Z,2022-04-15T14:01:36Z,2022-04-15T14:01:36Z,5,52,0,"Closes #1217
Added test case that @mohammadfawaz provided via the aforementioned issue",3,0
1272,2022-04-15T12:03:20Z,2022-04-17T23:50:22Z,2022-04-17T23:50:23Z,13,401,349,"Re-introduce the special case where if there's a single argument to a function call it is embedded directly in the call frame rather than being a pointer to the args elsewhere.
This will fix for errors we currently get when trying to call some contract from the SDK.
I'm halfway through working out what else needs to be fixed for contract calls + SDK but I've been on the road a bit and haven't had time.  So I thought I'd submit this PR now in case it's blocking anyone.
Closes #1138.",4,1
1275,2022-04-15T18:18:11Z,2022-04-16T10:01:48Z,2022-04-16T10:01:48Z,1,8,2,"Related:
FuelLabs/sway-vscode-plugin#42 (comment)
#1179
forc lsp now comes with the forc-lsp plugin crate - updating the documentation to provide a simple cargo install instruction to reflect this.",4,1
1276,2022-04-15T21:39:25Z,2022-04-20T23:10:55Z,2022-04-20T23:10:55Z,6,82,0,"This PR just adds a missing wrapper function for the xor op.
Test to come in a followup PR (they're already written).",4,3
1279,2022-04-16T21:38:12Z,2022-04-18T23:18:23Z,2022-04-18T23:18:23Z,5,50,0,,4,0
1282,2022-04-18T02:34:41Z,2022-04-19T08:19:14Z,2022-04-19T08:19:14Z,2,12,1,"Fix #1218
It seems that the formatter was not handling the special storage declaration like a struct declaration, which I assume should be the case for the purpose of formatting. This fixes that and adds some tests to check it.
Also added .vscode IDE config file to gitignore.",4,2
1283,2022-04-18T04:38:46Z,2022-04-19T06:18:22Z,2022-04-19T06:18:22Z,5,35,22,"Fixes #328
The issue was very specific to the formatted, get_formatted_data did not pass a BuildConfig to sway_core::parse.
The fix is fairly trivial and shouldn't affect anything since the case in which it was detected and in which it is relevant (parsing multiple files) already implies a Forc.toml exists (and indeed, forc fmt already fails with Error: Manifest file does not exist if one doesn't)

Pedantic note:
Whether or not this behavior is desirable I do not know, I guess there might be a design philosophy in which you'd want the formatter be to intentionally unaware of between-file/between-module relationship, maybe not even needing an AST (or the AST of a ""valid"" program) in order to gets things ala as-you-type formatting (rather than just when the file is valid) ...
I'm trying to keep this PR as impartial as possible on the issue since it uses the BuildConfig optionally; Might still encourage future code in the formatter using it (=> becoming more dependant on having a valid package structure). Maybe a minor concern, but feel free to close this (and the original issue) if it goes stylistically against where you're taking the formatter.",4,4
1284,2022-04-18T05:11:33Z,2022-04-19T06:18:58Z,2022-04-19T06:18:58Z,1,2,0,"Resolves #1150 , implementation is pretty straightforward, as described, defaults to including the std implicitly if the field is not specified.
Added some warnings when this option is used since I assume it's an uncommon use-case outside of working on sway itself or on some hyper-specialized program, also added a warning when the option is used and a path to the std is specified, which clarifies the explicit std will still be used (maybe not worth mentioning though, could remove).

Bikesheding:
I used println_yellow_err for the warnings since I've seen that behavior, but it might be worth having a specific println_yellow_warning function instead for greater clarity, or even setting a yellow == warning standard and renaming this function to println_yellow_warning or just println_warning.",3,0
1285,2022-04-18T07:05:04Z,2022-04-19T06:17:20Z,2022-04-19T06:17:21Z,1,2,0,"Resolves #1025 -- mainly opening the PR to ask some questions though
@otrho 's suggestion there was to find a library that procedurally generates shorthand for all arguments in a disambiguous way. This doesn't seem possible if we want said library to integrate with clap. Even if there were, shorthand/short arguments doesn't seem to be an option for enum-based parsing, which is a fairly elegant way to handle the first argument.
That being said, I think it'd be doable to annotate the enum with a proc macro that generates shorthands, but I'd wager it's too much bother writing it for not that much gain(?)
The other option would be to have a function the full command in run_cli, generates the shorthands based on all subcommands (and optionally all the flags/options), then transforms the command (with this approach you could get a behavior where forc b -pa -p -pi becomes forc build --print-intermediate-asm --path --print-ir --silent becomes`)  ... this would also require a macro-based approach but it seems like I'd make generating the appropriate docs very annoying (right now clap handles this automatically)
I myself am a fan of having the shorthands written by hand in the codebase or ideally not having them at all, I find that APIs are a horrible place to cut code-volume cost via code generation.

Anyway, if you think the manual approach is the best feel free to close this PR since I don't want to steal too many easy issues from other newbies. If you think an automatic-generated approach is best I'd love some more details about the ideal behavior and I can go ahead and try implementing it.",4,1
1286,2022-04-18T07:29:23Z,2022-04-21T04:09:01Z,2022-04-21T04:09:01Z,113,8466,1497,"This PR adds implements the new parser in a separate sway-parse crate in the cargo workspace.
You can currently switch between using the new parser or the old parser by modifying this line in sway-core/src/lib.rs. This should either be turned into a configurable option or removed entirely if/when we feel we're ready to commit to the new parser.
After the new parser gets run on a file its output is transformed into the old AST using the routines in sway-core/src/convert_parse_tree.rs. This is so that I didn't have to rewrite the typechecker to work on the new AST. However converting to the old AST also involves a lot desugaring/lowering so the old AST is now effectively a another intermediate representation.",5,10
1287,2022-04-18T07:35:09Z,2022-04-18T09:48:24Z,2022-04-18T09:48:24Z,1,2,2,"I noticed these when they resulted in compilation errors while working
on the Namespace refactor in #1213.
It appears that on master we're leaking submodules into the root
namespace, and as a result these haven't been caught yet. #1213 appears
to fix this and results in a compilation error. I might add a
should_fail E2E test as a part of #1213 to ensure we don't
accidentally leak submodules into the root in the future.",3,0
1290,2022-04-18T10:49:54Z,2022-04-18T11:57:41Z,2022-04-18T11:57:41Z,15,54,54,,2,0
1292,2022-04-18T12:17:27Z,2022-04-21T04:30:19Z,2022-04-21T04:30:19Z,4,19,16,"Two things:

Fixing the size of a String.
Treating Strings of size 1 word or less as copy types. We might have to do the same for structs and other complex types when they're small enough to fit in registers.

The following contract, for example, now returns the correct receipts and can be tested from the SDK.
contract;

abi MyContract {
    fn get_small_string() -> str[8];
    fn get_large_string() -> str[9];
}

impl MyContract for Contract {
    fn get_small_string() -> str[8] {
        let my_string: str[8] = ""gggggggg"";
        my_string
    }
    fn get_large_string() -> str[9] {
        let my_string: str[9] = ""ggggggggg"";
        my_string
    }
}
The SDK has a test similar to the above that should be re-enabled (cc @digorithm). For now, I can't really check this from a script because I can't check what was returned from the contract call against a literal String using an assert. Relevant: #1291",2,0
1300,2022-04-19T03:32:15Z,2022-04-19T04:42:19Z,2022-04-19T04:42:19Z,1,2,185,"Fixes #883
Properly addresses the issue and removes all content in the README.
Since the examples have already been moved to their dedicated forc command pages within the book, there shouldn't be a need to maintain a separate README, to avoid confusion for devs/maintainers.
To update the examples we would now need to change the raw strings that are inserted during the documentation generation within scripts/forc-documenter/src/constants.rs (and later within the more appropriately named examples.rs once #1248 is ready and merged)",3,0
1303,2022-04-19T09:10:05Z,2022-04-19T11:11:45Z,2022-04-19T11:11:45Z,1,1,1,,3,0
1304,2022-04-19T09:15:24Z,2022-04-19T11:12:16Z,2022-04-19T11:12:16Z,1,1,1,,3,1
1306,2022-04-19T15:10:03Z,2022-04-21T08:07:58Z,2022-04-21T08:07:58Z,2,6,26,"Fixes FuelLabs/fuels-rs#216
Instead of having an example of how to deploy using the Rust SDK within the Sway book, we link it to the page on deploying contracts in the fuels-rs book instead, so that only the fuels-rs book has to be updated in future.",5,2
1310,2022-04-19T18:58:45Z,2022-04-20T16:02:53Z,2022-04-20T16:02:54Z,6,67,0,"Added access control documentation
Added example

Closes: #1297",3,0
1317,2022-04-20T00:39:28Z,2022-04-20T23:08:42Z,2022-04-20T23:08:43Z,7,169,0,"Added more native asset examples in the Sway Book
Added context on what smart-contracts can do with native assets

Partially closes: #1281",4,0
1321,2022-04-20T04:40:11Z,,2022-07-29T01:38:07Z,15,236,3,"This was removed in #1040 but I think we should put back the counter example test as we can then use that for
forc init  --template counter.  We can also in a future PR, link to this example in the sway book here",2,3
1326,2022-04-20T16:15:45Z,2022-04-21T07:02:13Z,2022-04-21T07:02:13Z,1,4,1,"Instead of this:
  half-word   byte   op                 raw                 notes
          0   0      JI(4)              [144, 0, 0, 4]      conditionally jumps to byte 16
          1   4      NOOP               [71, 0, 0, 0]
          2   8      Undefined          [0, 0, 0, 0]        data section offset lo (0)
          3   12     Undefined          [0, 0, 1, 76]       data section offset hi (332)
          4   16     LW(63, 12, 1)      [93, 252, 192, 1]
          5   20     ADD(63, 63, 12)    [16, 255, 243, 0]
          6   24     MOVE(23, 5)        [26, 92, 80, 0]
          7   28     CFEI(64)           [145, 0, 0, 64]

make it look like this
  half-word   byte   op                 raw           notes
          0   0      JI(4)              90 00 00 04   conditionally jumps to byte 16
          1   4      NOOP               47 00 00 00
          2   8      Undefined          00 00 00 00   data section offset lo (0)
          3   12     Undefined          00 00 01 4c   data section offset hi (332)
          4   16     LW(63, 12, 1)      5d fc c0 01
          5   20     ADD(63, 63, 12)    10 ff f3 00
          6   24     MOVE(23, 5)        1a 5c 50 00
          7   28     CFEI(64)           91 00 00 40",4,1
1328,2022-04-20T16:55:32Z,2022-04-21T02:52:05Z,2022-04-21T02:52:05Z,98,54,46,"Testing out Plan A: #1058 (comment)
If we like this direction,  a follow-up issue could be to migrate all stdlib tests (there aren't many) out of the e2e test harness.
closes: #1058",3,2
1330,2022-04-20T19:05:17Z,2022-04-20T20:58:13Z,2022-04-20T20:58:13Z,1,17,0,Added some details around installing available forc plugins and how it works.,3,0
1333,2022-04-20T21:41:34Z,,2022-04-28T16:38:16Z,1,1,0,"Description
This PR adds a check to forc init and forc test to ensure that Rust is installed

Testing steps

 cargo test -p forc
 Try installing a few different rustc versions
 Try forc test using some of these different versions

You shouldn't even be allowed to used cargo or forc with any versions < 1.58
For versions > 1.58 you should see a little warning
If you don't have cargo installed (via editing your $PATH) you similarly should get an error",3,3
1334,2022-04-20T23:06:21Z,2022-04-22T00:21:41Z,2022-04-22T00:21:42Z,1,1,1,Added Fuel ABI specification links to the calling contracts section,2,0
1336,2022-04-21T02:11:33Z,,2022-04-21T18:08:36Z,112,226,47,"Document exhaustive match expressions

Closes: #1263",3,3
1337,2022-04-21T02:18:50Z,2022-05-07T14:39:12Z,2022-05-07T14:39:12Z,9,42,36,"See FuelLabs/fuels-rs#219 for context.
Blockers

 Await fuels-types to get published.

TODO

 Update Cargo.tomls to point to published version.
 Update Cargo.lock.",5,3
1339,2022-04-21T03:15:11Z,,2022-04-22T01:56:52Z,1,0,1,,3,1
1340,2022-04-21T03:53:22Z,2022-04-22T00:21:15Z,2022-04-22T00:21:15Z,3,34,0,"Add a section on dependancies
How dependancies get resolved
Path and git installing
Updating dependancies",3,0
1341,2022-04-21T04:47:56Z,2022-05-22T00:29:54Z,2022-05-22T00:29:54Z,3,18,0,"Adds a standard library introduction
This is done in the introduction, as the std library is used and referenced in the examples ahead of it
It tries to stay high level, points to the code location for additional investigation if needed
We will wait for forc-documenter to produce more detailed docs

Closes: #1316
Note: going to change out one of these paragraphs as its too close to the Rust std docs. Will do that tomorrow.",4,3
1348,2022-04-21T10:22:14Z,2022-04-22T09:41:54Z,2022-04-22T09:41:54Z,1,0,1,,3,0
1349,2022-04-21T16:20:54Z,2022-04-21T17:43:41Z,2022-04-21T17:43:41Z,4,22,1,"This restores a file that I mistakenly forgot to transfer in #1328  , as well as adds a minimal entrypoint at src/main.sw",2,0
1351,2022-04-21T17:47:35Z,2022-04-26T00:19:32Z,2022-04-26T00:19:32Z,7,151,27,"Closes #1186
This adds program type fields to the InitCommand struct making it possible to create different program types via forc init --<program_type> <project_name>. I've updated sway-utils::constants with two entry_types: MAIN_ENTRY & LIB_ENTRY so that Forc.toml uses the correct entry name and updated forc::utils::defaults to have a default program for each program_type. I add a file, forc::utils::program_type that contains the struct ProgramType to match on in forc_init.",5,7
1352,2022-04-21T17:57:17Z,2022-04-21T23:13:36Z,2022-04-21T23:13:36Z,1,8,26,Updated the location of the build script and linked to the docs for forc test,4,3
1353,2022-04-21T18:42:53Z,2022-04-22T01:35:16Z,2022-04-22T01:35:16Z,3,92,37,"Previously, we had an impl self( impl u64 ) where the binary_and, binary_or and binary_xor functions were defined.
This PR improves on this by:

adding 3 new traits pub trait BitwiseAnd , pub trait BitwiseOr  and pub trait BitwiseXor
refactoring to impl these traits for u64
I've also enabled the ^, << and >> operators and added tests for them.
this also reenables the u64_ops tests which were recently disabled with the new parser merge (They work when using the &, | and ^ operators).

This sets us up nicely to implement bitwise ops and Shiftable for b256.",3,2
1354,2022-04-21T19:56:53Z,2022-04-24T15:30:09Z,2022-04-24T15:30:09Z,1,6,2,"Description
This PR swaps out the the scary ""File does not exist"" warning for a ""lock file did not exist"" warning when creating a new lock file

Testing steps

 forc build without a Forc.lock",3,0
1355,2022-04-21T20:59:29Z,2022-05-06T01:29:31Z,2022-05-06T01:29:31Z,4,75,0,"Closes #1263

take 2
with comments
example in its own directory
formatting",4,2
1359,2022-04-21T22:48:23Z,2022-04-22T03:47:18Z,2022-04-22T03:47:18Z,37,37,111,"Description
This PR swaps the core dependency for an implicity-std = false setting in all e2e test manifest files
Testing steps

 cargo test should pass",3,0
1364,2022-04-22T03:02:42Z,2022-04-22T04:50:31Z,2022-04-22T04:50:31Z,1,6,8,This is a temporary workaround for #1363 until we work out what's really going on there.,2,1
1366,2022-04-22T07:02:13Z,2022-04-22T14:05:58Z,2022-04-22T14:05:58Z,5,37,5,Fixes #1342,4,1
1367,2022-04-22T07:33:56Z,2022-04-22T14:06:11Z,2022-04-22T14:06:11Z,1,2,2,"Putting ""parse error: ...""/""lex error: ..."" at the start of error messages isn't necessary.",3,0
1370,2022-04-22T15:25:44Z,2022-04-27T07:00:37Z,2022-04-27T07:00:37Z,1,104,25,"Closes #1369
Added all examples (except ""build all examples"") into forc_init.rs",5,7
1372,2022-04-22T19:40:18Z,2022-04-23T21:46:52Z,2022-04-23T21:46:52Z,1,36,22,,3,0
1373,2022-04-23T06:39:21Z,2022-04-28T14:04:00Z,2022-04-28T14:04:01Z,6,97,0,"Fixes #1200
So, this addresses #1200, but I have a suggestion to instead make this its own repo instead so that someone wanting to write their own plugin can use cargo generate to instantly clone and start working on their plugin.
Assuming we have a repo named forc-plugin-template:
$ cargo generate https://github.com/FuelLabs/forc-plugin-template
🤷   Project Name : forc-my-plugin
🔧   Generating template ...
[1/5]   Done: .gitignore
[2/5]   Done: Cargo.toml
[3/5]   Done: README.md
[4/5]   Done: src/lib.rs
[5/5]   Done: src
🔧   Moving generated files into: `/path/to/plugin/forc-my-plugin`...
💡   Initializing a fresh Git repository
✨   Done! New project created /path/to/plugin/forc-my-plugin
Developer can then cd into the project directory and start working.
If the above sounds good, we can change this PR to just updating the docs in /forcs/plugins.md, remove the forc-gm directory and use that project in its own repo instead.",3,3
1374,2022-04-23T10:38:03Z,2022-04-27T14:41:15Z,2022-04-27T14:41:15Z,14,185,2,"Closes #1068

Adds std::vm::evm namespace to the std-lib, and implements ecr
Recovers a 20-byte ethereum address. Value is returned as a left-padded Address type.
Currently recovers address from the literal signed data: EIP-191 domain separators (\x19Ethereum ... etc. ) are not yet taken into account. In ethereum web3 libraries these are often prepended automatically so we will probably need to add support to handle them later, e.g. for #1065",7,4
1379,2022-04-23T22:55:22Z,2022-04-24T07:36:56Z,2022-04-24T07:36:56Z,1,8,1,Fixes #1377,4,0
1381,2022-04-24T02:20:34Z,2022-04-24T06:58:43Z,2022-04-24T06:58:43Z,3,49,10,"Closes #1214
Extends forc plugins to emit file names only by default and with the option of adding -v or --verbose to print full paths.
@mitchmindtree i went ahead and inversed the behaviour you described in the issue, if this is undesirable I can change it.",2,3
1384,2022-04-24T09:15:51Z,2022-04-24T10:37:10Z,2022-04-24T10:37:10Z,10,60,70,"Fixes #1376
Primary changes:

Add a forc fmt --check pass to build-all-examples. Maybe not the prettiest, but it's only used for CI anyways so 🤷. Filed #1386 to clean up. (414e5b8)
Format examples (b25e41c)
For some reason build-all-examples was being run in a bunch of jobs?? Might have been because of copy-paste. (8cbaaf1)",2,0
1388,2022-04-24T19:20:46Z,2022-04-26T14:25:44Z,2022-04-26T14:25:44Z,17,252,38,"While working on #1143, I noticed that the new parser was not allowing type arguments in this position:
let a = S::<u64> { };
This was blocking me, anyway, so I went ahead and implemented it. The new parser worked well for this application and was easy to build upon. 🎊",3,0
1390,2022-04-25T12:24:07Z,2022-04-25T22:45:51Z,2022-04-25T22:45:51Z,1,24,1,"Fixes #1329
For use statements that spanned multiple lines, e.g.
use std::{
    option::*,
    result::*,
};
the whitespace following the last , was considered a token, i.e. something being imported. It happens to lexicographically precede letters, so this bug was manifesting as a leading , being inserted into the list of items being imported.
The proposed fix is to chomp the whitespace and avoid keeping around empty tokens in the tokenization logic.",4,2
1394,2022-04-26T03:03:24Z,2022-04-30T00:08:35Z,2022-04-30T00:08:35Z,1,27,13,,5,10
1396,2022-04-26T04:28:27Z,2022-04-26T10:26:28Z,2022-04-26T10:26:29Z,11,280,150,"Needed for contract calls, where the user args need to be a u64 but could be provided as any copy type.
Closes #1335 which is blocking @digorithm
The test are minimal -- just updating those which make a contract call with a single immedate arg as it will now use a bitcast to ensure it's a u64.
Strictly speaking a bitcast shouldn't change the value, only its type.  In the ASMgen though if the dest type is bool I'm ensuring it's a 1 or 0.  This might be overkill.
A progression of this PR is to introduce ptr_to_int and possibly int_to_ptr instructions.",3,0
1397,2022-04-26T14:01:22Z,2022-04-27T11:28:06Z,2022-04-27T11:28:06Z,7,32,4,"E.g.
fn f() {
    asm ( .. ) {
        //  No return value. Just a log for example
    }
}
In the above, the asm block doesn't return anything but we still return its result (of type ()) from f(). Instead, I'm now returning a separate const () directly which seems to simplify a few things downstream. The current code is causing an illegal move to be generated (a move from a register that isn't assigned) which causes some issues in the register allocator. With this patch, the problem goes away.
This fixes the ""not enough registers"" problem that @nfurfaro was seeing.",2,4
1398,2022-04-26T14:10:12Z,2022-05-02T03:05:14Z,2022-05-02T03:05:15Z,7,226,119,"Closes #1389 and #1386

Move build-all-examples -> examples-checker in the scripts dir
Use clap in the script so we can run forc fmt --check and forc build separately
Some refactoring in the script
Support running with paths or all examples (--paths <PATH_1> <PATH_2> ..., --all-examples)",3,5
1402,2022-04-26T14:43:28Z,2022-04-26T18:35:43Z,2022-04-26T18:35:43Z,15,57,57,,3,1
1403,2022-04-26T14:58:29Z,2022-04-26T16:03:31Z,2022-04-26T16:03:31Z,2,2,2,This is blocking #1402  -- we need to specify this locally so it doesn't implicitly pull the libraries from git.,2,0
1407,2022-04-26T20:24:33Z,2022-05-17T02:49:36Z,2022-05-17T02:49:36Z,77,364,6404,"Get rid of re_parse_expression from the pre-lifetimeless-span days
Remove any dependency on pest and all the old parse_from_pairs methods
Remove all dead code resulting from above
Re-introduce warnings for style violations (they weren't implemented in sway-parse)
Update IR tests for new spans coming from sway_parse
remove all use_orig_parser flags in forc.
Remove selector_debug, a utility for debugging function selectors, as it relied on the old parser.

We can now archive fuel-pest.

I brought you into this world, and I can take you out of it

-- me, talking to dozens of parse_from_pair functions",7,1
1409,2022-04-27T00:58:04Z,2022-05-02T15:01:26Z,2022-05-02T15:01:26Z,1,30,0,"Description

This PR adds a build-forc-test-project CI job that simply builds, formats, and tests a new forc project to ensure basic commands aren't broken

Testing steps

 Added build-forc-test-project CI job should pass",4,1
1413,2022-04-27T15:51:09Z,2022-04-27T23:08:42Z,2022-04-27T23:08:42Z,3,2,2,"As per discussion on how to organise submodules for the std-lib, changes lib.sw to the more idiomatic mod.sw for submodules.",3,0
1414,2022-04-27T17:08:47Z,2022-04-27T18:24:43Z,2022-04-27T18:24:44Z,1,3,0,Close #1405,3,0
1415,2022-04-27T17:11:24Z,2022-04-28T14:17:10Z,2022-04-28T14:17:11Z,1,8,14,Closes #1055,3,0
1417,2022-04-27T18:20:42Z,2022-04-30T13:23:45Z,2022-04-30T13:23:45Z,50,239,261,"Closes #1412
Mostly just replacing uses of jnei with jnzi, updating IR tests, and some e2e tests. Also bumping versions of various components to the latest available including the defaults for forc init. Finally, lib-std test are also updated to compile with the latest fuels-rs.
Remaining tasks:

 bump fuel-core - waiting for a new release after FuelLabs/fuel-core#293.
 bump fuels-rs - waiting for a new release and hopefully the lib-std tests will pass 🤞 after that.",5,2
1419,2022-04-28T07:52:58Z,2022-04-29T01:18:50Z,2022-04-29T01:18:50Z,17,172,362,"This is both simpler and a more expressive way to test IR passes.  It uses special embedded directives to confirm that an IR transformation has been applied correctly.
I've had this branch languishing around for a few weeks, thought I'd finish it up and submit it.",2,3
1421,2022-04-28T10:55:39Z,2022-05-01T23:28:12Z,2022-05-01T23:28:12Z,3,81,15,"This is the first step toward fixing #1188. The new parser now parses function arguments as patterns rather than idents, allowing them to be mut. This still isn't handled in the lower layers of the compiler though.",3,0
1422,2022-04-28T11:52:51Z,2022-05-05T21:03:02Z,2022-05-05T21:03:03Z,13,260,328,"This PR is just some small clean-ups:

Rename {CompileError, CompileWarning}::internal_span to just span and make it return an owned Span.
Replace lots of uses of String with Ident.",4,4
1425,2022-04-28T21:31:27Z,2022-05-19T02:37:35Z,2022-05-19T02:37:36Z,32,1262,4,"The design of rustfmt is to leave code functionality in tact, but also do more than just move white space. For instance, long generic parameters can be cleaned up with a where clause addition and formatting of those parameters after it. I think that's a really great characteristic that keeps code uniform and even teaches users the standard practices.
It uses an AST for most of the formatting, but for macros it uses tokens or otherwise leaves them untouched. Most macros aren't formatted, unless necessary like the format! macro since it takes in variables that result in a String.
rustfmt can recognize when something won't benefit from being formatted and opts that portion of the code out of the formatting process. If code doesn't fit the conditions of what would need formatting, e.g. a user created diagram, then it will just leave it alone.
swayfmt's goal is to be somewhat transparent. It should format Sway code to our standards, and if the user so decides it, they can add a swayfmt.toml to their root dir and it will assume only the changes present, and leave the rest to default.
Tracking further development: #1516",5,5
1430,2022-04-29T03:34:11Z,2022-05-02T01:19:55Z,2022-05-02T01:19:55Z,17,460,101,"This PR mostly addresses the missing Declaration and Expression variants of the AstNodes returned by the SwayParseTree as mentioned in this issue #1017.
Note, going forward I also plan on using the TypedParseTree for collecting the tokens. This is essential for gathering type information about some tokens, but also for accessing the namespace associated with each token.",4,3
1433,2022-04-29T16:22:03Z,,2022-05-18T14:05:39Z,122,6138,5445,"This PR ended up touching way more stuff than original intended. Let me explain what all is included in this PR:

Minor improvements to the internal namespace API, including creating a namespace_system submodule for readability and maintainability
Introduce the UnsafeDowncast internal compiler expression and the EnumTag internal compiler expression. Both of these have existed previously in the compiler in a more destructured form (inside of if-let evaluation), but this PR names them as expressions
Introduce the CopyTypes trait, with one function copy_types. This replaces the manual implementation of copy_types on the typed decl types
Introduce the CreateTypeId trait, with one function type_id. This replaces the manual implementation of copy_types on TypedEnumDecl and TypedStructDecl
Introduce the MonomorphizationHelper trait, with several methods to help with monomorphization
Introduce the Monomorphization trait with one function monomorphization. This trait is auto-implemented for any type that implements the MonomorphizationHelper trait. This trait replaces the manual implementations on TypedFunctionDecl, TypedEnumDecl, and TypedStructDecl. The monomorphization function is mutually recursive with the resolve_types_{with|without}_self functions. Previously, use of the monomorphization and resolve_types_{with|without}_self were unstandardized, leading to cases of generic types being missed and types not being resolved recursively (i.e. the type arguments of a generic)
Move desugaring of match expressions to during type checking. This allows Scrutinees to be type checked and monormophized
Introduce enum desugaring and matching in match expressions, using the UnsafeDowncast expression and the EnumTag expression
Change if-lets to be desugared to match expressions
Change the Option and Result types in the standard library to use match expressions instead of if-lets
Introduce recursive pattern matching with the catchall arm (""_"")
Remove stale cargo tests from inside of IR handling. Previously, if-lets did not rely on core::ops to perform equality, but this PR changes them to rely on this, and so core is needed to perform comparisons. Because the internal cargo tests inside of the IR handling do not have imports, some tests have to be removed
Make match expressions and if-let expressions stale in the old parser
Change the cargo tests from inside of IR handling to use the new parser
There are no documentation changes in this PR because the documentation for match expressions is still up to date


Closes #579
Closes #1449
Closes #1116
Closes #1556
Closes #609
Closes #1525

This PR also generated this issue: #1567",6,11
1438,2022-04-29T23:59:50Z,2022-05-04T23:33:36Z,2022-05-04T23:33:36Z,3,21,8,"update docker image to rust 1.60
use cargo-chef to improve image building performance
removed redundant binary target definition (due to LukeMathWalker/cargo-chef#128)",5,4
1440,2022-04-30T12:15:21Z,2022-05-02T23:09:39Z,2022-05-02T23:09:40Z,14,104,53,"This was the old behavior which was changed in #1292. We agreed to bring back the old behavior for consistency. So, the compiler now does not differentiate between small strings (<= 8 bytes) and large strings.
Other changes were required to correctly generate the final bytecode. Basically, the logic for the data section has been simplified to use a new function called is_copy_type() (similar to the other is_copy_type() functions that we have available for TypeInfo and IR Type) instead of relying on the size of the type.
Closes #1424.",2,3
1441,2022-04-30T17:49:44Z,2022-05-01T03:26:42Z,2022-05-01T03:26:42Z,2,2,2,The default url needs to start with http:// now.,4,1
1442,2022-04-30T22:01:03Z,2022-05-10T19:23:38Z,2022-05-10T19:23:39Z,9,46,1,"Description
This PR adds a --locked flag to forc which closely resembles Cargo's --locked flag
Testing steps

 Try to forc build/deploy/run after deleting your Forc.lock
 Try to forc build/deploy/run after changing your dependencies without updating your Forc.lock (or visa-versa)",4,1
1443,2022-05-01T04:13:45Z,2022-05-02T02:00:27Z,2022-05-02T02:00:28Z,1,1,1,"Related: #1441
The CI gives an unclear action message with regards to running forc-documenter after local changes to forc commands. The right action should be to install forc from path so that the developer actively working on local changes receives the latest forc --help, before running the script.",4,0
1445,2022-05-02T06:43:25Z,2022-05-03T13:59:52Z,2022-05-03T13:59:53Z,1,1,4,Closes #1444,4,1
1452,2022-05-02T22:48:34Z,2022-05-24T13:46:11Z,2022-05-24T13:46:12Z,10,60,39,"Adds ethAddress type
closes #1392",6,10
1453,2022-05-02T23:55:24Z,2022-05-04T23:44:13Z,2022-05-04T23:44:13Z,2,76,15,"Description

This PR adds flags to include long descriptions for forc plugins

Testing steps

 Try passing -d and/or --describe to forc plugins

Output should resemble
➜  sway git:(rashad/1215-add-forc-plugins-opt) ✗ forc plugins --describe
Installed Plugins:
  forc-explore          Forc plugin for running the Fuel Block Explorer.
  forc-lsp              Forc plugin for the Sway LSP (Language Server Protocol) implementation.
  forc-fmt              Forc plugin for running the Sway code formatter.

Notes

Every forc plugins description starts with Forc plugin for... which is a little redundant.

We know it's a plugin because it's listed via forc plugin


I see cargo has something similar to:

➜  sway git:(rashad/1215-add-forc-plugins-opt) ✗ cargo --list
Installed Commands:
    add
    audit
    b                    alias: build
    bench                Execute all benchmarks of a local package
    build                Compile a local package and all of its dependencies
    c                    alias: check
    check                Check a local package and all of its dependencies for errors
    clean                Remove artifacts that cargo has generated in the past
    clippy               Checks a package to catch common mistakes and improve your Rust code.
    config               Inspect configuration values
    d                    alias: doc
    doc                  Build a package's documentation


If there is buy in, we could potentially either (1) update these descriptions to remove the redundant prefix, or (2) Add a separate type of description",5,5
1454,2022-05-03T00:24:52Z,2022-05-03T11:28:18Z,2022-05-03T11:28:18Z,5,472,28,"closes #1451
Even though we're changing how storage is implemented, this is a trivial fix and the test that I keep expanding is going to be useful for coverage in the future.",2,0
1456,2022-05-03T08:21:22Z,2022-05-03T13:44:51Z,2022-05-03T13:44:51Z,2,11,13,"I had some strange errors I think related to trying to get the previous call frame with the current one is zero.  Otherwise this change isn't much different to the existing code, just a little simpler.",4,1
1457,2022-05-03T13:44:54Z,2022-05-03T16:34:08Z,2022-05-03T16:34:08Z,16,59,59,"Closes #1426

 Fix the build-forc-test-project CI job to correct test the local forc.",2,0
1461,2022-05-03T15:15:54Z,2022-05-04T23:44:47Z,2022-05-04T23:44:47Z,1,6,1,"Description

This PR adds a [manifest] to the build-forc-test-project job's cargo manifest

Testing Steps

 CI should pass and build-forc-test-project specifically should have no errors during any steps",3,2
1467,2022-05-04T03:20:56Z,2022-05-04T16:52:13Z,2022-05-04T16:52:13Z,2,42,30,"Closes #1406

Updated forc parse-bytecode documentation example by using the counter template, with the pretty printed output",3,0
1468,2022-05-04T07:27:10Z,2022-05-04T14:20:53Z,2022-05-04T14:20:53Z,1,1,1,"Closes #1463

unpublished crate does not need versioning to use a crate from path",3,0
1469,2022-05-04T07:33:20Z,2022-05-05T02:15:02Z,2022-05-05T02:15:02Z,6,7,43,"Closes #1462

Add hide = true to use_orig_parser and use_orig_asm to hide them from the help text found in build, deploy and run while maintaining functionality
Remove corresponding documentation about the options",5,0
1475,2022-05-04T17:11:40Z,,2022-05-22T16:43:36Z,14,1404,0,,2,1
1477,2022-05-04T17:26:13Z,2022-05-04T18:33:10Z,2022-05-04T18:33:10Z,1,6,0,Closes #1476,2,0
1480,2022-05-04T23:53:55Z,2022-05-10T19:24:19Z,2022-05-10T19:24:19Z,6,243,39,"Description

This PR formats long use statements by adding newline \n chars when the line extends beyond a certain length

Testing steps

 Tests were added so cargo test -p sway-fmt should pass
 Create a simple forc project and try using this one-line, long use statement

std::{address::*, assert::assert, block::*, chain::auth::*, context::{* , call_frames::*}, contract_id::ContractId, hash::* , panic::panic, storage::* , token::*};

Here are some examples
// This...
use std::{address::*, assert::assert, block::*, chain::auth::*, context::{* , call_frames::*}, contract_id::ContractId, hash::* , panic::panic, storage::* , token::*};

// Formats to...
use std::{
    address::*,
    assert::assert,
    block::*,
    chain::auth::*,
    context::{*, call_frames::*},
    contract_id::ContractId,
    hash::*,
    panic::panic,
    storage::*,
    token::*,
};

// And this...
use std::{address::*, context::{*,text::{call_frames::*, dial_frames::{Transaction, TransactionParameters}, token_storage::{CallData, Parameters}}}, assert::assert, block::*, chain::auth::*, context::{*, call_frames::*}, contract_id::ContractId, hash::*, panic::panic, storage::*, token::*};

// Formats to...
use std::{
    address::*,
    assert::assert,
    block::*,
    chain::auth::*,
    context::{*, call_frames::*},
    context::{
        *,
        text::{
            call_frames::*,
            dial_frames::{Transaction, TransactionParameters},
            token_storage::{CallData, Parameters}
        }
    },
    contract_id::ContractId,
    hash::*,
    panic::panic,
    storage::*,
    token::*,
};",5,4
1485,2022-05-05T14:41:34Z,2022-05-06T12:53:13Z,2022-05-06T12:53:13Z,2,8,5,,4,0
1486,2022-05-05T14:59:53Z,2022-05-05T23:40:36Z,2022-05-05T23:40:36Z,4,53,62,,3,0
1487,2022-05-05T15:10:54Z,2022-05-10T05:54:05Z,2022-05-10T05:54:05Z,2,9,4,"…realname
Closes #1484",5,2
1488,2022-05-06T07:45:35Z,2022-05-10T01:41:54Z,2022-05-10T01:41:54Z,9,446,43,"These will parse Rust-like attributes for any top-level item.
E.g., #[attrib(arg0, arg1)]
They are ignored by the rest of the compiler at this stage.
This is the first major change I've made to the new parser and so I'm a little unsure I've taken the right approach.  Very happy to be corrected if not @canndrew 🙂
Also, I've just gone with basic attributes, nothing too fancy like #[attrib = ""value""], or #[attrib(key = ""value"")]
Oh, and the docs will need to mention these eventually, I haven't done that.  But there's not much to say yet -- once the storage attribs are implemented we can actually use them as examples...",5,4
1490,2022-05-06T18:35:41Z,2022-05-06T19:42:23Z,2022-05-06T19:42:23Z,7,78,2,"I noticed some nondeterminism in the hash_u64 function from the standard library. Turns out there was a bug in its implementation.
Also added the beginning of a library test on hashing. We should expand that test to cover all hash functions and validate their results.",2,0
1494,2022-05-06T23:49:36Z,2022-05-08T18:20:30Z,2022-05-08T18:20:30Z,18,43,43,"Closes #1470
I changed every instance of panic to revert and some of the comments. I also ran the test suite on a node and made corrections to the test where applicable.",5,2
1496,2022-05-07T06:58:46Z,2022-05-07T08:02:48Z,2022-05-07T08:02:49Z,1,1,1,Closes #1495,2,0
1497,2022-05-07T07:42:35Z,2022-05-09T00:57:06Z,2022-05-09T00:57:06Z,1,5,4,"I was just investigating #1450 when I noticed Cargo.lock was declared in the gitignore.
Now I'm wondering how our repo has been tracking the workspace-level Cargo.lock the whole time while this was the case? I guess it might have been added to tracking before being added to the gitignore?
This also adds the sway std lib test harness lock file which was ignored due to this, unblocking #1450.",6,5
1500,2022-05-08T20:11:31Z,2022-05-11T12:46:43Z,2022-05-11T12:46:43Z,7,81,0,"A simple wrapper around assert which allows passing in a custom u64 value to the inner revert, + a few simple tests.",3,1
1503,2022-05-09T03:03:42Z,2022-05-10T01:36:49Z,2022-05-10T01:36:49Z,2,9,7,"Incorrect warnings and errors were being reported in VS-Code after updating the document. It appears that we have only been publishing diagnostics back to the client if any errors or warnings were reported by the parser. This meant that if an error was rectified, then we were not clearing the previously reported diagnostic information and the Client would display the incorrect warnings and errors.
Also fixes an off-by-one error when reporting diagnostic ranges to the Client.
closes #1315",3,0
1504,2022-05-09T07:39:43Z,2022-05-10T02:02:07Z,2022-05-10T02:02:07Z,3,85,84,Some minor code quality related forc-documenter refactoring - moving examples found in documentation out of constants.rs into examples.rs for clearer semantic separation,2,0
1505,2022-05-09T09:05:29Z,2022-05-10T05:33:53Z,2022-05-10T05:33:53Z,3,32,32,"Partially addresses #1489 (1/2)
This PR is a general improvement on CI reporting of forc-documenter, after some feedback on how the CI instructions after a failed run can be hard to follow/understand.
Now it should report commands for which documentation is inconsistent and continue running, rather than terminating at the first failed command.
Example output:
   Compiling forc-documenter v0.0.0 (/Users/bh/Projects/fuel/sway/scripts/forc-documenter)
    Finished dev [unoptimized + debuginfo] target(s) in 1.19s
     Running `target/debug/forc-documenter write-docs --dry-run`
Running forc --help using forc 0.12.1

[✓] forc addr2line: documentation ok.
[x] forc build: documentation inconsistent!
[✓] forc clean: documentation ok.
[✓] forc completions: documentation ok.
[x] forc deploy: documentation inconsistent!
[✓] forc init: documentation ok.
[✓] forc json-abi: documentation ok.
[✓] forc parse-bytecode: documentation ok.
[x] forc plugins: documentation inconsistent!
[x] forc run: documentation inconsistent!
[✓] forc test: documentation ok.
[✓] forc update: documentation ok.
[x] index.md inconsistent!
[✓] SUMMARY.md ok.
Error: The Forc section of the Sway book needs to be updated.

Please run `cargo run --bin forc-documenter write-docs`. If you have made local changes to any forc native commands, please install forc from path first: `cargo install --path ./forc`, then run the command.",3,0
1507,2022-05-09T13:06:21Z,2022-05-10T05:52:57Z,2022-05-10T05:52:57Z,1,7,2,Closes #1506,3,0
1513,2022-05-10T18:24:51Z,2022-05-16T17:25:59Z,2022-05-16T17:25:59Z,1,109,1,"Description

This PR adds a build-and-publish-forc-binary CI job that uploads forc binaries for different architectures to a release, when the release is published
Binaries include:

forc
forc-fmt
forc-lsp
forc-explore



Testing Steps

 Go to https://github.com/FuelLabs/ci-dummy-test
 Create a new release tag, and a new release using that tag
 Let CI for the release finish - then you should see uploaded binaries

To test a binary

 Download the binary for your architecture (mine is darwin_amd64)

# Extract tar contents
tar -xvf forc-binaries-darwin_amd64.tar.gz

# Unzip the particular binary you want
gzip -d forc.darwin_amd64.gz

# Rename
mv forc.darwin_amd64 forc

# Update perms 
chmod 755 forc

# Use it
forc --help

# IMPORTANT: On Darwin architectures you might have to open 
# the executable with your terminal using the Finder app
You can view these test binaries over at https://github.com/FuelLabs/ci-dummy-test/releases/tag/v0.12.0",4,3
1514,2022-05-10T20:38:44Z,2022-05-14T22:57:40Z,2022-05-14T22:57:40Z,8,171,2,"Adds the 3 basic bitwise operations (&, | and ^) for the b256 type. A follow-up PR (almost done) will add left & right shifting for b256s.",4,1
1518,2022-05-11T02:58:34Z,2022-05-19T05:27:55Z,2022-05-19T05:27:56Z,52,696,109,"Closes #1447.
Closes #470. Except for the chain bit. Do we want a new issue for chain attributes?",6,2
1519,2022-05-11T05:37:15Z,2022-05-11T16:50:26Z,2022-05-11T16:50:26Z,2,15,3,"The little change made to the out_of_order_decl test will make it fail without the code changes.  Just had to include the if let bodies to the dependency gathering.
Closes #1508.",3,0
1520,2022-05-11T06:41:41Z,2022-05-11T19:18:14Z,2022-05-11T19:18:14Z,4,8,9,"The default harness provided by forc was using out of date versions, this should hopefully address any out of date deps with fuels.",3,4
1522,2022-05-11T09:18:30Z,2022-05-11T16:49:50Z,2022-05-11T16:49:50Z,3,34,17,Closes #1501.,3,0
1524,2022-05-11T18:47:04Z,2022-05-14T14:28:49Z,2022-05-14T14:28:50Z,1,82,7,"Description

This PR fixes an issue where forc-fmt would not respect aliases and would turn use foo::{bar as Bar}; into use foo::{barasBar};

The fix is done by swapping .match_indices() with a similar function match_indices_str() which can match the full as token



Testing steps

 A test was added so cargo test -p sway-fmt should pass
 Create a new forc init project and try out some of the following use statements:

// This...
use a::b::{c as d, e as f};

// Formats to...
use a::b::{c as d, e as f};

// And this...
use std::{address::*, assert::assert as LocalAssert, block::*, chain::auth::*, context::{*,text::{call_frames::*, dial_frames::{Transaction as DialFrameTransaction, TransactionParameters}, token_storage::{CallData, Parameters}}}, contract_id::ContractId, hash::*, panic::panic, storage::*, token::*};

// Formats to...
use std::{
    address::*,
    assert::assert as LocalAssert,
    block::*,
    chain::auth::*,
    context::{
        *,
        text::{
            call_frames::*,
            dial_frames::{Transaction as DialFrameTransaction, TransactionParameters},
            token_storage::{CallData, Parameters}
        }
    },
    contract_id::ContractId,
    hash::*,
    panic::panic,
    storage::*,
    token::*,
};",4,0
1534,2022-05-12T20:47:17Z,2022-05-13T04:20:13Z,2022-05-13T04:20:13Z,13,295,173,"I've been working on unblocking vectors and allowing unused generics. I'm blocked on some changes in #1433 . For the sake of atomic PR's, I figured I'd wrap up the changes I've made thus far into a PR:

Include type_parameters in the definition of a struct or enum in the type engine. This allows for handling of generic types where the type is not necessarily used in the fields or variants.
Change TypeId from a type alias to a newtype. This provides greater type safety but also allowed me to implement Display for it. Now when you print a TypeId, instead of the numeric value in the type engine, you'll see the actual type it represents.
Do a bit of refactoring/code cleanup in places.",5,1
1535,2022-05-12T21:12:01Z,,2022-05-12T23:47:43Z,28,202,33,Closes #1533.,3,1
1536,2022-05-12T21:36:38Z,2022-05-14T13:04:03Z,2022-05-14T13:04:04Z,37,228,68,"Closes #1531
Closes #1533",4,2
1538,2022-05-13T06:54:35Z,2022-05-14T15:48:05Z,2022-05-14T15:48:05Z,2,57,0,Manifest Reference section added to The Sway Book forc section.,2,0
1540,2022-05-13T16:16:44Z,2022-05-13T17:41:26Z,2022-05-13T17:41:27Z,6,179,7,"Closes #1512
The inference engine currently replaces old type info with new, more accurate type info when more constraining type information is found. For example, if we know a type is Numeric, and it is then used in the context of a u64, we can replace all the type info for that type with u64.
We are mistakenly performing this update on integer casts. If a number x is a u32, for example, and it is used in the context of a u64, we are updating all the type information up to that point with u64. This is incorrect, as casting only updates the type information from the cast site onward.",2,0
1542,2022-05-13T17:53:03Z,2022-05-13T20:14:48Z,2022-05-13T20:14:48Z,2,17,6,"The names of tuples in the compiler are currently non-deterministic. This change is one way we could generate unique stable names for them.
The reason we want stable names is because the names of variables impact their order in IR. That order determines the order in which variables get allocated which impacts the generated bytecode.",2,0
1543,2022-05-13T18:00:00Z,2022-05-25T22:25:17Z,2022-05-25T22:25:18Z,2,8,2,"I've been trying to run Forc with Docker. I believe something like docker run ghcr.io/fuellabs/forc build should work, but we have some issues:
fix: add missing Docker container dependency
I was getting the following error so I added libssl-dev as a dependency:
> docker run ghcr.io/fuellabs/sway:latest ./forc build
./forc: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory

fix: publish Docker image as ""forc"" and not ""sway""
Our image is called sway which I believe should be called forc. This commit adds image labels for Forc during the build process.
fix: add default Docker image command
The image doesn't have a default command so you need to specify the forc binary yourself. This commit adds that.",3,1
1544,2022-05-13T20:13:07Z,2022-05-18T19:13:58Z,2022-05-18T19:13:58Z,5,502,3,Closes #1511,5,8
1545,2022-05-14T08:35:44Z,2022-05-17T07:02:28Z,2022-05-17T07:02:28Z,34,733,1411,"Closes #1510
Looked into using custom preprocessors for mdbook instead of a manual forc-documenter script, managed to port it over as a preprocessor.
Points to take note:

With this change, we no longer need to run forc-documenter manually to update the Forc related documentation - this step is automatically ran within the mdbook build step instead. This will save us time when trying to iterate quickly over PRs
The only time  that someone has to manually do something is if a forc command is being deleted or added - the change has to be made within SUMMARY.md
The internals still work more or less the same, but with cleaner code since there's no longer a mess of creating/deleting files. Like before, the preprocessor is running forc <SUBCOMMAND> --help, parsing and formatting the output and writing it into a chapter's content.
Examples now no longer need to be stored in ugly raw strings as we did using forc-documenter, instead we store them within a folder examples/ in Markdown, which makes editing a lot easier.

There is a small downside to this approach, namely that we can't see the diffs of the documentation between changes when we make PRs. This means that if we made changes to forc commands it would be ideal to run mdbook build locally just to double check if the documentation was generated correctly - however, I think this should be a non-issue since the forc <SUBCOMMAND> --help output behaves in a predictable manner.",3,8
1549,2022-05-14T19:40:24Z,2022-05-26T18:14:37Z,2022-05-26T18:14:37Z,2,192,77,"This implements shifting for the b256 type by:

decomposing a b256 into 4 u64s
shifting each word in turn and preserving the overflow if any
adding to each shifted word the overflow from the word to the right (for shl) or the word to the left(for shr)
recomposing the 4 words into a single b256

Todo:

 add tests",2,0
1554,2022-05-16T01:47:43Z,2022-05-16T03:20:04Z,2022-05-16T03:20:04Z,2,99,2,"This PR implements the Ord trait for b256, allowing users to use gt and lt for b256s.
It also implements the OrdEq trait for completeness.
The algorithm used to compare lt and gt decomposes each of the b256s into 4 words and compares each corresponding word, respecting the relative place value of each word.",3,0
1559,2022-05-16T11:38:03Z,2022-05-17T21:25:41Z,2022-05-17T21:25:41Z,31,119,175,"This is useful for abstracting over types that have a Span, for instance in #1518.",4,3
1566,2022-05-16T20:34:53Z,2022-05-17T00:18:22Z,2022-05-17T00:18:22Z,7,89,4,"As discussed #1368, strings are reference types regardless of their size. Treat constant strings as such. This fixes a situation where returning a struct that contains a string fails.",2,0
1569,2022-05-17T07:23:55Z,2022-05-17T10:40:53Z,2022-05-17T10:40:53Z,3,45,2,"Fixes CI not installing mdbook-forc-documenter as a preprocessor before trying to do mdbook build, which ended up creating empty Forc command pages.",2,5
1572,2022-05-17T16:21:49Z,2022-05-19T01:44:43Z,2022-05-19T01:44:43Z,9,71,65,"This PR

uses the __is_reference_type and __size_of intrinsics to use either log or logd internally.
deprecates the type-specific log functions, ie: log_u64, log_b256, etc
Adds a logging module and reorgs the lib a little to bypass this blocker: #409
preserves a bare chain module to prevent breaking everything that uses chain/auth (this feels a bit hacky... probably better to keep it clean, remove the chain mod and force users to update the path.)

close #1358
close #823",4,3
1573,2022-05-17T17:37:34Z,2022-05-18T21:31:50Z,2022-05-18T21:31:50Z,8,96,0,"All in the title.
close #1532",4,1
1575,2022-05-17T19:08:51Z,2022-05-20T08:18:02Z,2022-05-20T08:18:02Z,41,233,78,"closes #884.
Possible testing steps
Since this PR touches a lot of files (with little adjustments), I am providing testing steps and outputs that cover all changed files. I tried to supply raw text outputs as much as possible but in some places, photos are used to preserve colors as well.

  forc:


forc - testing steps


forc init - success:

Run cargo run --bin forc --init example_prog



Output before tracing:



Output after tracing:






forc init - error:

Run cargo run --bin forc -- init --template error example_prog



Output before tracing:
Error: Failed to initialize project from a template with the given name ""error"": https://api.github.com/repos/FuelLabs/sway/contents/examples/error: status code 404.
  Note: If you are attempting to initialize this project from a Sway example, please ensure the template name matches one of the available examples.
- asm_return_tuple_pointer
- counter
- fizzbuzz
- hashing
- liquidity_pool
- match_statements
- msg_sender
- native_token
- signatures
- storage_example
- subcurrency
- wallet_smart_contract





Output after tracing:
Error: Failed to initialize project from a template with the given name ""error"": https://api.github.com/repos/FuelLabs/sway/contents/examples/error: status code 404.
  Note: If you are attempting to initialize this project from a Sway example, please ensure the template name matches one of the available examples.
- asm_return_tuple_pointer
- counter
- fizzbuzz
- hashing
- liquidity_pool
- match_statements
- msg_sender
- native_token
- signatures
- storage_example
- subcurrency
- wallet_smart_contract







  forc-fmt:


forc-fmt - testing steps


forc-fmt in the root directory (outside of a sway project):

Run cargo run --bin forc-fmt



Output before tracing:
Error: Manifest file does not exist



Output after tracing:
Error: Manifest file does not exist






forc-fmt in an example sway project directory:

Run cargo run --bin forc -- init example_prog
Run cargo run --bin forc-fmt -- --path example_prog
Run cargo run --bin forc-fmt -- --path example_prog --check



Output before tracing:
Manifest Forc.toml properly formatted



Output after tracing:
Manifest Forc.toml properly formatted





  forc-explore:


forc-explore - testing steps


forc-explore - success

Run cargo run --bin forc-explore



Output before tracing:
Fuel Network Explorer 0.1.1
Running server on http://127.0.0.1:3030



Output after tracing:
Fuel Network Explorer 0.1.1
Running server on http://127.0.0.1:3030
Server::run{addr=127.0.0.1:3030}: listening on http://127.0.0.1:3030






forc-explore - error

Run cargo run --bin forc-explore on a second terminal
Run cargo run --bin forc-explore on the main terminal



Output before tracing:
Fuel Network Explorer 0.1.1
Running server on http://127.0.0.1:3030
thread 'main' panicked at 'error binding to 127.0.0.1:3030: error creating server listener: Address already in use (os error 48)', /Users/kayagokalp/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.3.2/src/server.rs:213:27
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace



Output after tracing:
Fuel Network Explorer 0.1.1
Running server on http://127.0.0.1:3030
thread 'main' panicked at 'error binding to 127.0.0.1:3030: error creating server listener: Address already in use (os error 48)', /Users/kayagokalp/.cargo/registry/src/github.com-1ecc6299db9ec823/warp-0.3.2/src/server.rs:213:27
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace",2,1
1576,2022-05-17T20:11:47Z,2022-05-17T22:17:52Z,2022-05-17T22:17:52Z,7,61,14,"This switches the function names in core/num to use snake_case, and adds tests for the numeric constants.",3,0
1581,2022-05-18T07:03:16Z,2022-05-18T08:33:47Z,2022-05-18T08:33:48Z,9,114,86,"Closes #1327.
Turns out unification was already catching this, but the produced error
was never returned from the trait impl checking function :D
It looks like a new Vec was introduced at one point to collect errors
in order to work around ownership issues involved with some fancy uses
of iter().find_map(), however these errors were never collected from
the outer scope. I've refactored this section to use basic for loops and
control flow instead which makes it easier for Rust to reason about
ownership over the top-level errors Vec and reduces the need for the
extra error-collecting Vecs.
Also adds two new should_fail tests to verify that we produce errors
when argument types differ between implementation and trait/abi
declaration.",2,1
1582,2022-05-18T08:03:16Z,2022-05-23T03:12:53Z,2022-05-23T03:12:54Z,17,336,133,"Closes #1295 #1220
This PR documents Forc native plugins within the Sway book: namely fmt, explore, and lsp
Points to note:

Includes some refactoring from the previous mdbook-forc-documenter PR to have better separation of concerns
Support parsing of subcommand help text - previously within forc-documenter, native commands had no subcommands. forc-explore has the clean subcommand and this PR includes code to handle parsing subcommands.

P.S.: Note that the new .md files will be file stubs due to mdbook link preprocessor requiring them to work - to see the actual html output, please pull from this branch and do cargo install --path scripts/mdbook-forc-documenter/ && mdbook build docs --open
The plugins will appear as new sub-chapters under 6.4 Plugins.",4,2
1586,2022-05-18T14:36:49Z,2022-05-18T17:58:26Z,2022-05-18T17:58:26Z,11,1539,1487,Refactoring for readability and maintainability,2,0
1587,2022-05-18T15:03:07Z,2022-05-19T14:03:43Z,2022-05-19T14:03:43Z,16,61,61,"Pending PRs:

 #1573
 #1572
 #1558
 #1544
 #1606
 #1518
 #1420
 #1610",2,3
1588,2022-05-18T15:12:46Z,2022-05-18T19:28:16Z,2022-05-18T19:28:16Z,7,284,151,This is built off of #1586,3,2
1589,2022-05-18T15:45:15Z,2022-05-19T21:09:54Z,2022-05-19T21:09:54Z,16,363,309,"This is built off of #1588
This replaces all instances of the manual implementation of copy_types with the CopyTypes trait.",3,1
1590,2022-05-18T15:58:40Z,2022-05-19T23:03:40Z,2022-05-19T23:03:40Z,9,60,38,"This is built off of #1589
This replaces all the instances of the manually hardcoded type_id with the CreateTypeId trait",3,0
1591,2022-05-18T16:08:41Z,2022-05-21T12:31:16Z,2022-05-21T12:31:16Z,5,108,36,"This is built off of #1590
This change replaces all of the instances of monomorphize_inner with the MonomorphizeHelper trait.",4,0
1592,2022-05-18T17:17:11Z,2022-05-23T19:37:34Z,2022-05-23T19:37:35Z,32,955,880,"This is based off of #1591
This PR introduces the Monomorphization trait, which replaces all instances of the monomorphization function across TypedFunctionDecl, TypedEnumDecl, and TypedStructDecl. It brings standardization to monomorphization.

Closes #1525
Closes #1556
Closes #1643",2,0
1594,2022-05-18T18:35:03Z,2022-05-23T23:42:16Z,2022-05-23T23:42:16Z,17,183,181,"This is built off of #1592
Allows you to create patterns like:
let e = (
    (1, 2),
    (
        (3, 4),
        5
    )
);
let f = match e {
    ((3, _), _) => { 99 },
    (_, (_, 5)) => { 42 },
    _ => { 0 },
};
Closes  #1449",2,0
1595,2022-05-18T19:14:24Z,2022-05-20T16:59:34Z,2022-05-20T16:59:34Z,7,153,66,"Parsing where clauses was not complete. Finishing that and adding some error handling.
Also, changing the ""where clauses are not supported"" to an actual compiler error as the current internal error asks users to file an issue. This is all temporary anyways. We will start removing the errors one by one as we introduce support for where.
Tests will be added with a follow up change handling semantic analysis.",4,0
1596,2022-05-18T19:34:10Z,2022-05-24T16:04:14Z,2022-05-24T16:04:14Z,36,1582,840,"This is built off of #1594
This PR introduces these functions:

instantiate_enum
instantiate_function_application
instantiate_function_application_simple
instantiate_if_expression
instantiate_lazy_operator
type_check_method_application
instantiate_struct_field_access
instantiate_tuple_index_access

Which are used to standardize all instantiations of:

TypedExpressionVariant::EnumInstantiation
TypedExpressionVariant::FunctionApplication
TypedExpressionVariant::IfExp
TypedExpressionVariant::LazyOperator
TypedExpressionVariant::StructFieldAccess
TypedExpressionVariant::TupleElemAccess

This is done in this PR because it aids the match expression desugaring algorithm in creating these values, and it adds standardization to the compiler, adding readability and maintainability.
This PR moves the location of match expression desugaring to during type checking. At this point, nothing has changed for the user, in terms of the language features.",3,1
1599,2022-05-18T20:48:10Z,2022-05-19T03:01:28Z,2022-05-19T03:01:28Z,12,40,26,"Close #1597
I opted to follow the established naming of min & max, rather than something like zero & full / saturated.",3,1
1600,2022-05-18T20:55:15Z,2022-05-25T15:34:19Z,2022-05-25T15:34:20Z,15,539,0,"Fixes #1478
Blocked by

 FuelLabs/fuel-vm#121
 #1604

Soft-blocked by FuelLabs/fuel-tx#129, until which tests will quickly run out of gas. The current limit of 1M gas is hit after 4 multiplications or 2 divisions.
Implements https://en.wikipedia.org/wiki/Division_algorithm#Integer_division_(unsigned)_with_remainder for division.",5,0
1603,2022-05-19T01:59:52Z,2022-05-19T04:49:50Z,2022-05-19T04:49:50Z,3,31,2,"Closes #1598
When checking for "" we should check if the previous char is a (, and append without whitespace if it is.",3,0
1604,2022-05-19T03:52:04Z,2022-05-19T11:19:25Z,2022-05-19T11:19:26Z,4,18,18,"Shiftable shouldn't be restricted to only shifting by the same type. This seems fine for primitive unsigned integers, but e.g. for a U128 type or potentially some string type then it doesn't make sense to shift by that type.",4,2
1606,2022-05-19T07:28:15Z,2022-05-19T12:21:37Z,2022-05-19T12:21:38Z,5,690,213,Closes #1552,3,2
1607,2022-05-19T10:08:53Z,2022-05-20T06:13:32Z,2022-05-20T06:13:32Z,2,10,0,"closes #1308.
With this implementation if --url is specified, forc deploy passes that url to FuelClient::new() and --url  overrides other URL options which means:

If url is specified and there is a url in the [network] section of Forc.toml, forc deploy deploys to the specified url.
If url is specified and there is no url in the [network] section of Forc.toml, forc deploy deploys to the specified url rather than the DEFAULT_NODE_URL.
If url is not specified and there is a url in the [network] section of Forc.toml, forc deploy deploys to the url in the Forc.toml [network] section.
If url is not specified and there is no url in the [network] section of Forc.toml, forc deploy deploys to the DEFAULT_NODE_URL.

Testing Steps

Run fuel-core with a different port (default is 4000). (cargo run --bin fuel-core -- --db-type in-memory --port 7000)
Run forc deploy in an example project with --url http://127.0.0.1:7000",2,0
1611,2022-05-19T16:06:39Z,2022-05-20T11:43:45Z,2022-05-20T11:43:46Z,7,69,4,"Fixes the issue flagged by @AlicanC in #1602
The symptom is an issue in the final asm generator. The reason being a missing ret for an implicit return in the user code. Basically, the check in 
  
    
      sway/sway-core/src/optimize.rs
    
    
         Line 337
      in
      6eef7ab
    
  
  
    

        
          
           || compiler.current_block.num_predecessors(context) > 0 
        
    
  

 fails, and so, we don't create a ret. Turns out that the number of predecessor blocks is incorrectly calculated (should be 1 instead of 0 for the example that JC provided).",3,0
1613,2022-05-19T17:33:23Z,2022-05-20T01:55:03Z,2022-05-20T01:55:03Z,3,61,25,"Previously inside the IR, code blocks did not have an idea of scoping, meaning that match expressions, if expressions, etc, were leaking values to outside of their scope. This PR changes this.",4,0
1614,2022-05-19T21:21:42Z,2022-05-23T23:47:41Z,2022-05-23T23:47:42Z,13,247,398,"closes #1380
This PR introduces forc template and removes forc init --template. forc template currently takes the following inputs:

--url : git repo URL
--project-name : name of the project
 --template-name : (optional) if specified provided name is searched in the repo. (for example counter example can be searched in sway repo)

The current implementation fetches the HEAD of the default branch of the repo URL.
Example Usage
forc template --project-name test_project --url https://github.com/FuelLabs/sway --template-name counter
forc template --project-name test_project --url https://github.com/owner/repo

Testing Steps
cargo run --bin forc template --project-name test_project --url https://github.com/FuelLabs/sway --template-name counter : should result in a new folder created ""test_project"" with counter example inside it. Also, the forc.toml will be edited.
cargo run --bin forc template --project-name test_project --url https://github.com/FuelLabs/sway : should result in an error since there is no Forc.toml in the root. (Because there is no Forc.toml in the root and no template name is provided which means the template should be in the root directory).
I am leaving this as a draft since there might be some other desired behavior.",4,3
1615,2022-05-19T21:43:07Z,2022-05-20T01:54:42Z,2022-05-20T01:54:42Z,7,99,9,"Closes #1601
We previously were not differentiating between different impl selves in a single file for node_dependencies, which determines order of compilation. This PR includes the function names, concatenated, as an additional source of distinction for these impl self blocks. This allows us to disambiguate. I also included this disambiguation for impl trait blocks, although it isn't strictly necessary, for consistency.",2,0
1622,2022-05-20T14:28:48Z,,2022-06-14T17:55:00Z,32,488,48,"🚨  THIS IS A DRAFT FOR EARLY FEEDBACK ONLY AND IS FAR FROM DONE 🚨
Meant to close #1399 and also implement Mapping.
Blockers:

 #1159 to be able to see impl<K, V> Mapping<K, V> where V: Storable
 #1143 to be able to have Mapping to not need to use K and V in its data members.",3,3
1625,2022-05-20T18:49:09Z,2022-05-20T20:41:19Z,2022-05-20T20:41:19Z,11,128,134,Bumps the SDK version in the stdlib test suite,3,1
1627,2022-05-22T06:31:40Z,,2022-06-15T15:47:44Z,12,406,10,"This adds two new libraries to sway-lib-std: alloc and ptr.
I needed these for my work on the Multicall script and just wanted to send them upstream. (Though it's not very usable ATM for me because of an issue.)

Adds alloc::alloc, alloc::realloc
Adds intrinsics::size_of_val, intrinsics::addr_of, intrinsics::copy, intrinsics::raw_eq
struct RawPointer for unsafely working with memory",5,17
1630,2022-05-22T18:07:34Z,2022-05-22T19:59:58Z,2022-05-22T19:59:58Z,2,6,3,The updated version current always returns zero. See FuelLabs/fuel-vm#125,2,0
1632,2022-05-22T20:28:58Z,2022-05-24T01:48:00Z,2022-05-24T01:48:00Z,15,182,0,"Closes #1631

Update the JSON ABI file to handle arrays: insert their element types in the ""components"" section. Example:
If [Person; 2] is an argument to a contract method where Person is defined as struct Person { name: str[4] }, then the corresponding JSON ABI entry looks like:

{
        ""name"": ""param1"",
        ""type"": ""[struct Person; 2]"",
        ""components"": [
          {
            ""name"": ""__array_element"",
            ""type"": ""struct Person"",
            ""components"": [
              {
                ""name"": ""name"",
                ""type"": ""str[4]"",
                ""components"": null
              }
            ]
          }
        ]
      },

Update the function selector to take arrays into account. Arrays are represented as a[<type>;<size>].

Both of these things should be documented in the specs. Created an issue here: FuelLabs/fuel-specs#319",3,2
1633,2022-05-22T22:58:03Z,2022-05-23T02:54:03Z,2022-05-23T02:54:03Z,18,164,70,"This PR adds a Span to every TypeInfo::Ref to improve the error UX. Currently, if a type refers to another type via Ref, we use that underlying type as the span for errors and warnings. However, in the case of inference or monomorphized types, we want the call site to be shown. This PR uses spans from the call site preferentially and falls back to declaration spans if there is no Ref type preceding.
Tl;dr, before, the span pointed to the decl:

After:

This helps me a lot with #1628 and #1143, which is why I went ahead and knocked it out.
Closes #1401",2,0
1634,2022-05-22T23:38:55Z,,2022-05-25T17:31:47Z,16,260,68,"Closes #1628
It turns out we forgot to call .monomorphize() on method applications in general, so only functions have been getting monomorphized. This PR fixes that.
edit: Some other things are falling out of this PR, putting it into a draft while I do some more construction. 🚧",3,3
1640,2022-05-23T15:42:22Z,2022-05-24T12:51:36Z,2022-05-24T12:51:37Z,1,8,6,"Predicates are the same as scripts, with the unique characteristic that the type system checks that the main function returns a boolean. There are also some opcode checks at the end. IR doesn't need to know about any of this, so we can reuse compile_script, as predicates are essentially a subset of scripts with some special properties.
Closes #1641",4,0
1642,2022-05-23T16:13:03Z,2022-05-25T21:39:56Z,2022-05-25T21:39:57Z,54,1524,1431,"This is based on #1596
This PR:


Introduces the EnumTag { exp } typed expression variant. EnumTag is used to retrieve the tag of the enum variant that exp is and is used in comparisons for comparing match arms. This operation existed previously in the compiler, during IR gen for if-lets, but this PR brings this concept to the expression level.


Introduces the UnsafeDowncast { exp, variant } typed expression variant. UnsafeDowncast performs an unsafe downcast of exp to the type of the variant. UnsafeDowncast is only created in situations in which the compiler can guarantee that before the unsafe downcast is performed, the tags of the enums of checked. i.e. a number of UnsafeDowncasts may be emitted during codegen, but none will be triggered unless their enum tag check precursor passes. This operation existed previously in the compiler, during IR gen for if-lets, but this PR brings this concept to the expression level.


EnumTag and UnsafeDowncast work together directly. For example:
enum Data {
  A: bool,
  B: u64,
}

let x = Data::A(true);

match x {
  Data::A(false) => { .. },
  Data::A(b) => { .. },
  Data::B(n) => { .. },
  _ => { .. }
}
Would generate (in pseudocode):
if (x as tag) == (Data::A as tag) && true == false {
  ..
} else if (x as tag) == (Data::A as tag) {
  let b = (x as Data::A);
  ..
} else if (x as tag) == (Data::B as tag) {
  let n = (x as Data::B);
  ..
} else {
  ..
}

Changes the Scrutinee::EnumScrutinee { variable_to_assign, .. } to Scrutinee::EnumScrutinee { value, .. } and updates the corresponding EnumScrutinee type checking.
Updates the ConstructorFactory type to take the TypeId of the parent type (the type being matched upon). It uses this TypeId to find the needed TypeInfo for performing match exhaustivity checking.
Changes if lets to desugar to match expressions, at parse time.
Removes the stale IfLet code.

Note that this PR disables 2 of the IR unit tests. This is because the IR unit test infra is not set up to allow the use of core::ops::eq, which is needed for comparing branches of a match statement. There is an issue for tracking the re-introduction of these tests: #1648 . Importantly, it should not be normal practice to disable failing tests. This decision was made after careful consideration of other options, and it was decided that allowing enums in matches before the Hackathon was important.

Closes #579
Closes #609",3,0
1647,2022-05-23T23:39:06Z,2022-05-25T13:41:14Z,2022-05-25T13:41:14Z,6,63,23,Simple PR to add booleans as a keyword in the parser,5,8
1653,2022-05-24T14:08:20Z,2022-05-25T17:11:34Z,2022-05-25T17:11:34Z,9,130,42,This is similar to #1632 but for Tuples. No changes needed for the function selector.,3,0
1654,2022-05-24T15:31:41Z,2022-05-25T14:54:03Z,2022-05-25T14:54:04Z,6,39,19,"Closes #1650
Bumping fuel-asm is necessary to get FuelLabs/fuel-asm#66.
Example of what we now see:
  half-word   byte   op                raw           notes
          0   0      JI(4)             90 00 00 04   jump to byte 16
          1   4      NOOP              47 00 00 00
          2   8      Undefined         00 00 00 00   data section offset lo (0)
          3   12     Undefined         00 00 00 44   data section offset hi (68)
          4   16     LW(63, 12, 1)     5d fc c0 01
          5   20     ADD(63, 63, 12)   10 ff f3 00
          6   24     LW(16, 63, 0)     5d 43 f0 00
          7   28     JNZI(16, 9)       73 40 00 09   conditionally jump to byte 36
          8   32     JI(13)            90 00 00 0d   jump to byte 52
          9   36     LW(16, 63, 1)     5d 43 f0 01
...",2,0
1658,2022-05-24T23:19:25Z,2022-05-25T03:08:42Z,2022-05-25T03:08:42Z,2,6,0,This was generating a bunch of additional warnings about how it can't find core::ops::eq and I forgot to add the dependency in the test cases where failure is expected.,3,0
1660,2022-05-25T10:54:55Z,2022-05-25T16:30:18Z,2022-05-25T16:30:18Z,1,158,109,"This PR fixes two places in the parser where precedence was wrong, or at least didn't match what rust does.
Firstly, brace-postfixed expressions (ie. { ... }/if x { .. }/match x { ... }/while x { ... })  have low precedence if they appear at the start of a statement. This means that is no longer accepted:
fn foo() -> u32 {
    if true { 1 } else { 2 } + 3
}

but this still is:
fn foo() {
    let bar = if true { 1 } else { 2 } + 3;
}

Secondly, comparison operators can longer be chained together. This means that x < y < z is now a parse error rather than being parsed as (x < y) < z.",4,1
1662,2022-05-25T11:35:25Z,2022-05-25T15:39:42Z,2022-05-25T15:39:42Z,2,32,28,"Closes #1659
New colors",2,0
1666,2022-05-25T13:52:29Z,2022-05-25T14:55:58Z,2022-05-25T14:55:58Z,9,30,138,Non-functional change.,3,0
1668,2022-05-25T16:19:57Z,2022-05-25T22:01:21Z,2022-05-25T22:01:21Z,16,61,61,"Waiting on:

 #1642",3,1
1669,2022-05-25T17:04:43Z,,2022-06-29T20:41:33Z,19,285,125,"Description

This PR changes forc init to forc new, and updates forc init functionality to be more similar to cargo init

Testing steps

 Try pulling down the PR and creating a forc init project with combinations of the different flags


Read the Docs:

Sway Book: https://fuellabs.github.io/sway/latest
Rust SDK Book: https://fuellabs.github.io/fuels-rs/latest
TypeScript SDK: https://github.com/FuelLabs/fuels-ts

Join the Community:

Follow us @SwayLang: https://twitter.com/SwayLang
Ask questions in dev-chat on Discord: https://discord.com/invite/xfpK4Pe

Report Bugs:

Sway Issues: https://github.com/FuelLabs/sway/issues/new add",4,1
1671,2022-05-25T17:31:30Z,,2022-06-07T00:55:30Z,17,319,76,"We were not monomorphizing method applications at all. This PR fixes that. This change was made much easier by #1589  and #1666
Closes #1628
This PR works by monomorphizing declarations when methods are instantiated against them.  This now means that you can annotate types for a parent type and a function, like Rust.
So, this example works:
struct Foo<T> {
  a: T
}
impl <T> Foo {
   fn bar<O>(o: O) -> u64 {
     5
  }
}
fn main() {
      // note the annotation `u64` for `Foo` and `bool` for `bar()`
    Foo::<u64>::bar::<bool>(true)
}
This involved changes to the parser to allow generic arguments in the new position and calling monomorphize on declarations when methods are instantiated. All the other changes are just fallout from those two things.
edit: some interaction with recent PRs has broken some tests, moving to draft while that gets sorted out...",4,1
1675,2022-05-25T23:11:28Z,2022-05-26T00:39:08Z,2022-05-26T00:39:08Z,1,0,9,"undo a previous change which pointed the docker image to a non-existent registry
also removed unneeded cache step since it's already using gha",2,1
1676,2022-05-26T00:14:24Z,2022-05-26T13:17:55Z,2022-05-26T13:17:55Z,1,8,0,"I noticed that we iterate through every implemented trait and method if the type is in error recovery, which is guaranteed to fail. This is just a small performance boost for the error recovery case.",2,1
1677,2022-05-26T02:15:21Z,2022-05-26T20:18:38Z,2022-05-26T20:18:38Z,1,21,4,"The language server was collecting operators such as + - / and *. However, these were getting stored as plus divide etc.. leading to an attempt to subtract with overflow bug when calculating the character length of the collected token.
This PR removes the collection of operators which fixes a bug where the language server was crashing in the swayswap and liquidity_pool examples.",3,0
1678,2022-05-26T03:23:37Z,2022-05-26T05:09:16Z,2022-05-26T05:09:16Z,1,14,5,"See @canndrew's explanation here for more context on why this was originally causing our bug.
closes #1385
closes #1395",2,0
1683,2022-05-26T13:15:48Z,2022-05-26T15:25:39Z,2022-05-26T15:25:39Z,22,274,141,Supersedes #1621,2,0
1684,2022-05-26T13:21:04Z,2022-05-26T21:25:56Z,2022-05-26T21:25:56Z,6,102,73,"This is another PR coming out of #1671
I noticed that we have two modes of method name, FromType and FromModule. In the FromType case, a provided type is optional as is a span. So, it looks like this:
enum MethodName { 
  FromType { type_info: Option<TypeInfo>, type_span: Option<Span>, method_name: ... }
}

Those two options either must both be defined or neither should be defined. This means that our type system is not defending us from the case of one being undefined.
To remove this invalid state from the type, I introduced a third variant, which is FromTrait. That allows you to reference a trait function directly from the module it was implemented in. This is what the behavior was previously if those two Options were None, but now it is made explicit with a third variant. This variant is primarily used for core::ops:: stuff.
Also, when I ran the test suite, a lockfile got updated. I went ahead and included that as it needs to be done anyway...can put in a separate PR if y'all feel that's better, though.",3,4
1686,2022-05-26T15:31:41Z,2022-06-02T06:00:39Z,2022-06-02T06:00:40Z,2,177,33,"I will be simplifying and refactoring the code a little bit more so leaving this as a draft for now.
closes #900.
About the PR
Before this PR, forc was re-fetching all the dependencies once there is a mismatch between the lock file and the manifest.
For more context about the implementation please take a look into the discussion at the #900 and particularly this comment.
Basic Overview of What is Happening

Removed and added dependencies are detected
Removed dependencies handled by doing a BFS from the project node. Searching for detected removed dependencies and children of the removed dependencies (given that no other node depends on them) in the order of the breadth-first traversal.
Added dependencies handled by first connecting the added dependency to the root node and then recursively fetching_children for the dependencies of the newly added dependency while checking if any dependency of the newly added dependency is already fetched.

To test:

forc init --library child
forc init parent
forc build in the parent directory to build it before depending on the child.
add the ""child"" library as a dependency for the ""parent""
forc build in the ""parent"" directory

This test procedure will be resulting in the following dependency graph:",3,3
1687,2022-05-26T16:20:41Z,2022-05-26T18:53:57Z,2022-05-26T18:53:57Z,39,34,146,Tests that weren't actually using the SDK for anything don't need to be in the SDK harness.,3,3
1688,2022-05-26T16:56:47Z,2022-05-27T02:19:16Z,2022-05-27T02:19:16Z,25,317,5,"This is a simple intrinsic that hands out b256 keys. This is useful for mappings as shown in #1622 as mappings need a seed key that is hashed with user keys when calling insert() and get().
The intrinsic needs to be in IR because it can only be resolved after function inlining, that is, after the IR pipeline.
Long term, I imagine these intrinsics to be in their own category, both in semantic analysis and in IR. So, that should be cleaned up eventually.",4,0
1701,2022-05-26T21:44:09Z,,2022-05-26T22:51:55Z,1,2,2,"Building Forc projects is very slow with debug, so turn on release.",2,1
1707,2022-05-27T00:21:08Z,2022-06-11T01:24:27Z,2022-06-11T01:24:28Z,198,1577,168,"poor performance due, OutOfGas trying to increment anything over 1000,000,000,000,000,000
Next iteration will use U128::overflowing_add()

New implementation uses overflowing_add modelled on the similar function in std::U128
I had to make compose / decompose functions public for this, but opened a related issue to clean that up here: #1718
ideally, disable_overflow() and enable_overflow() would be extracted into a central location where they can be reused by other modules. This can be tackled in another PR, and is already tracked as a task in #1074",3,3
1708,2022-05-27T01:56:29Z,2022-05-27T03:51:53Z,2022-05-27T03:51:53Z,1,6,9,Bump fuels-rs forc init to 0.14,2,0
1712,2022-05-27T02:49:48Z,2022-06-01T01:24:40Z,2022-06-01T01:24:40Z,37,881,1149,"Closes #1578.
Change Highlights
sway-parse
This renames the old sway_parse::Program type to sway_parse::Module in order to better reflect its behaviour of parsing individual modules.
sway-core parse_tree
This removes the old SwayParseTree type in favour of parse_tree::{ParseModule, ParseProgram} types. The ParseModule represents the full module tree, while the ParseProgram holds a handle to the root module along with the top-level program kind (still named TreeType).
The parse function has been refactored to parse not only the root module, but all submodules as well. It now returns a ParseProgram representing the entire parsed project.
sway-core semantic_analysis::syntax_tree
The old TypedParseTree has been removed in favour of TypedModule and TypedProgram. TypedModule is very similar to the old TypedParseTree type, but also holds a tree containing its typed submodules.
The import_new_file and compile_inner_dependency functions were no longer needed now that parsing of submodules happens prior to type checking (rather than during). Now, all submodules are type-checked during TypedModule::type_check.
Control flow analysis
Now that the returned TypedProgram contains not only the root module but submodules too, the control flow anlaysis can be conveniently performed following type checking in a dedicated step. The perform_control_flow_analysis function was refactored to operate on the entire TypedProgram rather than just the TypedParseTree which only represented a single module.
TypeCheckArguments
Now that dead_code_graph (required for control flow analysis) and build_config (required for parsing submodules) are no longer required during type checking, they've been removed from the TypeCheckArguments and all associated semantic analysis code.",4,5
1716,2022-05-27T07:58:27Z,2022-06-11T06:06:01Z,2022-06-11T06:06:01Z,65,1587,758,"In particular, locate storage ASM operations and confirm the enclosing function has the correct storage attributes.
I spent/wasted a couple of days trying to make this more efficient by annotating the AST as we build it so we don't need to search it like this does, but I simply couldn't make it work in a non-hacky way with our current data structures.  Perhaps the proposed big refactor we have planned might allow it to happen, dunno.
Closes #1151.
Closes #1183.
Update:
This has taken me five different attempts:

Recurse through the typed tree gathering errors.  Was almost working but needed data structure tweaks to get the errors correct.
Simplify by iterating over IR instructions from the compiled program.  Was ugly and didn't fit -- this is a semantic check which belongs more in the front end.
Try again but with the untyped parse tree which is a less complex data structure.  Was unable to follow function calls because they aren't inlined yet.
Back to 1) with the typed tree, but found that parts of the tree e.g., impl methods, are still untyped parse tree nodes, so would require recursion code for both types of tree, which seemed ridiculous.
Back to 2) but from within the front-end as a semantic check, but performed after IR is compiled. i.e., the purity check itself is not in the IR library but back in sway-core.

Also...
Two remaining issues: I had to allow storage ops in libraries as mentioned in #1151.  I've also disabled a couple of E2E tests because they try to run contracts which have storage ops, so similarly to the library issue, it complains about storage ops in a script.
These restrictions need to be loosened somehow.
Also the formatter can't handle attributes.",5,4
1717,2022-05-27T11:48:11Z,2022-05-27T21:03:46Z,2022-05-27T21:03:46Z,1,32,5,"closes #1260.
Output for the example program posted in the issue:

forc run --pretty-print

[
  {
    ""LogData"": {
      ""data"": ""ef86afa9696cf0dc6385e2c407a6e159a1103cefb7e2ae0636fb33d3cb2a9e4a"",
      ""digest"": ""be240c408b034a8f3e67813d85c05d5379e02c17d4012440a4bf73450aa8935d"",
      ""id"": ""0000000000000000000000000000000000000000000000000000000000000000"",
      ""is"": 10352,
      ""len"": 32,
      ""pc"": 10416,
      ""ptr"": 10488,
      ""ra"": 0,
      ""rb"": 0
    }
  },
  {
    ""Return"": {
      ""id"": ""0000000000000000000000000000000000000000000000000000000000000000"",
      ""is"": 10352,
      ""pc"": 10424,
      ""val"": 0
    }
  },
  {
    ""ScriptResult"": {
      ""gas_used"": 435,
      ""result"": ""Success""
    }
  }
]


forc run

[{""LogData"":{""data"":""ef86afa9696cf0dc6385e2c407a6e159a1103cefb7e2ae0636fb33d3cb2a9e4a"",""digest"":""be240c408b034a8f3e67813d85c05d5379e02c17d4012440a4bf73450aa8935d"",""id"":""0000000000000000000000000000000000000000000000000000000000000000"",""is"":10352,""len"":32,""pc"":10416,""ptr"":10488,""ra"":0,""rb"":0}},{""Return"":{""id"":""0000000000000000000000000000000000000000000000000000000000000000"",""is"":10352,""pc"":10424,""val"":0}},{""ScriptResult"":{""gas_used"":435,""result"":""Success""}}]",3,5
1720,2022-05-27T13:00:07Z,2022-05-28T15:25:25Z,2022-05-28T15:25:25Z,4,6,3,"closes #1719.
and related to #1702.
Testing Steps

Run SWAY_TEST_VERBOSE=1 cargo run --locked --release --bin test
Run cargo run --locked --release --bin test",4,0
1727,2022-05-27T14:49:53Z,2022-05-27T16:32:34Z,2022-05-27T16:32:34Z,1,69,7,Closes #1635,2,0
1728,2022-05-27T15:23:31Z,2022-05-27T17:19:01Z,2022-05-27T17:19:01Z,2,16,6,"Closes #1726

Added an important warning for changing chapter names of Commands and/or Plugins within the book, in docs/README.md
Added previously missing instructions in scripts/mdbook-forc-documenter/README.md on adding plugins, including instructions for CI",2,0
1729,2022-05-27T16:39:26Z,2022-05-27T19:41:49Z,2022-05-27T19:41:49Z,1,12,6,,2,0
1732,2022-05-27T17:06:59Z,2022-05-27T18:42:26Z,2022-05-27T18:42:26Z,4,29,38,"This PR changes any instance of a if let .. { .. } else { .. } in the standard library to use match expressions. This is done for readability, maintainability, and to make it future-proof.
To be clear, this change is not necessary, nor will cause any user-facing changes to the standard library. This is simple a refactoring to improve code quality---the _ branch now clearly exists visually, for if it needs to be used.",3,0
1736,2022-05-27T17:30:18Z,2022-05-27T18:41:18Z,2022-05-27T18:41:19Z,6,63,34,,2,0
1741,2022-05-28T00:20:14Z,2022-05-29T00:04:20Z,2022-05-29T00:04:20Z,1,26,3,"This works, although without #1742 users will still have to install openssl (they would have to do that anyways if compiling from source so it's not a regression in that sense).",2,1
1744,2022-05-28T13:54:56Z,2022-05-28T15:39:42Z,2022-05-28T15:39:42Z,11,273,0,closes #1273,4,1
1745,2022-05-28T14:04:57Z,2022-05-28T15:05:45Z,2022-05-28T15:05:45Z,1,42,30,Also closes #1605,3,0
1746,2022-05-28T14:25:11Z,2022-05-28T17:28:04Z,2022-05-28T17:28:05Z,12,320,122,"The type parameters in TypeInfo::Struct and TypeInfo::Enum were not being resolved properly.
This PR:

Fixes the bug where type parameters in structs and enums were not being resolved properly. This bug fix is critical for  #1143 and #1118
Updates the definition of Eq on TypeInfo to consider the type parameters, as the invariant from Hash to Eq had previously been broken. This will also be critical for  #1143 and #1118 as it affects how methods for types are looked up inside the namespace
Updates the way that types are displayed to the user, such that the only types that appear in <..> in Name<..> are the type parameters for Name
Fixes the bug where you couldn't have a generic struct as a field in another generic struct #1116
Fixes the bug where nested generic functions were not resolving types properly #1734


Closes #1738
Closes #1116
Closes #1734",2,0
1750,2022-05-28T17:39:59Z,,2022-06-16T16:11:06Z,9,517,0,"Untested! But it builds
This code is copied from the previously failing case: https://github.com/FuelLabs/sway/blob/906903aa247d21f1fdf6334e49f16f54c6b40372/sway-lib-std/src/vec.sw",4,5
1751,2022-05-28T17:57:20Z,2022-05-28T19:20:44Z,2022-05-28T19:20:45Z,2,59,57,This should get merged after v0.14.3 is published.,2,0
1754,2022-05-28T19:16:53Z,2022-05-29T17:33:25Z,2022-05-29T17:33:25Z,7,1404,1,"The implementation is actually quite simple and relies on the __generate_uid() intrinsics which returns a unique b256 seed for every StorageMap that gets initialized via new(). Note that new() has to be called for each map once as shown in the test.
Remaining tasks:

 Docs: #1760",5,1
1758,2022-05-29T13:36:33Z,2022-05-30T11:35:18Z,2022-05-30T11:35:18Z,3,45,37,"This PR just adds a new module flags.sw and moves the enable_overflow & disable_overflow functions into it.
One note: the function naming seems slightly off to me.

disable_overflow() is actually used to disable the default ""panic on overflow"" VM behaviour (which in turn enables overflowing to occur and be recorded in $of.
enable_overflow() is actually used to re-enable the default ""panic on overflow"" VM behaviour (which disables overflow from occurring.

Maybe I'm just thinking about this wrong 🤔
An easy fix would be to simply swap the names.",4,2
1760,2022-05-29T15:16:33Z,2022-06-01T14:21:16Z,2022-06-01T14:21:16Z,5,74,2,This is only the first pass. I will do a second pass and clean up the rest of the book and examples as needed in a second PR.,3,1
1762,2022-05-29T17:38:00Z,2022-05-30T00:48:53Z,2022-05-30T00:48:53Z,2,25,0,Closes #1757,2,0
1763,2022-05-29T18:22:28Z,2022-05-29T21:45:41Z,2022-05-29T21:45:41Z,1,6,0,,3,0
1764,2022-05-29T19:39:47Z,2022-05-30T00:26:53Z,2022-05-30T00:26:53Z,1,9,5,"We are currently printing out an empty <>  after every custom type if there are no generics. Previously, we'd print out all the inner fields, but now we are only printing out generics, so this is common:

This PR updates the type printing to omit <> if there are no generics.",2,0
1767,2022-05-30T06:20:05Z,2022-05-30T13:29:31Z,2022-05-30T13:29:32Z,7,44,9,Closes #1665.,2,0
1768,2022-05-30T07:20:50Z,2022-05-31T00:52:52Z,2022-05-31T00:52:52Z,13,218,41,Closes #1584.,2,0
1770,2022-05-30T12:59:24Z,2022-05-30T14:33:34Z,2022-05-30T14:33:34Z,2,5,6,"Now I am going to be perfectly honest here and admit I don't actually know why this works.  @sezna Does this make any sense?
Closes #1682.",2,0
1774,2022-05-31T01:32:28Z,2022-06-02T14:08:41Z,2022-06-02T14:08:42Z,7,130,14,"This PR makes the syntax for creating tuples more specific, where before it was ambiguous is some cases. There are now 4 concrete scenarios:
For example, this Sway code passes:
script;

use std::assert::assert;

struct S {
    t: (u64,)
}

fn main() -> u64 {
    let a = S {
        t: (2,)
    };
    let b = match a {
        S { t } => t,
    };
    assert(b.0 == 2);

    1
}
And this Sway code passes:
script;

use std::assert::assert;

struct S {
    t: (u64)
}

fn main() -> u64 {
    let a = S {
        t: (2)
    };
    let b = match a {
        S { t } => t,
    };
    assert(b == 2);

    1
}
But this Sway code fails:
script;

use std::assert::assert;

struct S {
    t: (u64,)
}

fn main() -> u64 {
    let a = S {
        t: (2)
    };
    let b = match a {
        S { t } => t,
    };
    assert(b == 2);

    1
}
  --> tuple_single_element/src/main.sw:11:13
   |
 9 | 
10 |     let a = S {
11 |         t: (2)
   |             ^ Mismatched types.
expected: (u64)
found:    numeric.
help: Struct field's type must match up with the type specified in its declaration.
12 |     };
13 |     let b = match a {
   |
____

error
  --> tuple_single_element/src/main.sw:16:14
   |
14 | 
15 |     };
16 |     assert(b == 2);
   |              ^^ No method named ""eq"" found for type ""(u64)"".
17 | 
18 |     1
   |
And this Sway code fails:
script;

use std::assert::assert;

struct S {
    t: (u64)
}

fn main() -> u64 {
    let a = S {
        t: (2,)
    };
    let b = match a {
        S { t } => t,
    };
    assert(b == 2);

    1
}
  --> tuple_single_element/src/main.sw:11:12
   |
 9 | 
10 |     let a = S {
11 |         t: (2,)
   |            ^^^^ Mismatched types.
expected: u64
found:    (u64).
help: Struct field's type must match up with the type specified in its declaration.
12 |     };
13 |     let b = match a {
   |

Closes #906",5,2
1776,2022-05-31T03:02:00Z,2022-06-01T11:34:30Z,2022-06-01T11:34:30Z,52,680,354,"The idea is as follows:

Method applications look for a storage index (if applicable): for example storage.map1.insert() will become a FunctionApplication that also knows the index of map1 in the storage block (in method_application.rs).
Add a new metadata to function calls if they have an associated self_state_idx value (in optimize.rs).
The inliner moves that metadata to an intrinsic that (in inliner.rs)
The intrinsic uses the index attached to it as metadata to re-generate the hash and return a b256 as expected from it (in from_ir.rs).

The old intrinsic __generate_uid() is no longer needed. I just replaced it with __get_storage_key().",2,1
1780,2022-05-31T13:20:44Z,2022-05-31T18:43:35Z,2022-05-31T18:43:36Z,1,2,2,closes #1779.,2,0
1783,2022-05-31T21:53:56Z,2022-06-01T02:27:00Z,2022-06-01T02:27:00Z,7,276,35,"This introduces the operators +=, -=, *=, /=, <<=, and >>=. They are implemented as syntactic sugar.
For example this:
let mut counter = 0;
while counter < 10 {
  counter += 1;
}
is desugared to this:
let mut counter = 0;
while counter < 10 {
  counter = counter + 1;
}

Closes #1574",4,4
1788,2022-06-01T06:10:58Z,2022-06-06T03:35:32Z,2022-06-06T03:35:32Z,11,429,348,"This PR allows tuple field projections to be on the left-hand-side of a reassignment.
Closes #905",5,3
1790,2022-06-01T09:36:34Z,2022-06-08T06:14:48Z,2022-06-08T06:14:49Z,240,882,147,"Implements and closes #1789. Also closes #1637.
TODO:

 Disambiguate path dependencies using parent package ID.
 Impl Display and FromStr for PinnedId to convert it to and
from hex for path source string in lock file.
 Address #1637 now to reduce this PR adding even more noise in the
lock file dependencies lists.
 Update lock files of all examples and tests in repository.",3,3
1791,2022-06-01T12:15:04Z,2022-06-02T11:58:20Z,2022-06-02T11:58:20Z,15,168,87,"This PR adds the new type Identity.
From the docs:

//! A wrapper type with 2 variants (Address or ContractId) sed to represent either in a generic way. The use of this type allows for handling interactions with contracts and addresses in a consistent manner.

It:

refactors msg_sender() to use the Identity type in place of the Sender type
deprecates Sender
adds a new mint_to() function to token.sw.
adds tests for mint_to
updates examples to use Identity

closes #1309 (in conjunction with the new matching on enums syntax in the language).",4,3
1793,2022-06-01T14:18:45Z,2022-06-01T20:19:52Z,2022-06-01T20:19:52Z,16,61,61,,2,0
1794,2022-06-01T15:02:15Z,2022-06-02T00:26:23Z,2022-06-02T00:26:23Z,3,12,20,,2,0
1799,2022-06-01T20:19:23Z,,2022-06-02T12:00:13Z,1,5,4,All in the title.,3,2
1800,2022-06-01T20:20:46Z,2022-06-05T10:27:09Z,2022-06-05T10:27:10Z,8,159,13,"About this PR

 Documentation
 Remove flags from the CLI commands as we will have them in the profile. Decided to have them override the selected profile, can also add a warning while doing so.

closes #1785.

[build-profile] is introduced which can be used to pass optimizations settings to the compiler.
There are default debug and release profiles introduced. These profiles are included in the manifest file implicitly if they are not already present.
--release flag is introduced to forc build, forc deploy.
--build-profile option is introduced to forc build, forc deploy.

To Test
Testing steps will be added before marking this ready to review
Testing --release flag and default build profile (debug)

Since the default build profile (debug) has silent = false, setting --release should silence a warning/error producing build process After 1183330 --release does not silence. A should_fail test from e2e_vm_tests can be used for testing this.


forc build inside a should_fail e2e_vm_test (an example can be abi_impl_purity_mismatch) -> should print full error
forc build --release inside a should_fail e2e_vm_test (an example can be abi_impl_purity_mismatch) -> should just print  ""Aborting due to 1 error.""

Testing --build-config with a user-defined build profile

run forc init test_project
add the following section to Forc.toml:
[build-profile.test_profile]
print-finalized-asm = true
print-intermediate-asm = false
print-ir = false
silent = true


run forc build --build-profile test_profile -> finalized asm should be printed.

Testing --build-config with a user-defined build profile and --release at the same time

run forc init test_project
add the following section to Forc.toml:
[build-profile.test_profile]
print-finalized-asm = true
print-intermediate-asm = false
print-ir = false
silent = true


run forc build --build-profile test_profile --release  => you should get a warning stating that the release will be used and no finalized asm should be printed as release build profile is used.

Testing overriding a build profile with CLI options

run forc init test_project
add the following section to Forc.toml:
[build-profile.test_profile]
print-finalized-asm = false
print-intermediate-asm = false
print-ir = false
silent = true


run forc build --build-profile test_profile --print-finalized-asm  => since you provided an option (--print-finalized-asm) forc will omit --build-profile test_profile part.",6,4
1802,2022-06-01T21:56:19Z,2022-06-02T02:39:06Z,2022-06-02T02:39:07Z,40,641,3950,"This PR:

removes the old codegen path
removes the use_orig_asm flag from forc
refactors one of the files from the current codegen into multiple smaller files for readability


Closes #1801",5,0
1803,2022-06-01T22:40:16Z,2022-06-02T13:42:22Z,2022-06-02T13:42:22Z,7,309,3,"With this it should be easier for anyone wanting to work on the new formatter to test their logic.
cargo build --manifest-path ~/sway/forc-plugins/forc-fmt-v2/Cargo.toml && mv ~/sway/target/debug/forc-fmt-v2 ~/.cargo/bin

I have mine set as an alias forcmat to speed up the process.",4,3
1814,2022-06-02T12:34:09Z,2022-06-02T21:17:39Z,2022-06-02T21:17:39Z,4,20,16,"This PR:

Adds a transfer_to() function which is then used by mint_to(). This better separates the minting and transfer functionality and allows more reuse.
tentatively renames force_transfer() to force_transfer_to_contract() for clarity. Bikeshed time.",3,0
1826,2022-06-02T18:56:33Z,2022-06-03T03:01:31Z,2022-06-03T03:01:31Z,21,1009,15,"Closes #1813
Again, this is temporary until we migrate everything to use the Storable trait and have a derive system that enables automatic inference of impl blocks for arbitrary structs and enums.
Basically, we have full coverage now for all types except for arrays. The plan for arrays is similar to how we handle structs, but we don't really support chaining well (example: storage.some_struct.array[i].some_field). This may not matter if we can support arrays with Storable.
The idea with this change is to basically load/store using state_load_quad_word/state_store_quad_word as many times as needed to cover the full union or string. We use an array of b256 for full coverage and then use up as much as needed from it. For example, if the size of the string is 6 words, then we create an array [b256; 2], and only use up an element and half of it (effectively).",2,0
1827,2022-06-02T19:04:39Z,2022-06-03T14:17:31Z,2022-06-03T14:17:31Z,4,21,6,"All in the title.
closes #1792
ref #1795",4,0
1828,2022-06-02T20:01:20Z,2022-06-02T23:09:47Z,2022-06-02T23:09:47Z,1,1,1,,2,0
1829,2022-06-02T20:30:49Z,2022-06-03T02:22:59Z,2022-06-03T02:22:59Z,9,19,38,"Closes #1825
This was causing some nondeterminism in Swayswap.
The fix is similar to https://github.com/FuelLabs/sway/pull/1542/files",2,2
1830,2022-06-02T21:32:29Z,2022-06-04T15:23:02Z,2022-06-04T15:23:03Z,10,53,18,"Resolves #1740.
Before:
error
  --> match_expressions_inside_generic_functions/src/main.sw:9:15
   |
 7 | 
 8 | fn bogus() -> Sender {
 9 |   let sender: Result<Sender, AuthError> = msg_sender();
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ Unknown type name.
After:
error
  --> match_expressions_inside_generic_functions/src/main.sw:9:15
   |
 7 | 
 8 | fn bogus() -> Sender {
 9 |   let sender: Result<Sender, AuthError> = msg_sender();
   |               ^^^^^^ Unknown type name ""Result"".",3,4
1831,2022-06-02T22:13:50Z,2022-06-03T06:16:45Z,2022-06-03T06:16:45Z,42,380,459,"Previously, we had these traits:

  
    
      sway/sway-core/src/types/friendly_type_string.rs
    
    
         Line 1
      in
      7ba1550
    
  
  
    

        
          
           pub(crate) trait FriendlyTypeString { 
        
    
  



  
    
      sway/sway-core/src/types/json_abi_string.rs
    
    
         Line 1
      in
      7ba1550
    
  
  
    

        
          
           pub(crate) trait JsonAbiString { 
        
    
  



  
    
      sway/sway-core/src/types/to_json_abi.rs
    
    
         Line 1
      in
      7ba1550
    
  
  
    

        
          
           pub trait ToJsonAbi { 
        
    
  


that we were only using for TypeIds. But, there are many types in the compiler that had the same function, just hardcoded. This PR refactors the type_engine module to expose these traits and implements these traits in replacement of the previously hardcoded functions. This PR produces no change functionally, but makes the compiler more readable and maintainable---i.e. if we want multiple types to have the same method with the same signature, it should be a method from a trait so that there is no code drift.
In implementing this, I ended up refactoring a number of files to expose dependencies. I don't think the changes to how dependencies are exposed in individual files is, like, the best way to do it ever (neither was the previous way dependencies were exposed). BUT for some reason, organizing the dependencies this way allows clippy to reveal that certain variants of ResolvedType are unused!

  
    
      sway/sway-core/src/type_engine/resolved_type.rs
    
    
         Line 16
      in
      7ba1550
    
  
  
    

        
          
           #[allow(dead_code)] 
        
    
  


If we intend for these to be unused, we should remove them from the variants. If we do not intend for them to be unused, we should figure out why that is and fix it!",3,0
1835,2022-06-03T01:40:06Z,2022-06-06T15:45:18Z,2022-06-06T15:45:18Z,17,69,69,"Waiting on:

 #1834
 #1829
 #1826

Deferring #1669 to the next release as it's still being worked on.",3,2
1836,2022-06-03T10:13:14Z,2022-06-24T13:39:25Z,2022-06-24T13:39:26Z,8,162,7,"This is still WIP, opening up for visibility.

 Support for patching while creating the BuildPlan from the manifest file.
 Documentation.
 Support for patching while creating the BuildPlan from the lock file.
 Address #1869

About this PR
implements and closes #1784.

Introduces [package] table to the manifest file.
While creating a source from a dependency check for patches and applies them if there are any.

Testing
Patching std with a different branch

run forc build
add patch to the Forc.toml
run forc build
remove patch from the Forc.toml
run forc build


After step 1 in the Forc.lock you should be seeing the master branch of the sway repo (for std)
After step 3 in the Forc.lock you should be seeing the kayagokalp/1620 branch of the sway repo (for std)
After step 5 in the Forc.lock you should be seeing the master branch of the sway repo (for std)

You can use the Forc.toml provided below.
[project]
authors = [""user""]
entry = ""main.sw""
organization = ""Fuel_Labs""
license = ""Apache-2.0""
name = ""parent""
implicit-std = false

[dependencies]
std = { git = ""https://github.com/fuellabs/sway"", branch = ""master""} 

and to add patch in step2, you can use:
[patch.'https://github.com/fuellabs/sway']
std = { git = ""https://github.com/fuellabs/sway"", branch = ""kayagokalp/1620""} 

or if you would like to try patching with a path:
[patch.'https://github.com/fuellabs/sway']
std = { path = ""/path/to/std"" }",4,8
1838,2022-06-03T13:04:05Z,2022-06-04T15:14:51Z,2022-06-04T15:14:51Z,117,1579,35,"Use assert_matches to show errors during tests
The previous assert! was hiding the actual error so I switched to assert_matches!.
Before:
assertion failed: crate::e2e_vm_tests::harness::test_json_abi(name).is_ok()

After:
assertion failed: `Err(Mismatched ABI JSON output.)` does not match `Ok(_)`



Generate ABI JSONs for scripts
Fixes #1656.",4,0
1840,2022-06-03T13:39:01Z,2022-06-07T15:50:24Z,2022-06-07T15:50:24Z,16,179,19,Closes #751,5,11
1841,2022-06-03T13:48:46Z,2022-06-03T22:51:33Z,2022-06-03T22:51:33Z,4,51,146,"This removes all of the duplicated logic from the forc new command in favour of re-using the forc init op. Also adds --verbose and --name options to match the init command.
@ra0x3 this is what I was alluding to in my comment here.",2,0
1842,2022-06-03T15:09:21Z,2022-06-03T19:04:37Z,2022-06-03T19:04:37Z,7,80,7,Calling functions that contain calls to insert() and get() from StorageMap because of a bug of how inlining of the state index metadata was being inlined.,3,0
