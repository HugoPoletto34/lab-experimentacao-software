number,created_at,merged_at,closed_at,files,additions,deletions,body_text,participants,comments
2,2020-10-07T15:31:57Z,,2020-11-26T17:17:03Z,11,20626,0,Closes #1,2,1
6,2020-12-20T15:02:44Z,2020-12-30T20:25:46Z,2020-12-30T20:25:47Z,6,1784,58,"Set $of flag in div and mod by 0
Rename of uf flags
Rename of uf flags
j jr tests
xor xori tests
sub subi tests
sll sllv srl srlv tests
or ori tests
mult multi test
updates to match spec #0d39f49
impl kecakk op
Add convenience functions",2,0
9,2021-05-03T22:20:43Z,2021-05-25T18:49:19Z,2021-05-25T18:49:19Z,41,2771,4127,"The opcodes list was outdated and needed to be resync with the specs.
https://github.com/FuelLabs/fuel-specs/blob/master/specs/vm/opcodes.md
Also, the previous implementation didn't consider the different sizes of
immediate values, treating everything as u16.
The API still need to improve to prevent users from allocating invalid
register values with overflow.
Resolves #8",3,1
12,2021-05-18T21:34:11Z,2021-05-19T13:20:17Z,2021-05-19T13:20:17Z,10,164,143,"Add an action to format, build, and test. Also run format just so CI can pass.",4,4
13,2021-05-19T22:09:07Z,2021-05-20T18:35:26Z,2021-05-20T18:35:26Z,1,9,1,"Use minimal profile
Use nightly toolchain
Set up private keys for dependencies",2,0
14,2021-05-25T18:52:03Z,2021-05-25T21:27:57Z,2021-05-25T21:27:57Z,2,0,80,,2,0
16,2021-05-26T17:21:23Z,2021-05-26T22:36:23Z,2021-05-26T22:36:23Z,2,12,6,"To maintain consistency with the high-level language, the LW and SW
immediate values will be used as word-aligned values instead of raw
memory addresses.",2,0
18,2021-05-26T22:37:13Z,2021-05-30T22:27:22Z,2021-05-30T22:27:22Z,17,819,215,,3,2
19,2021-05-31T11:24:09Z,2021-05-31T16:44:47Z,2021-05-31T16:44:47Z,13,22,21,"fuel-vm-rust don't reflect the repo name and this may be confusing
under certain contexts. Also, there is no particular reason on why these
two names should diverge.",4,0
20,2021-05-31T21:23:46Z,,2021-06-03T17:12:24Z,30,542,489,"The VM must be agnostic to the data backend, and this should comply only
with a non-restrictive trait.
This commit introduces the Storage trait. Some of the interpreter
functionality will specify implementation requirements for a given
Key/Value concrete pair.",2,2
21,2021-06-03T17:10:10Z,2021-06-03T21:16:57Z,2021-06-03T21:16:57Z,35,6,3546,,2,1
22,2021-06-04T07:20:03Z,2021-06-04T14:44:13Z,2021-06-04T14:44:13Z,1,0,2,,2,0
23,2021-06-09T01:22:09Z,2021-08-20T00:11:21Z,2021-08-20T00:11:21Z,23,1775,101,"This MR introduces a shared Database object for the client that can be used for transactional data storage.
Features:

Transaction endpoint integration
DAP endpoint integration
Revertable transactions to enable rollbacks for contract dev
RocksDb support using the --db-path cli argument
In memory db available using the --db-type argument

Future work:

Save a two week window of changes for verification games
Investigate trie-backed storage to enable iteration over key sets",4,1
25,2021-06-22T18:37:35Z,2021-06-29T20:15:30Z,2021-06-29T20:15:30Z,19,4633,16,,2,0
26,2021-06-29T22:49:30Z,2021-07-08T01:58:03Z,2021-07-08T01:58:03Z,21,293,63,,3,1
27,2021-07-12T21:39:13Z,2021-07-14T10:50:22Z,2021-07-14T10:50:22Z,3,585,1,,3,5
28,2021-07-16T19:51:59Z,2021-07-17T13:23:09Z,2021-07-17T13:23:10Z,2,2,2,"Bind client GraphQL endpoint by default to localhost (127.0.0.1) instead of 0.0.0.0. It seems that the latter listens on all IPs, which means the GraphQL endpoint would be accessible via computers over the internet? I'm actually not sure about this, so please correct if I'm wrong.",3,0
30,2021-08-20T01:27:56Z,2021-08-20T02:39:17Z,2021-08-20T02:39:17Z,6,22,8,"An earlier attempt was made to reduce the number of transitive deps on consumers of fuel-core lib using default flags. However, too many deps were being excluded and forc was unable to build.
This addresses those issues while still allowing rocksdb to be excluded when compiling fuel-core. If default-features are disabled it will just default to the in memory implementation.",2,2
31,2021-08-24T19:04:37Z,2021-08-25T20:22:46Z,2021-08-25T20:22:46Z,25,235,301,"Move from actix-web to axum for better tokio support
Combined TxClient and DapClient into single client
Use MergedObject to unify graphql schema to single endpoint at /graphql
Includes a graphql playground at /playground

This new refactor will make it easier to add new graphql based apis going forward, as they won't need new clients or separate endpoints / routes.
We will also have shorter builds due to only having one graphql client.",3,0
33,2021-08-31T19:30:24Z,2021-11-08T22:23:44Z,2021-11-08T22:23:44Z,69,4072,16,"Opening this now so people can start looking, I might add the schema migration stuff to this PR when I'm done.
runtime:
SchemaManager - responsible for managing the metadata, new graphs, schema upgrades
Database - one of these per index executor, has schema info for column/type mappings
Executor - loads the WASM, event triggering
fuel-indexer:
derives - this dir has the derive macros for #[handler] and graphql_schema
lib - the base library for creating indexers.
index-runner - a standalone runner that brings up the runtime, sends events listed in the manifest file
examples/simple-wasm - a basic indexer showing the load/store functionality",4,0
36,2021-09-02T00:45:12Z,2021-09-02T02:51:24Z,2021-09-02T02:51:24Z,1,1,1,"Upload nightlies to directory prefixed with fuel-core-, not just the commit message.",2,0
37,2021-09-02T03:41:09Z,2021-09-02T05:28:05Z,2021-09-02T05:28:05Z,7,46,5,"Upgrade to stable versions (published to crates.io) of axum + async graphql
Added GraphQL health resource
Added simple REST health endpoint also (curl localhost:4000/health)",2,0
38,2021-09-03T16:58:50Z,2021-09-13T18:40:29Z,2021-09-13T18:40:29Z,2,1,9,dependency cleanup,2,0
39,2021-09-13T18:18:38Z,2021-09-20T15:51:13Z,2021-09-20T15:51:13Z,4,3047,2,"In an effort to curb CI minutes consumption, this is an attempt to introduce CI caching for our rust builds.
This PR also begins the inclusion of a lockfile for fuel-core. Even though it has downstream consumers, we will be updating fuel-core often enough for now to avoid issues in downstream crates.
So far it looks like we gain a minor decrease in build time (~20s), due the overhead of loading and saving the cache itself.
For some reason cargo thinks a lot of the dependencies are Fresh, so we'll need to do further investigation into why cargo is needlessly rebuilding some of these dependencies.",2,0
40,2021-09-14T16:46:45Z,2021-10-22T05:39:02Z,2021-10-22T05:39:02Z,4,150,0,Add Docker and Kubernetes files,3,0
41,2021-09-27T08:26:31Z,2021-11-02T18:18:04Z,2021-11-02T18:18:04Z,63,5298,930,"This PR adds a significant amount of functionality to the client:

Instant block production when transaction is submitted
CORS enabled on the graphql endpoint
GraphQL interfaces for transactions, blocks, and coins including:

receipts
rocksdb optimized cursor based pagination for blocks and transactions
rocksdb optimized secondary index for pagination of coins by owner
index for block height to block id (sorted)
basic chain info



todo:

 fuel-client

 query transaction by id
 paginated transactions query
 query block by id
 paginated blocks query
 paginated coins by owner query
 chain info query


 InterpreterStorage

 block_height
 block_hash
 coinbase



note: since this is a major db change, you'll need to wipe the database with rm -rf ~/.fuel/db to avoid a panic on startup.",3,0
42,2021-09-29T19:21:38Z,2021-09-30T01:54:10Z,2021-09-30T01:54:10Z,1,0,152,This is no longer needed.,2,0
45,2021-10-28T03:30:05Z,2021-10-28T16:53:51Z,2021-10-28T16:53:51Z,7,135,90,"Bump VM version to use latest types and storage traits.
Also includes minor CI enhancement to cancel previous in-flight CI workflows when new commits are pushed.",3,1
46,2021-10-30T18:34:59Z,2021-11-01T21:18:33Z,2021-11-01T21:18:33Z,2,4,4,"version bump to use latest vm
need to use nightly due to extensive use of const fn's in the vm",3,0
47,2021-11-02T17:54:31Z,2021-11-03T12:30:21Z,2021-11-03T12:30:21Z,1,2,2,"Updated the Dockerfile so it uses rust:1.56. Doing that broke the run target because ""GLIBC_2.29"" was missing so also updated the run target to use ubuntu:20.04.",3,1
51,2021-11-03T23:29:07Z,2021-11-04T19:12:44Z,2021-11-04T19:12:44Z,18,618,89,"Closes #48

Adds a graphql endpoint to query transactions by associated coin ""owners"" in either inputs or outputs.

Transactions are sorted by time


Adds snapshot testing for some commonly used and referenced assembly code",3,2
54,2021-11-04T21:29:44Z,2021-11-16T12:50:05Z,2021-11-16T12:50:05Z,7,81,71,"I have separated yaml files into respective kinds within base folder and added a kustomize.yaml
and I have added an example how we would change image path and perform other patches if needed
if this is the way to go to complete #43 I can work on it further and make a real PR in the future
In order to see the final output run [within deployment folder]
$ kubectl kustomize ./overlay/example",3,3
57,2021-11-05T20:25:33Z,2021-11-05T22:28:30Z,2021-11-05T22:28:31Z,5,119,19,"When using a transactional memory view, iterating over a column would consume the entire set of records to dedupe between db and modified keys in the transaction.
However, since the iterators from the database are guaranteed to be sorted by key, we can use a specialized merge function instead of simply chaining the iterators together.",2,0
58,2021-11-09T00:57:23Z,2021-11-09T20:50:53Z,2021-11-09T20:50:53Z,1,26,1,"We have a growing number of system dependencies required to build fuel-core. This PR adds a script to automate the installation process.
Future work: Investigate using nix (without breaking existing developer tooling)",4,3
65,2021-11-09T11:50:04Z,2021-11-09T23:24:51Z,2021-11-09T23:24:51Z,8,60,67,,2,1
68,2021-11-12T06:56:17Z,2021-11-15T18:50:38Z,2021-11-15T18:50:38Z,3,25,7,add feature flag for cranelift and use it by default,2,1
69,2021-11-15T16:56:52Z,2021-11-18T11:04:04Z,2021-11-18T11:04:04Z,19,463,85,"solves #56
this PR introduces xtask which means:


fuel-core devs, once they make code updates they need to run cargo xtask build in order for it to build the project and then dump schema into fuel_core/assets/schema.sdl, after that they need to commit the schema if it got updated


in order to prevent the case where latest schema update is not committed to master branch, there is a test that checks the latest committed schema to the latest fuel-core schema dump


we introduced xtask project, and assets folder into workspace, we could potentially use xtask to install all the dependencies needed to run fuel-core/client, without any additional scripts if we want to, i.e cargo xtask install


as a consequence of introducing a separate build and dump, we have eliminated fuel-client's dependency on fuel-core",3,2
70,2021-11-19T01:17:03Z,2021-11-22T21:39:35Z,2021-11-22T21:39:35Z,27,1328,147,"This PR introduces an initial configuration mechanism for fuel-core. It also refactors how fuel-core is started into a service wrapper. This container makes it easier to configure and track spawned tasks as well as perform other initialization logic.
Now when starting fuel-core from the command line, you'll have an option to provide a filepath to a json file containing a chain configuration or alias to a predefined network template. There is an initial local_testnet chain config which creates some coins for dummy accounts. These account id's will need to be updated later once we consolidate keygen and perform signature verification.
The chain configuration is able bootstrap a node with the following properties:

Network Name
Block production strategy (i.e. instant, round robin, PoS, etc)
Layer 1 configuration info (i.e. exact details to be hashed out in a later effort #52)
Initial Block Height (useful for regenesis)
Coins (for test accounts or initial distribution)
Contracts & State & Balances

There are a few todos related to properly populating merkle trees based on the initial state config. These will be reminders for later once the merkle trees are ready to start integrating. Another non-goal of this PR is the ability to snapshot all the state of a node to a chain config file.
Closes #53",2,2
72,2021-11-20T14:01:41Z,2021-11-23T00:22:43Z,2021-11-23T00:22:43Z,6,173,50,"Updated fuel-vm to master to get this change: FuelLabs/fuel-vm#48
This also bumped the fuel-tx version which required some changes on Receipt and ReceiptType.",2,1
74,2021-11-22T17:16:39Z,2021-12-05T18:40:36Z,2021-12-05T18:40:36Z,5,279,33,solves #64,2,1
78,2021-11-25T13:24:56Z,2021-11-28T22:07:59Z,2021-11-28T22:07:59Z,8,7,8,It seems there was no need for any additional changes to the code.,2,1
79,2021-11-29T16:34:42Z,2022-01-26T10:54:06Z,2022-01-26T10:54:06Z,7,65,19,"I dont print memory from backtrace because it is 4mb in size. There is the possibility to compress it and print it in that way, but maybe this is task for another time.
For compression I mean something like: FirstFlag | NumOfZeroes | NumOfData | data | NumOfZeroes | NumOfData | Data 
this compression will give us a lot smaller size of memory assuming a lot of it is zeroed. This can be printed differently but all data would be here.",2,4
81,2021-12-03T01:39:06Z,2021-12-03T18:25:31Z,2021-12-03T18:25:32Z,22,133,153,"Fixed all warnings from Rust 1.57
Fixed all Clippy errors in all targets
Updated CI to run Clippy verification on all targets going forward.
Replaced build step with cargo check since we don't use the build outputs for anything.",4,0
84,2021-12-07T06:55:51Z,,2022-01-31T01:07:26Z,1,59,0,,4,10
89,2021-12-15T20:08:01Z,2021-12-15T22:03:27Z,2021-12-15T22:03:27Z,2,67,57,updates to handle changes from FuelLabs/fuel-vm#50,2,0
90,2021-12-17T21:49:50Z,2022-01-07T23:21:06Z,2022-01-07T23:21:07Z,21,1437,270,Updates for fuel-core to go with ABI.,2,1
98,2021-12-29T21:02:00Z,2022-01-03T18:45:30Z,2022-01-03T18:45:30Z,1,0,1,,2,0
99,2021-12-29T22:19:59Z,2022-02-02T09:03:50Z,2022-02-02T09:03:50Z,24,2402,69,"[txpool] Some checks on inclusion
[txpool] Initial dependency insert
[txpool] dep insertion needs testing
[txpool] wip testing
[txpool] some testing data
[txpool] Initial subscriber. Some tidying up
[txpool] cleanup
[txpool] integration for fuel-core
[txpool] find dependent. fmt
[txpool] inclue utxo_id in dependency
[txpool] Initial test
[txpool] inclusion tests. Some fixes
[txpool] fmt,clippy,cargo-sort
[txpool] tx removal. subs tested
[txpool] small cleanups and refactoring",4,7
100,2022-01-02T14:54:54Z,2022-01-12T23:14:49Z,2022-01-12T23:14:49Z,6,201,31,"Replace Query.coinsByOwner(owner) with Query.coins(filter: { owner, color })
Return only unspent coins from Query.coins",2,2
109,2022-01-04T01:22:46Z,2022-03-03T17:50:27Z,2022-03-03T17:50:27Z,21,955,1,"Automation of following aws resources via terraform (deployment/terraform):


EKS Cluster creation (security groups, iam roles, eks vpc-cni & coredns & kube-rproxy adds on)
EKS Node group creation (security groups, iam roles, configuration)
EKS Networking (VPC, Subnets, route tables, NAT and IGW Gateways)


Fuel-Core Helm Chart (deployment/charts)


Helm chart templates for fuel-core deployment to k8s


Deployment scripts (deployment/scripts)


bash script to create k8s cluster based on cloud provider (aws)
bash script to deploy fuel-core helm chart to k8s",3,5
110,2022-01-04T05:04:57Z,2022-01-13T18:47:28Z,2022-01-13T18:47:28Z,3,94,6,"Setup Github action to docker build & publish fuel-core image (only for master branch) to ghcr.io tagged based on sha & branch tags (dependent on successful prior build & test step)
Latest action results: https://github.com/FuelLabs/fuel-core/actions/runs/1656710117
More info here: #106",3,4
113,2022-01-04T19:55:50Z,2022-01-05T01:38:38Z,2022-01-05T01:38:38Z,1,25,0,"This GA workflow will run cargo audit against the against the HEAD of repository default branch.
Basis of GA workflow is: https://github.com/marketplace/actions/rust-audit-check",2,0
114,2022-01-05T01:38:01Z,2022-01-18T16:58:08Z,2022-01-18T16:58:08Z,24,284,173,changes for UtxoId: FuelLabs/fuel-tx#53,3,2
131,2022-01-14T15:56:25Z,2022-02-09T20:39:36Z,2022-02-09T20:39:36Z,12,705,3,"Resovles #121

 Implement Largest-First
 Implement Random-Improve
 Add Query.coinsToSpend to GQL schema
 Implement fuel-client query
 Add fuel-client tests
 Cleanup code (handle TODOs, optimize, etc.)",4,2
134,2022-01-16T20:04:11Z,2022-01-18T13:07:38Z,2022-01-18T13:07:39Z,1,1,0,30 seconds. Fixes #132,2,0
139,2022-01-18T05:09:08Z,2022-01-18T18:08:31Z,2022-01-18T18:08:31Z,17,461,41,"closes #125
Updates error handling of transactions so that revert's / panic's are marked as failure instead of success.
Provides more useful info about the transaction status via fuel-client.",2,0
140,2022-01-18T13:48:03Z,2022-01-18T17:41:18Z,2022-01-18T17:41:18Z,12,346,1320,"Remove the examples directory from the workspace, and test it separately. This should prevent the examples from polluting the lockfile with circular dependencies.
Also change the version of unpublished crates to 0.0.0 (to get CI to re-run mostly).",3,1
142,2022-01-18T19:27:54Z,2022-03-13T12:53:47Z,2022-03-13T12:53:47Z,44,3024,503,"Add a new sample indexer module, take log events and send them through the system.
Begginings of log handler,",3,1
145,2022-01-19T13:00:16Z,,2022-02-01T08:05:36Z,10,2592,87,"Implementation of Fuel's p2p Service with Discovery Behaviour
When reviewing I would advise checking out Miro Board for better overview.",3,0
146,2022-01-21T19:45:54Z,2022-01-21T20:47:20Z,2022-01-21T20:47:20Z,15,49,189,older versions of tower-http was yanked from crates: https://crates.io/crates/tower-http/versions,3,0
149,2022-01-27T08:48:08Z,2022-01-27T20:31:30Z,2022-01-27T20:31:30Z,1,1,1,"without it, build cmd fails with:
  = note: ld: library not found for -lpq
          clang: error: linker command failed with exit code 1 (use -v to see invocation)

env: mac os 11.5.2",3,1
151,2022-02-01T08:05:11Z,2022-02-17T10:15:45Z,2022-02-17T10:15:45Z,10,2597,99,"Implementation of Fuel's p2p Service with Discovery Behaviour
When reviewing I would advise checking out Miro Board for better overview.",3,0
156,2022-02-03T05:33:53Z,2022-02-10T00:08:02Z,2022-02-10T00:08:03Z,1,53,1,"For all jobs in the ci.yml, slack notifications will be sent if the job fails at any point.
For the build job, a slack alert will only be sent if the branch is master upon which the workflow is running.
This was tested and the results are in #notify-build of our slack.",3,0
157,2022-02-04T04:30:27Z,2022-02-04T05:38:58Z,2022-02-04T05:38:59Z,14,130,31,closes #155,2,0
169,2022-02-04T21:06:09Z,2022-02-05T01:32:03Z,2022-02-05T01:32:03Z,2,157,21,Basic CONTRIBUTING.md to start with. Not sure if we need to include CLA or any other additional processes (cc @adlerjohn).,2,0
176,2022-02-17T12:05:26Z,2022-03-02T11:56:47Z,2022-03-02T11:56:47Z,6,568,80,"added PeerInfoBehaviour
moved some stuff from DiscoveryBehaviour to PeerInfoBehaviour
improved and refactored the tests",2,3
177,2022-02-17T13:59:43Z,2022-02-17T16:54:23Z,2022-02-17T16:54:23Z,1,8,8,"This addresses a bug where receipts aren't saved if the transaction panics. They were being saved to the wrong database transaction which gets dropped if the tx panics, and should only be used for state changes from the script execution.",3,2
178,2022-02-17T17:02:21Z,2022-02-17T18:03:53Z,2022-02-17T18:03:53Z,6,12,12,,2,0
180,2022-02-18T09:09:16Z,2022-02-19T18:42:44Z,2022-02-19T18:42:45Z,17,1323,270,"closes: #86
Implements Produce vs Verification mode for block executor

Contract UtxoId handling / verification
Output verification (e.g. change and variable amounts can be verified by a third party)
Runtime option --utxo-validation to enable utxo input validation (i.e. actually exist and not already spent)
Coin outputs are marked as spent
Variable outputs are added to the spendable output set
Gas verification (if gas price or byte price are non-zero, verify tx can pay for itself)
faux merkle sum tree commitment to fees, to be replaced by actual merkle sum tree implementation when released from fuel-merkle.",3,1
181,2022-02-18T15:01:39Z,2022-02-22T16:23:20Z,2022-02-22T16:23:21Z,10,2618,99,p2p discovery + idle_connection_timeout for discovery,3,0
186,2022-02-23T23:26:06Z,2022-03-02T19:12:47Z,2022-03-02T19:12:47Z,14,264,183,"Followup PR to #180 to address some feedback there.
Also found some issues with how block id's were handled, so I changed the execution flow a bit to only generate a block id after the MST is finalized.",3,0
187,2022-02-23T23:56:37Z,2022-02-28T07:57:31Z,2022-02-28T07:57:31Z,4,13,4,See FuelLabs/cargo-toml-lint#2,3,1
188,2022-02-25T04:30:37Z,2022-02-25T17:58:57Z,2022-02-25T17:58:57Z,4,10,13,,2,0
189,2022-02-28T05:42:46Z,2022-02-28T20:59:16Z,2022-02-28T20:59:16Z,10,360,304,"We recently removed importing structopt directly in sway, and instead use clap v3 because structopt is now built-in. See this PR
As structopt uses clap v2 internally, removing it in favor of clap v3 means we only need to build one version of the library instead of 2.",4,2
191,2022-03-01T23:03:04Z,2022-03-04T20:23:38Z,2022-03-04T20:23:39Z,38,1055,901,"Rename types: HexString256 -> Bytes32, HexStringUtxoId -> UtxoId
Add new scalars: Address, BlockId, Color, Salt, TransactionId
Add new object: Contract. Currently this only has an id field since we can't fetch the rest yet.
Refine fields with HexString256 types: WithdrawalOutput.to: HexString256 -> ...: Address, etc.
Rename and retype id fields: SuccessStatus.block_id: HexString256 -> SuccessStatus.block: Block, etc.
Reorder connection args so first and after comes first. They map nicely to traditional limit/offset and more widely used.
Resolves #161

Note: This PR doesn't add Account. Leaving that on #173.",3,4
193,2022-03-02T03:37:55Z,2022-03-02T12:11:31Z,2022-03-02T12:11:32Z,3,3,2,,3,0
194,2022-03-02T03:57:02Z,2022-03-02T20:20:05Z,2022-03-02T20:20:06Z,43,549,443,"Fixes #174
Will have heavy conflicts with #191",3,3
197,2022-03-04T13:48:52Z,2022-03-05T22:30:12Z,2022-03-05T22:30:12Z,7,15,15,"Depends on

 #191
 #198
 #199",3,2
198,2022-03-04T22:29:12Z,2022-03-05T19:59:59Z,2022-03-05T19:59:59Z,2,53,13,"closes: #190
This PR utilize fuel-tx signature validation in the fuel-core executor, gated under the utxo-valdation flag.",3,0
199,2022-03-05T03:54:39Z,2022-03-05T21:12:13Z,2022-03-05T21:12:13Z,22,230,98,"After adding a new column to the database, I forgot to increment the column number constant which was causing errors at runtime.
To avoid this from happening again, I made it so that the tests run twice, once with default features enabled (rocksdb) and again with default features disabled (in-memory).
However, due to the way our integ tests in fuel-gql-client were setup, it was causing a bug in the v2 feature resolver when attempting to use cargo test --no-default-features. Specifically, it seemed like the feature resolver was unifying dev-deps in the fuel-gql-client with the fuel-core crate in the workspace, causing fuel-core to always be compiled with default features enabled when using --no-default-features at the workspace level. In order to fix this and make it possible to run tests without default features enabled on fuel-core, I had to move all the integ tests into their own crate (with normal deps only). This is better in the long run and is more similar to how projects like diesel-rs are structured.",3,0
200,2022-03-05T12:31:16Z,2022-03-17T17:51:54Z,2022-03-17T17:51:54Z,7,226,13,initial gossipsub implementation,3,0
203,2022-03-07T01:04:21Z,2022-03-13T03:35:46Z,2022-03-13T03:35:46Z,2,14,25,,2,0
207,2022-03-10T11:00:46Z,2022-05-09T08:33:34Z,2022-05-09T08:33:34Z,36,3944,166,,4,1
208,2022-03-12T20:31:13Z,2022-03-13T04:32:52Z,2022-03-13T04:32:52Z,3,3,1,"Fixes #205 , mirror style and changes as much as possible of the commit which fixed this in Sway, but if any changes are needed just let me know and I can get that fixed!
Works with both fuel-core --version and fuel-core -V",3,2
219,2022-03-21T21:24:09Z,2022-03-22T02:38:16Z,2022-03-22T02:38:16Z,2,188,27,"Disables surf's default features (which compiles using openssl-sys) and instead enables rustls as a replacement. From my local testing it seems to have removed the need for openssl from fuel-gql client. But as fuel-gql-client is a dependency of other crates it would need a version bump to fully remove the openssl dependency
Would it then be better to version bump fuel-gql client in this PR, or save that for a full release to fully remove openssl?",3,6
220,2022-03-22T02:11:20Z,2022-03-22T20:27:04Z,2022-03-22T20:27:04Z,7,48,11,"This PR enables API error logging via tracing middleware both at the axum and the async_graphql layer.
Now when a bad request is made, the error will appear in the fuel-core logs like this:
Mar 21 18:57:05.682  INFO fuel_core::service::graph_api: Binding GraphQL provider to 127.0.0.1:4000
Mar 21 18:57:54.568 ERROR request:execute:field{path=dryRun parent_type=Mutation return_type=[Receipt!]!}: async_graphql::graphql: error=unexpected block execution error TransactionIdCollision(0x656da2b4912aa59d2beee8a36fa352e98efdd89a063a556b910ef4b1531d7733)

It also adds the HUMAN_LOGGING env var, which allows for json structured logging in deployed environments. This will make it easier to search & filter logs using elastic search for example.
HUMAN_LOGGING=false cargo run -p fuel-core
{""timestamp"":""Mar 21 21:22:15.564"",""level"":""INFO"",""fields"":{""message"":""Binding GraphQL provider to 127.0.0.1:4000""},""target"":""fuel_core::service::graph_api""}",4,2
221,2022-03-22T11:22:19Z,,2022-06-14T00:10:19Z,50,1165,646,"Add sqlite support for fuel-indexer local running.
Had to create 2 new crates to separate sqlite dependencies because of a linker issue, (which kinda feels like an issue with cargo, I have these feature gated, but it complains anyway).
Here's the issue I ran into, fuel-indexer-schema has it's diesel dependencies behind feature flags, but cargo doesn't seem to understand that:
error: multiple packages link to native library `sqlite3`, but a native library can be linked only once

package `libsqlite3-sys v0.9.1`
    ... which satisfies dependency `libsqlite3-sys = "">=0.8.0, <0.23.0""` (locked to 0.9.1) of package `diesel v1.4.8`
    ... which satisfies dependency `diesel = ""^1.4""` (locked to 1.4.8) of package `fuel-indexer-schema v0.0.0 (/home/teej/fuel-core/fuel-indexer/schema)`
    ... which satisfies path dependency `fuel-indexer-schema` (locked to 0.0.0) of package `fuel-indexer v0.0.0 (/home/teej/fuel-core/fuel-indexer/lib)`
    ... which satisfies path dependency `fuel-indexer` (locked to 0.0.0) of package `fuel-indexer-derive v0.0.0 (/home/teej/fuel-core/fuel-indexer/derive)`
links to native library `sqlite3`

package `sqlite3-src v0.3.0`
    ... which satisfies dependency `sqlite3-src = ""^0.3""` (locked to 0.3.0) of package `sqlite3-sys v0.13.0`
    ... which satisfies dependency `sqlite3-sys = ""^0.13""` (locked to 0.13.0) of package `sqlite v0.26.0`
    ... which satisfies dependency `sqlite = ""^0.26""` (locked to 0.26.0) of package `api_server v0.1.0 (/home/teej/fuel-core/fuel-indexer/api_server)`
also links to native library `sqlite3`",2,2
222,2022-03-22T13:57:03Z,2022-03-27T02:38:39Z,2022-03-27T02:38:39Z,5,31,0,"deploy prometheus helm chart to k8s (https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack)


updating deploy script comments",2,0
225,2022-03-22T21:33:56Z,2022-03-23T03:03:55Z,2022-03-23T03:03:55Z,1,1,1,"Not so much a typo or error, just continuation of the service name per se the helm charts service definition",2,0
231,2022-03-25T00:31:54Z,,2022-03-27T17:41:01Z,2,34,6,"I made 2 main changes with this to fix #152

Check the mempool for a transaction if it's not found in the database with find_tx
Utilize new mempool in submit tx under the hood to start using that code in lieu of the present dummy tx pool

Still used to writing this level of rust code though so feel free to let me know if I missed some best practices or did something wrong. Tests are passing for me, but as most of the functionality added is under the hood I may have missed something",3,2
232,2022-03-26T08:10:06Z,2022-03-26T16:21:56Z,2022-03-26T16:21:56Z,1,164,14,"Fuel core was naively storing every coin-based utxo it came across, even if it was a blank variable or change output.
This update ensures fuel-core won't add utxos without any value. Specifically, this means coins, change or variable outputs won't be added to the spendable set if their amount == 0.",2,0
235,2022-03-26T23:10:39Z,2022-03-27T00:36:06Z,2022-03-27T00:36:06Z,7,18,18,,2,1
237,2022-03-27T04:59:33Z,2022-04-07T07:53:23Z,2022-04-07T07:53:24Z,7,197,35,"This PR partly implements #185. The unimplemented part was excluding coins in the txpool, but this isn't an immediately necessary feature.",2,1
238,2022-03-27T21:53:44Z,2022-04-04T21:41:06Z,2022-04-04T21:41:06Z,3,95,5,"I've changed the submit tx and find tx methods to use the new fuel_txpool rather than the old one as part of #152
One note I do want to make is that I currently use an ugly fallback method where if includable doesn't return the tx's correctly I default to previous behavior. I really did try to avoid this behavior but after spending so long diving through the codebase I think it should be a seperate issue as it will take significantly more time to fix and seems to be a bug with precompute_metadata as on only some transactions that are passed in that lack metadata precompute_metadata seems to be adding potentially wrong info, which results in them not being returned by includable, specifically in the
    tx::get_owned_transactions
    tx::get_transactions

tests where this behavior was observed.
Otherwise submit_tx will use this new behavior adding transactions to the new txpool, and find tx performs a quick check in the mempool, although that won't be used yet until tx's can actually persist in the mempool for any amount of time (we execute them right away currently)",4,9
239,2022-03-28T11:03:47Z,2022-04-01T08:01:38Z,2022-04-01T08:01:39Z,9,518,10,"closes #210
This PR also completes 1/2 of #212
since it implements Serialization of Request/Response Messages, the other half is left for Serialization of Gossipsub messages
Further improvements:

Need to clearly define Request/Response Messages
Consequently set appropriate size of Request/Response Messages that are sent over the network",3,0
240,2022-03-28T20:58:06Z,2022-03-28T23:09:26Z,2022-03-28T23:09:26Z,1,1,1,The human logging env var should be uppercase.,2,0
242,2022-03-30T01:00:45Z,2022-03-30T20:05:10Z,2022-03-30T20:05:10Z,7,56,12,"-Adding monitoring ingress to route to grafana

updating ingress deploy scripts
update ingress env names


https://monitoring.swayswap.io what deployed from this PR",3,1
256,2022-04-03T18:41:23Z,2022-04-04T21:28:53Z,2022-04-04T21:28:54Z,4,18,18,"Done to fix #123  , I believe I regenerated the schema.sdl correctly but not too familiar so let me know if I missed a step. Went looking for fields of error in fuel-core/schema/* so its also possible I may have missed other GQL descriptions, I also tried to avoid capitalizing words which reference variables (like utxo_id) and instead added prefixes to those to fit in line with the new style while maintaining clarity.",4,0
257,2022-04-07T08:00:18Z,2022-04-13T10:13:05Z,2022-04-13T10:13:05Z,10,558,0,"Adds appropriate fields to our GQL schema to query the total amount of assets an address has.
It works by fetching all coins and adding their amounts together which definitely is not what peak performance looks like. While this is very useful in the short term, I'd say these sums should be indexed somewhere in the future.",2,0
258,2022-04-08T15:51:45Z,2022-04-19T11:40:21Z,2022-04-19T11:40:21Z,39,329,190,"Txpool will search in utxo table for dependency check.
Moved BlockHeader, Blocks, Coin to fuel-core-interfaces",4,0
259,2022-04-08T21:16:55Z,2022-04-12T19:36:14Z,2022-04-12T19:36:14Z,8,512,414,"This PR introduces following updates:


update libp2p to the latest version, consequently some changes needed to be made to the code,
most notably: ProtocolsHandler was renamed to ConnectionHandler and 2 methods were completely removed
from the code inject_connected() and inject_disconnected() in favor of their code being moved to other 2 similar already existing methods


we also define clearly which libp2p features we need instead of importing default-features


we use our own production-ready build_transport() instead of libp2p's development_transport() for transport creation",3,0
260,2022-04-11T17:01:15Z,2022-05-24T16:56:49Z,2022-05-24T16:56:49Z,12,470,13,"Extends the current dap interface to allow fine-grained execution control, such as breakpoints and single-steppng. The corresponding changes to https://github.com/FuelLabs/fuel-debugger/ should be merged simultaneously.
This PR currently also contains some profiling improvements, but they will be moved to a separate PR before un-draft-ing this PR.",5,10
261,2022-04-11T21:14:17Z,,2022-04-13T16:51:49Z,0,0,0,"This PR is designed to close #152 .
It addresses @Voxelot request for the transaction endpoint to use transaction status an indicator of whether or not to check the mempool or db for a transaction
It also adds a dependent_txs endpoint which returns all dependent transactions given a transaction id. This was my first time working as in depth with the GraphQL endpoints, however I believe I tested and implemented this one correctly, I mirrored it's implementation off of transactions as they both have similar parameters, although different returns.",2,0
262,2022-04-13T15:13:22Z,2022-04-15T11:29:32Z,2022-04-15T11:29:32Z,3,79,60,"This is a follow up PR to resolve the issue mentioned here: #237 (comment)
I believe there's no urgency to merge this so feel free to nitpick (both on this PR and similar non-urgent PRs).",2,0
263,2022-04-14T03:32:08Z,2022-04-27T22:35:26Z,2022-04-27T22:35:26Z,13,49,27,"Closes #154
This updates the transaction status api to use the mempool as a shortcut to determine transaction status, as if a transaction is in the mempool it's status is submitted. There is a small TODO where the time used for the submitted status is the current time of when the status if fetched rather than the actual time it was submitted.
The dependent_transactions api was shelved as I understand it isn't that important, and I thought that if it is implemented it may make more sense to do with once utxo_validation is turned on.",3,7
265,2022-04-15T03:40:45Z,2022-04-28T18:22:17Z,2022-04-28T18:22:17Z,13,134,51,"Now that we are moving towards supporting fully validated utxos in deployed environments, we needed a way to configure a chainspec that has preconfigured spendable coins.

Setup a k8s configmap to load the chainspec into the container (this will have a 1mib cap)
Configures a conventional path for loading chainspecs from when using the deployment scripts
Exposes more options for running the node, making it possible to enable utxo validation from the deployment .env

misc fixes:

Make graphql API show the actual chain name from the chainspec instead of a hardcoded name
Allow hex numbers in the chainspec to be of variable length and automatically pad them.
Ensure line numbers are available in machine readable (JSON) logs
Make the pretty logs a little more compact
Improve error messages when the chainspec json isn't able to be parsed

This was deployed to node.swayswap.io where the genesis coin with value of 1<<50 can be seen with the following query:
curl 'https://node.swayswap.io/graphql' -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Origin: https://node.swayswap.io' --data-binary '{""query"":""# Write your query or mutation here\n{\n  coins(first: 10, filter: {owner : \""0xf1e92c42b90934aa6372e30bc568a326f6e66a1a0288595e6e3fbd392a4f3e6e\"", assetId:\""0x0000000000000000000000000000000000000000000000000000000000000000\""}) {\n    edges {\n      node {\n        amount,\n        assetId\n      }\n    }\n  }\n}""}' --compressed",4,0
266,2022-04-15T05:48:56Z,2022-04-15T20:31:02Z,2022-04-15T20:31:02Z,3,13,3,"Fuel gql client accepted a string for instantiation but always parsed it as a socket addr so that it could be formatted in a way that is guaranteed to be the correct route for the fuel node. The problem with this approach is that it always assumes the client URL will be on http. This change allows the string to be directly passed in and parsed as the URL of the fuel-core graphql endpoint, allowing users to set https in the prefix if needed.",2,1
267,2022-04-15T06:38:19Z,2022-04-27T17:44:22Z,2022-04-27T17:44:22Z,1,183,75,Parallelize CI similar to sway repo,2,2
269,2022-04-15T14:59:02Z,2022-07-01T09:59:55Z,2022-07-01T09:59:55Z,1,57,2,The balance test now actually spends a coin and checks if the balance is right.,2,2
270,2022-04-15T17:25:14Z,2022-05-05T18:30:37Z,2022-05-05T18:30:38Z,9,143,61,solves #212,3,0
273,2022-04-19T00:20:43Z,2022-04-19T16:16:11Z,2022-04-19T16:16:11Z,1,114,26,"prometheus and grafana setup & configuration docs
ingress setup & configuration docs",2,0
275,2022-04-19T14:00:21Z,2022-04-20T15:42:06Z,2022-04-20T15:42:06Z,8,71,17,,4,1
277,2022-04-24T21:31:48Z,2022-04-26T03:56:45Z,2022-04-26T03:56:45Z,7,54,57,"To accommodate future k8s cluster types e.g. azure, gcp, and others, want to make the AWS envs more aws specific.",3,0
281,2022-04-26T15:57:10Z,2022-04-26T18:00:34Z,2022-04-26T18:00:34Z,79,248,6926,"moved to a separate repo here: https://github.com/FuelLabs/fuel-indexer
The fact that we could move it to an entirely separate repo without any breaking changes is a good indication that it belongs in a different repo / CI pipeline.",2,0
282,2022-04-27T00:52:00Z,2022-04-27T18:27:24Z,2022-04-27T18:27:24Z,2,36,18,"Use latest stable rust
Update to latest ubuntu LTS (22.04)
Cargo chef to cache cargo dependencies as layers

Using the Rust in Production guide for cargo chef, the new caching will drastically improve the development experience when working with docker in places like swayswap.",3,0
283,2022-04-27T01:05:25Z,,2022-06-28T07:30:48Z,3,31,7,"Setup the fuel-core project to use lld as the linker, which is roughly twice as fast as the default linker.
For fuel-core CI, this makes the build ~2 minutes faster.
before: https://github.com/FuelLabs/fuel-core/runs/6180962633?check_suite_focus=true
after: https://github.com/FuelLabs/fuel-core/pull/283/checks
also cleans up openssl related stuff, since it's no longer used.",3,2
286,2022-04-27T17:40:52Z,2022-04-27T19:15:12Z,2022-04-27T19:15:12Z,7,15,15,,2,0
289,2022-04-27T20:39:21Z,2022-04-27T22:27:42Z,2022-04-27T22:27:42Z,2,38,1,don't use newer version of async-graphql until newer release is fixed,2,0
292,2022-04-28T01:42:15Z,2022-04-28T16:12:38Z,2022-04-28T16:12:38Z,8,5,83,"remove stray refs to llvm and openssl, cleanup unused k8s scripts",2,0
295,2022-04-28T18:52:29Z,2022-04-29T15:06:15Z,2022-04-29T15:06:15Z,1,20,124,,2,2
297,2022-04-28T23:16:11Z,,2022-04-29T17:44:32Z,4,102,7,,2,1
298,2022-04-29T02:42:21Z,2022-04-29T16:55:19Z,2022-04-29T16:55:19Z,6,213,82,"When removing a transaction from the txpool that had a contract output, it was recursing on itself after it was already removed from the dependencies causing an unexpected failure. This fix makes it so that only contract created outputs will cause any sort of recursive cleanup, and ensures the tx can't recurse on itself. I've also replaced several panics with warns for now.",2,1
299,2022-04-29T09:52:46Z,2022-04-29T16:56:12Z,2022-04-29T16:56:12Z,1,6,2,This is bug where we didnt cleanup transaction if it is removed as dependency.,3,0
301,2022-04-30T00:44:37Z,2022-05-03T21:01:18Z,2022-05-03T21:01:18Z,3,6,11,"The following parameters were exposed but not fully adjustable on a per-env basis. This PR makes it so that the following vars can be configured and modified on a per deployment basis via .env files:

human_logging
utxo_validation
vm_backtrace",2,0
304,2022-05-03T14:30:19Z,2022-05-03T19:02:43Z,2022-05-03T19:02:43Z,6,57,74,"add setup steps to deploying ingress controller,  cert-manager, prometheus-grafana, and cluster issuer to create-k8s.sh
cleanup up other scripts",2,0
306,2022-05-05T21:31:53Z,2022-05-08T19:21:13Z,2022-05-08T19:21:13Z,1,62,12,"implements FuelLabs/fuel-tx#118 in the validator node for now, while we wait for the fuel-tx rules to propagate.",3,2
307,2022-05-06T00:26:34Z,2022-05-06T20:53:26Z,2022-05-06T20:53:26Z,12,192,48,"Adds the following transaction pool configuration parameters to fuel-core:

minimum gas price
minimum byte price

/// The minimum allowed gas price
pub min_gas_price: u64,

/// The minimum allowed byte price
pub min_byte_price: u64,
These are enforced in the transaction pool rather than the consensus rules, since fee market management isn't the job of consensus.
It also does some miscellaneous cleanup of unneeded Arcs.",4,4
308,2022-05-06T14:52:47Z,2022-05-06T20:44:48Z,2022-05-06T20:44:48Z,1,126,48,"fixes #279
Sometimes during our CI test runs, a peer would disconnect and our get_peer_info(peer_id).unwrap() would break the tests,
I introduce a check with Some(peer_info) = get_peer_info(peer_id) .
I have also added a test that confirms that if a connection fails during testing that it will be re-established, continuing the testing logic where it left off prior to disconnect.
An improvement would also be introducing caching on peer disconnecting, will create an issue for it.",2,0
309,2022-05-07T05:10:45Z,2022-05-08T19:31:22Z,2022-05-08T19:31:22Z,6,23,1,"ensure deployment scripts won't silently continue after an error
wait on all fuel-core resources to be deleted before continuing

I was running into issues when using ""Flag to delete previous infrastructure on new deployments"" because it was attempting to create the same PVC while the old one was still being deleted, leading to stalled pod deployments that never got assigned a volume.",2,0
311,2022-05-08T21:02:47Z,2022-05-08T23:41:35Z,2022-05-08T23:41:35Z,1,4,0,,2,0
312,2022-05-09T01:21:31Z,2022-05-09T22:02:16Z,2022-05-09T22:02:16Z,6,249,143,"There was a missing link while implementing #307 to actually forward the config values from fuel-core to the fuel-txpool module, preventing the node from properly using the min_gas_fee and min_byte_fee settings. This PR finishes the piping of those config values and updates the integ tests to ensure it's working end-to-end.",4,1
314,2022-05-09T22:36:08Z,2022-05-10T18:52:07Z,2022-05-10T18:52:07Z,2,22,61,"Fixes a docker image building issue due to a bug in cargo-chef that was triggered by the addition of the relayer
Make docker image building a standard part of CI, so that these issues will be caught earlier. This will also open up the possibility of us having similar capabilities to GitLab review apps from a feature branch of fuel-core (e.g. spin up a hosted env with predicates enabled)
Also found a bug with the way our rust caching action was interacting with the new matrix style builds. The matrix commands need to be included in the cache key, otherwise the cache will be corrupted by other jobs using different feature flags. This drops our cached build times by 50% in some cases.
Add timeout to cargo-verifications to prevent stalled jobs from running for hours.",3,1
316,2022-05-10T21:59:20Z,2022-05-10T23:53:00Z,2022-05-10T23:53:00Z,3,5,1,"I was having issue obtaining certs from the fuel-core ingress when deploying new environments. Making the secret unique to each ingress controller seems to fix this issue and allows the certs to be issued very quickly <1m.
also fixed the ingress deletion script as it wasn't working properly.",2,0
317,2022-05-11T00:08:23Z,2022-05-11T05:02:42Z,2022-05-11T05:02:42Z,8,17,17,"prepare for release of the following features:

min gas fee config: #307
at least one coin input per tx: #306",2,0
323,2022-05-12T21:13:28Z,2022-05-16T20:22:11Z,2022-05-16T20:22:11Z,7,47,8,"This PR fixes an issue on hasPreviousPage and hasNextPage;
Use case
To navigate from the first page to the last page, being the first page the latest transactions.
Page 1
To do that we query transactions using;
transactions(last: 5) {....
Next -> Page 2
To go to the next page we use the startCursor returned from the previous query and pass it as a cursor;
transactions(last: 5, before: ""<startCursor>"") {....
Previous -> Page 1
Now navigate to the previous page we use the endCursor returned from the previous query;
transactions(first: 5, after: ""<endCursor>"") {....
This returns hasPreviousPage and hasNextPage as true. But it should return hasNextPage as false.",2,2
327,2022-05-16T19:53:15Z,2022-05-16T21:54:45Z,2022-05-16T21:54:45Z,1,3,1,"In a previous PR (#325) I thought using exit 0 in the publish docker image job would cancel it early. Apparently, that just ends the current step and the job keeps going. This changes it back to exit 1 to ensure the job is canceled. This shouldn't cause any further slack issues (apart from potentially a double notification) since those notifications are restricted to master and tags only.
This pr also allows CI to pass if the p2p job fails since there's extensive troubleshooting underway there to resolve flakiness.",2,0
328,2022-05-16T23:11:26Z,2022-05-17T03:47:45Z,2022-05-17T03:47:45Z,17,234,84,"Updates fuel-core to the latest available fuel-* dependencies. This includes the following changes:

Hex-string based serde serialization for primitive fuel types
Fix bytecode_length in fuel-tx signature validation
fixes to next_page / previous_page when paginating transactions
new feature flag format using weak deps (no more serde-types-minimal etc)

Also had to update some of the expected error messages in the txpool due to formatting changes in our types.",3,0
341,2022-05-18T21:13:49Z,2022-06-03T20:50:24Z,2022-06-03T20:50:24Z,14,4,703,remove k8s terraform code,2,0
342,2022-05-19T02:39:40Z,2022-05-19T23:39:57Z,2022-05-19T23:39:57Z,11,225,2,"This PR adds a new ci job which will cross-compile fuel-core binaries to various platforms when released. We had to deviate from the approach used in sway, and go with the cross framework instead because of the following rust-bindgen issues:

rust-rocksdb/rust-rocksdb#550
rust-lang/rust-bindgen#1229

Since rocksdb also requires clang, this also required extending the default cross dockerfiles to either update or install the llvm toolchain for each target.
Tested the release process using this branch here: https://github.com/FuelLabs/fuel-dummy-test/releases/tag/v0.2.57",3,1
344,2022-05-20T00:19:30Z,2022-05-20T16:14:12Z,2022-05-20T16:14:12Z,1,2,1,"disable slack notifications for mac builds since the action is incompatible with osx
https://github.com/FuelLabs/fuel-core/runs/6516776368?check_suite_focus=true#step:16:22",2,0
346,2022-05-20T15:56:23Z,2022-05-20T19:17:02Z,2022-05-20T19:17:02Z,6,92,148,"Closes #324
After creating a small local p2p network and testing it out here are some findings and respective changes:
Reconnect is guaranteed
As long as Kademlia's random walk is enabled in the config (as is in the tests), the node will try to reconnect to another node if they disconnected previously. It will try to do that every 60 seconds, which is the max interval currently set in random walk.
Random walk tries to discover a random peer + it gets closest peers it already knows and tries to connect to them if not already connected.
Changes:

Removed the sanity reconnect test, since it is not needed and is buggy (more on it in the next section)

Multiple notifications for a single event might've caused issues with logic in the tests
I have noticed some events like PeerConnected or PeerDisconnected appear multiple times from libp2p and consequently are propagated to our p2p service. Some tests that relied on those events, like now removed peer_reconnects_after_disconnect() potentially got their flow messed up because of it and they ended up stalling.
While debugging this I have also found a flaw in our logic when it comes to counting connected peers, since I would just increment a counter on each established connection, since some events were propagated multiple times for the same event, we would end up incrementing the connected_peers count multiple times for a single peer!
Changes:

removed connected_peers count in favor of a HashSet<PeerId>, this way each original connect/disconnect is counted only once
only propagate unique  Connect/Disconnect events once to the p2p service by utilizing newly added HashSet where we track connected peers

Peer Info intervals can be customized
Up until now we depended on default values for how often would a peer get identified and/or pinged.
I have added 2 more config field options in order to customize these intervals, giving us more flexibility.
Using smaller intervals for our tests should in theory drive tests faster to completion.
Other changes
Our tests were ran concurrently and all of them had the same network name - which could cause some interference.
While we already moved to executing tests synchronously - I have changed the name of each test's network name to match the name of the test itself.
Does this mean there won't be any stalling tests like EVER?
Unfortunately no, we cannot guarantee that at this point. What we've done here is removed most of the possible causes.
It's hard to detect from the CI did the connection break between the peers or there was some bug in the test flow.
Hence we should run some cron jobs with tracing enabled in order to discover possible issues.",2,3
347,2022-05-21T01:31:43Z,2022-05-21T05:01:47Z,2022-05-21T05:01:47Z,7,131,11,"While ethereum has .call for querying read-only methods on contracts, our dry-run has the ability to fully simulate the end to end execution of a transaction including the txpool rules. While this is great for things like estimating gas costs and predicting result of a transaction execution which modifies state, it's inconvenient for simple read-only use-cases if simulated txs require real coin inputs and valid signatures.
To improve the read-only call-style experience, this PR adds a new optional utxo_validation parameter to the dry run API. This allows the SDK to bypass coin and signature validation normally applied to a transaction. This was added in a non-breaking way, allowing for this to be a patch release to fuel-core.",3,0
350,2022-05-21T21:08:44Z,2022-05-24T19:45:11Z,2022-05-24T19:45:11Z,11,297,154,"This PR implements a couple things
- The Salt object on the Contract Object, as a new field on an existing structure
- A new endpoint for querying the balance of a Contract
- Added this new endpoint for fuel-client
- Updated the appropriate snapshot tests, and schema for the above
I wrote 3 tests for this, as well as reshuffled around the TestSetupBuilder into a new helpers file, as it was needed in my contracts tests as well, but was only avaliable in the /tx tests, so it's since been moved to a new helpers.rs
Tests cover that the Salt contract object exists, and a test to cover that when a contract has no balance 0 is returned, and a test to ensure it returns the correct balance when the contract does have a balance.
To fully close the Contracts API issue a cursor paginated query still needs to be implemented, and contract connection, but as both of the components usually build on an underlying request, I thought it would be better to get contract balance in, before then adding features to extend its functionality",3,0
352,2022-05-24T01:24:22Z,2022-05-24T04:04:17Z,2022-05-24T04:04:18Z,8,17,17,Small release to enable more user-friendly dry_run functionality in utxo-validated environments: #347,2,0
353,2022-05-24T05:00:11Z,2022-05-24T16:07:25Z,2022-05-24T16:07:25Z,1,1,1,used the wrong value to check against macos when trying to prevent the slack action from running.,2,0
354,2022-05-24T07:05:20Z,2022-05-24T16:08:32Z,2022-05-24T16:08:32Z,1,1,1,"""cargo xtask build"" command only runs ""cargo build"" command and ""cargo run"" build only for development. It only creates a debug directory. It doesn't create a release directory. To create a release directory or run it on production and optimized ""cargo xtask build"" should run ""cargo build --release"" command.",3,2
355,2022-05-25T01:00:51Z,2022-05-25T20:33:39Z,2022-05-25T20:33:39Z,23,692,534,"Adds support for the new Input type CoinPredicate. This will only break Rust dependents, graphql and ts consumers won't be affected.
This also adds a feature flag called predicates to the fuel-core service config which allows the node to reject tx's with predicates until they are stabilized.",3,0
357,2022-05-25T16:11:40Z,2022-05-25T17:48:37Z,2022-05-25T17:48:37Z,1,1,1,"Was using ci.yml from this repo as reference for fuelup, and @Voxelot pointed this out in a review",3,0
358,2022-05-25T23:26:16Z,2022-05-26T00:59:18Z,2022-05-26T00:59:18Z,27,273,73,"Enables predicate execution by utilizing FuelLabs/fuel-vm#129
Adds configurable parameters for transaction validation in the chainspec
Re-export fuel-deps from fuel-gql-client, so SDK or other downstream users won't have to worry about aligning the versions on their end for fuel-vm, fuel-tx, and fuel-types.",3,2
369,2022-05-27T13:57:47Z,2022-05-31T19:22:34Z,2022-05-31T19:22:34Z,7,138,35,"I have added more log events to p2p tests,
I have also added [optional] logging for the tests, specifically for our cron jobs.
The logs will be written to stderr and to a log file.
Few other updates:

renamed some variables in p2p tests
added few default derive traits to few structs, like Clone, Copy etc",2,0
370,2022-05-27T16:13:34Z,2022-05-30T17:48:29Z,2022-05-30T17:48:30Z,15,218,176,"Closes #310
I updated async-graphql to v4
In this latest version they removed append() method from Connection so I had to extend the edges with
conn.edges.extend() directly
Our other problem was that our Errors weren't constrained to Send + Sync, so I added those constraints and now it compiles",3,2
372,2022-05-29T12:18:25Z,2022-05-31T18:56:13Z,2022-05-31T18:56:13Z,10,182,7,"Closes #361
created Query object NodeQuery,
node_info() - returns newly defined struct NodeInfo",4,4
373,2022-05-29T13:00:46Z,2022-06-03T07:39:10Z,2022-06-03T07:39:11Z,7,148,3,"closes #362
Created ConsensusParameters struct with all the necessary fields, and made it part of the ChainInfo query - that is, gave it its own queryable method consensus_parameters.",5,4
375,2022-05-29T21:59:19Z,2022-05-30T21:52:28Z,2022-05-30T21:52:28Z,2,13,5,,3,0
376,2022-05-31T04:27:10Z,2022-06-03T17:00:39Z,2022-06-03T17:00:39Z,9,324,6,"Should fix and mean everything in #71  has now been addressed, closing up on the contracts API.
Adds an endpoint for contract balances, using iter_all to fetch the balance for each asset, of all possible assets the contract has. This is my first time writing a query which requires a cursor and pages, so it's heavily based off of the existing balances endpoint.
I also haven't been to close to the db yet, so safety of the db query is something I wasn't sure on.",3,0
377,2022-05-31T12:28:56Z,2022-06-17T11:46:08Z,2022-06-17T11:46:08Z,4,257,51,"Implemented validator_get function that can get validator set that is in past in regards to the current finalized set.
StakingDiff DB table is extended to contain both old and new validator consensus_key.",4,2
379,2022-06-01T08:37:05Z,,2022-06-06T23:54:14Z,3,104,225,Attempt to simplify the pending_blocks structure a lot by simply removing reverted pending blocks since they aren't used by anything. It's hard to say if everything works as intended because the test coverage for handling revert logic in the finalization_queue module isn't implemented.,3,2
380,2022-06-02T11:09:32Z,2022-06-08T08:11:24Z,2022-06-08T08:11:24Z,37,604,26,"Introduced missing modules into fuel core:

fuel-block-executor
fuel-block-importer
fuel-block-producer
fuel-core-bft
fuel-sync

Introduces events defined in wiki: https://github.com/FuelLabs/fuel-core/wiki/Interfaces-between-fuel-client-modules
Bound them together and introduced a skeleton for event-driven architecture.",4,4
381,2022-06-02T16:49:55Z,2022-06-06T12:57:47Z,2022-06-06T12:57:47Z,1,291,311,"This is probably going to break some things. Maybe we can delay it after few outstanding pull request get merged as to not introduce merge conflicts.
Simple run cargo update and get updated all deps:
~/workspace/fuel/fuel-core$ cargo update
    Updating crates.io index
    Updating git repository `https://github.com/rakita/ethers-rs.git`
    Updating git repository `https://github.com/rust-ethereum/ethabi`
    Updating anyhow v1.0.55 -> v1.0.57
    Updating async-global-executor v2.0.2 -> v2.1.0
    Updating async-io v1.6.0 -> v1.7.0
    Removing async-mutex v1.4.0
    Updating async-process v1.3.0 -> v1.4.0
    Updating async-std v1.10.0 -> v1.11.0
    Updating async-stream v0.3.2 -> v0.3.3
    Updating async-stream-impl v0.3.2 -> v0.3.3
    Updating async-task v4.1.0 -> v4.2.0
    Updating async-trait v0.1.52 -> v0.1.53
    Updating base-x v0.2.8 -> v0.2.10
    Updating blocking v1.1.0 -> v1.2.0
    Updating bumpalo v3.9.1 -> v3.10.0
    Updating camino v1.0.7 -> v1.0.9
    Updating clang-sys v1.3.1 -> v1.3.3
    Updating clap v3.1.2 -> v3.1.18
    Updating clap_derive v3.1.2 -> v3.1.18
      Adding clap_lex v0.2.0
    Updating cpufeatures v0.2.1 -> v0.2.2
    Updating crossbeam-utils v0.8.7 -> v0.8.8
    Updating darling v0.13.1 -> v0.13.4
    Updating darling_core v0.13.1 -> v0.13.4
    Updating darling_macro v0.13.1 -> v0.13.4
    Updating dirs-sys v0.3.6 -> v0.3.7
    Updating ed25519 v1.4.0 -> v1.5.2
    Updating encoding_rs v0.8.30 -> v0.8.31
    Updating flate2 v1.0.22 -> v1.0.24
    Updating getrandom v0.2.5 -> v0.2.6
    Updating gloo-timers v0.2.3 -> v0.2.4
    Updating http v0.2.6 -> v0.2.7
    Updating http-body v0.4.4 -> v0.4.5
    Updating http-client v6.5.1 -> v6.5.2
    Updating httparse v1.6.0 -> v1.7.1
    Updating hyper v0.14.17 -> v0.14.19
    Updating indexmap v1.8.0 -> v1.8.2
    Updating insta v1.12.0 -> v1.14.1
    Updating ipnet v2.3.1 -> v2.5.0
    Updating itoa v1.0.1 -> v1.0.2
    Updating js-sys v0.3.56 -> v0.3.57
    Updating keccak v0.1.0 -> v0.1.2
    Updating libc v0.2.119 -> v0.2.126
    Updating libp2p-swarm-derive v0.27.1 -> v0.27.2
    Updating libz-sys v1.1.3 -> v1.1.8
    Updating lock_api v0.4.6 -> v0.4.7
    Updating log v0.4.14 -> v0.4.17
    Updating lru v0.7.3 -> v0.7.6
    Updating memchr v2.4.1 -> v2.5.0
    Updating miniz_oxide v0.4.4 -> v0.5.3
    Updating mio v0.8.0 -> v0.8.3
    Removing miow v0.3.7
    Updating nom v7.1.0 -> v7.1.1
    Removing ntapi v0.3.7
    Updating num-integer v0.1.44 -> v0.1.45
    Updating num-traits v0.2.14 -> v0.2.15
    Updating once_cell v1.9.0 -> v1.12.0
    Updating os_str_bytes v6.0.0 -> v6.1.0
    Updating parking_lot v0.12.0 -> v0.12.1
    Updating parking_lot_core v0.9.1 -> v0.9.3
    Updating petgraph v0.6.0 -> v0.6.2
    Updating pin-project-lite v0.2.8 -> v0.2.9
    Updating pkg-config v0.3.24 -> v0.3.25
    Updating proc-macro2 v1.0.36 -> v1.0.39
    Updating quote v1.0.15 -> v1.0.18
    Updating redox_syscall v0.2.10 -> v0.2.13
    Updating redox_users v0.4.0 -> v0.4.3
    Updating rustls v0.20.4 -> v0.20.6
    Removing rustversion v1.0.6
    Updating ryu v1.0.9 -> v1.0.10
    Updating semver v1.0.6 -> v1.0.9
    Updating serde v1.0.136 -> v1.0.137
    Updating serde_derive v1.0.136 -> v1.0.137
    Updating serde_json v1.0.79 -> v1.0.81
    Updating serde_with v1.12.0 -> v1.14.0
    Updating serde_with_macros v1.5.1 -> v1.5.2
    Updating serde_yaml v0.8.23 -> v0.8.24
    Updating signal-hook v0.3.13 -> v0.3.14
    Updating slab v0.4.5 -> v0.4.6
    Updating spin v0.9.2 -> v0.9.3
    Updating syn v1.0.86 -> v1.0.95
    Updating termcolor v1.1.2 -> v1.1.3
    Updating textwrap v0.14.2 -> v0.15.0
    Updating thiserror v1.0.30 -> v1.0.31
    Updating thiserror-impl v1.0.30 -> v1.0.31
    Updating tinyvec v1.5.1 -> v1.6.0
    Updating tokio v1.17.0 -> v1.18.2
    Updating tokio-util v0.7.1 -> v0.7.2
    Updating toml v0.5.8 -> v0.5.9
    Updating tower-http v0.2.3 -> v0.2.5
    Updating tracing v0.1.31 -> v0.1.34
    Updating tracing-core v0.1.22 -> v0.1.26
    Updating tracing-log v0.1.2 -> v0.1.3
    Updating unicode-bidi v0.3.7 -> v0.3.8
      Adding unicode-ident v1.0.0
    Updating unicode-xid v0.2.2 -> v0.2.3
    Updating value-bag v1.0.0-alpha.8 -> v1.0.0-alpha.9
      Adding wasi v0.11.0+wasi-snapshot-preview1
    Updating wasm-bindgen v0.2.79 -> v0.2.80
    Updating wasm-bindgen-backend v0.2.79 -> v0.2.80
    Updating wasm-bindgen-futures v0.4.29 -> v0.4.30
    Updating wasm-bindgen-macro v0.2.79 -> v0.2.80
    Updating wasm-bindgen-macro-support v0.2.79 -> v0.2.80
    Updating wasm-bindgen-shared v0.2.79 -> v0.2.80
    Updating web-sys v0.3.56 -> v0.3.57
    Updating webpki-roots v0.22.2 -> v0.22.3
    Updating which v4.2.4 -> v4.2.5
    Updating windows-sys v0.32.0 -> v0.36.1
    Updating windows_aarch64_msvc v0.32.0 -> v0.36.1
    Updating windows_i686_gnu v0.32.0 -> v0.36.1
    Updating windows_i686_msvc v0.32.0 -> v0.36.1
    Updating windows_x86_64_gnu v0.32.0 -> v0.36.1
    Updating windows_x86_64_msvc v0.32.0 -> v0.36.1",3,0
383,2022-06-03T06:31:20Z,2022-06-28T08:24:05Z,2022-06-28T08:24:05Z,3,41,8,"Upgrade rocksdb, enable jemalloc.
Also, change compression algorithm to lz4 as that is recommended by RocksDB docs. Disable inclusion of alternate unused compression schemes.",3,1
394,2022-06-06T10:55:36Z,2022-06-10T15:49:07Z,2022-06-10T15:49:07Z,11,105,28,"This in favor of #313
I have defined:

Gossipsub Messages
Request/Response Messages

In order to unblock myself I have added a placeholder for Vote struct from FuelLabs/fuel-bft#9
in fuel-core-interfaces .
In this PR I also fixed a bug in serde feature in fuel-core-interfaces where time field of FuelBlockHeader is not properly serialized, by importing serde feature from chrono dep.
I have added a max_response_size field to BincodeCodec since max FuelBlock size is configurable and we need to configure max size of both Request and Response messages. Max request size is pretty straightforward but response message size depends on max block size.",4,2
400,2022-06-07T12:22:07Z,2022-06-07T18:26:25Z,2022-06-07T18:26:25Z,1,2,1,This is just so that new Fuel contributors don't mistakenly use forked repositories.,3,0
402,2022-06-10T17:22:58Z,2022-07-08T19:59:31Z,2022-07-08T19:59:31Z,13,645,177,"Network Orchestrator is the service that:

holds and runs p2p service
holds multiple tokio::sync::mpsc::Sender values for propagating p2p messages to different components
holds and listens from tokio::sync::mpsc::Receiver to get messages from different fuel-core components

This initial version is (loosely) based on miro design.
Apart from general design I would need feedback on specific components",5,4
403,2022-06-13T03:09:27Z,2022-06-14T02:49:37Z,2022-06-14T02:49:37Z,1,3,4,"This PR is meant to fix issues that were not properly addressed in the previous PR: #271
Essentially the Docker step has a dependency on Publishing to Crates, however, we manually ignore this since the Docker step has if: always() so all dependencies within the Docker step are currently being ignored.",3,2
404,2022-06-13T03:57:09Z,2022-06-15T19:33:14Z,2022-06-15T19:33:15Z,10,353,8,"Designed to close #167
Design
Uses Lazy Static to host Prometheus counters, which are then written to whenever the database performs read and write operations. This is then hosted on a /metrics endpoint using the same design as @uberscott 's rustometer.
Test
Test is a bit messy with turbofish, I wasn't sure how to clean it up but if is too ugly I can look for a different way. I ran into some weird behavior with the counter returning inconsistent results when run with all the tests (so it was different between cargo test and cargo test metrics). I think this is mostly to do with the testing harness starting and stopping tests weirdly async, and won't be replicated in actual use.",2,2
405,2022-06-13T08:45:19Z,2022-06-21T18:34:44Z,2022-06-21T18:34:44Z,3,44,2,"Currently the GraphQL debugger API doesn't make receipts availble. This PR adds receipts to RunResult responses, so that they are communicated to the caller every time a breakpoint is hit and when the transaction terminates.",3,2
407,2022-06-13T18:22:41Z,2022-06-24T09:47:07Z,2022-06-24T09:47:07Z,13,586,439,Add channels to txpool service,6,4
409,2022-06-14T08:36:51Z,2022-09-24T00:45:53Z,2022-09-24T00:45:53Z,34,1436,241,"Initial base for the block producer service WIP
Leveraging ports & adapters architecture to unblock development from depending on other components & also to improve composability & testability.
The main principle behind the P&A design is to allow the component to specify all external dependencies via its' own traits which don't need to be depended on by others. Fuel Core can provide adapter impls at a later time when feasible, while allowing the block producer to be logically implemented and functionally tested in the meantime as a self-contained unit.
I'm also experimenting with the service design a bit, it seems like treating the service as a dummy wrapper for spawning the stateful block producer task makes the borrow checker happier and avoids the need for mutexes and other concurrency primitives.",6,10
410,2022-06-14T11:55:56Z,2022-06-14T15:33:58Z,2022-06-14T15:33:58Z,2,48,318,,3,0
411,2022-06-15T04:00:26Z,2022-06-15T08:20:46Z,2022-06-15T08:20:46Z,68,271,238,"To make version bumps less painful, all external fuel-* deps (vm, asm, crypto, merkle, storage, ...) are centrally managed by fuel-core-interfaces which re-exports them for other modules. This will help avoid issues with missed version bumps, and also generally make version bumping in fuel-core less painful.
The only crate these re-exports won't affect is fuel-gql-client, as it doesn't use fuel-core-interfaces (nor should it, as the interfaces are for fuel-core internal module integrations).
If we wanted to fully dedupe these imports, we'd need to make a new workspace crate that simply imports all the common deps and re-exports them back out. This could then be used by fuel-core-interfaces and fuel-gql-client. I opted not to do this for now, since bumping in 2 places is still better than 12 and didn't want the overhead of another published crate just yet.",2,0
412,2022-06-15T07:57:54Z,2022-06-15T19:18:17Z,2022-06-15T19:18:17Z,19,56,36,"Update to the latest VM to make use of gas_price_factor. Also, make the necessary changes to support configuring this param from the chainspec.
ref: FuelLabs/fuel-specs#343
blocked by #411",3,1
413,2022-06-15T08:05:38Z,2022-06-15T19:02:48Z,2022-06-15T19:02:48Z,1,1,0,this was a minor detail that got missed when making the relayer publishable,2,0
414,2022-06-15T08:27:04Z,2022-06-15T17:04:11Z,2022-06-15T17:04:11Z,1,3,1,"Fuel Client expects a valid parseable URL for construction, but provided no context with the error. This could lead to confusion for forc users if they provided a bad argument like forc run something_not_a_url, as they'd only receive an error message like relative URL without a base.
Using anyhow to provide context, the error message will now include the provided URL back so users can more easily identify the problem.
New error format:
called `Result::unwrap()` on an `Err` value: Invalid fuel-core URL: something_not_a_url

Caused by:
    relative URL without a base",3,0
421,2022-06-16T14:42:42Z,2022-06-22T11:47:55Z,2022-06-22T11:47:55Z,8,114,95,"Semantic change and introduction of ValidatorAddress and ConsensusPublicKey types.
Discussion started here: https://github.com/FuelLabs/fuel-core/pull/377/files#r896284757",4,4
422,2022-06-17T18:18:56Z,2022-06-17T19:30:36Z,2022-06-17T19:30:36Z,1,23,12,"After we insert the gas_price_factor to calculate gas, the verify_gas started to break, because it didn't consider the  gas_price_factor when calculating the gas.checked_sub(total_gas_required) causing the TX to not pass the validation.
On this fix I made:

Change the retrieve gas available amount to also filter by AssetId:default() as outputs do.
Calculate the total_gas_required and divide it by the gas_price_factor and ceil the result.

Now when returning the error InsufficientFeeAmount it would present the two values in the final amount as ex.: { provided: 1, required: 2 }.
Use case:
In a wallet with 1000000 Native Coins
I'm going to do a TX that consumes ~2000000 Gas Units which cost in native coins (<Gas Units>/<Gas Price Factor>) = 2 Native Coins
When sending the TX it was failing with the return InsufficientFeeAmount { provided: 1000000, required: 1999992 }
Wich is incorrect because the required fee should be 1999992/1000000 = 2 Native Coins.
Notes:
If I add an amount of 3000000 Native Coins to the wallet, it would work and consume just the correct amount ~2 Native Coins.",3,0
423,2022-06-17T18:44:06Z,2022-06-17T19:50:36Z,2022-06-17T19:50:37Z,13,39,39,"Requires

 #422",2,0
427,2022-06-20T16:58:00Z,2022-06-21T00:14:45Z,2022-06-21T00:14:46Z,2,40,4,"Closes #416 , added a script and a submit call to ensure batch_write is actually tested with metrics. Working fine and minimal changes, just a quick fix.",2,0
428,2022-06-20T23:20:19Z,2022-06-21T20:39:36Z,2022-06-21T20:39:37Z,1,65,63,"Fixes https://github.com/FuelLabs/fuel-core/security/dependabot/3
Update cynic which has a transitive dependency on dashmap to pick up https://github.com/http-rs/http-client/releases/tag/v6.5.3.
$ cargo update -p cynic --aggressive
    Updating crates.io index
    Updating anyhow v1.0.57 -> v1.0.58
    Updating async-global-executor v2.1.0 -> v2.2.0
    Updating async-std v1.11.0 -> v1.12.0
    Updating crossbeam-utils v0.8.8 -> v0.8.9
    Updating dashmap v4.0.2 -> v5.3.4
    Updating getrandom v0.2.6 -> v0.2.7
      Adding hashbrown v0.12.1
    Updating http-client v6.5.2 -> v6.5.3
    Updating js-sys v0.3.57 -> v0.3.58
    Updating mio v0.8.3 -> v0.8.4
    Updating proc-macro2 v1.0.39 -> v1.0.40
    Updating quote v1.0.18 -> v1.0.20
    Updating syn v1.0.96 -> v1.0.98
    Updating tokio v1.19.1 -> v1.19.2
    Updating unicode-ident v1.0.0 -> v1.0.1
    Removing wasi v0.10.2+wasi-snapshot-preview1
    Updating wasm-bindgen v0.2.80 -> v0.2.81
    Updating wasm-bindgen-backend v0.2.80 -> v0.2.81
    Updating wasm-bindgen-futures v0.4.30 -> v0.4.31
    Updating wasm-bindgen-macro v0.2.80 -> v0.2.81
    Updating wasm-bindgen-macro-support v0.2.80 -> v0.2.81
    Updating wasm-bindgen-shared v0.2.80 -> v0.2.81
    Updating web-sys v0.3.57 -> v0.3.58",2,1
435,2022-06-23T20:12:47Z,2022-07-08T00:53:36Z,2022-07-08T00:53:36Z,14,459,139,,4,8
436,2022-06-24T02:54:21Z,2022-06-24T21:52:03Z,2022-06-24T21:52:03Z,2,35,4,this will handle sigkill commands to drain existing api connections before terminating the server,2,1
437,2022-06-24T11:04:14Z,2022-06-24T16:33:10Z,2022-06-24T16:33:10Z,2,8,11,"pins can be removed and we can just wait in select!
added info logs
and found bug inside txpool while testing shutdown",2,0
438,2022-06-24T11:18:42Z,2022-06-26T09:02:38Z,2022-06-26T09:02:38Z,4,73,27,"Wrap txpool mpsc::Sender around Sender structure that gives us better ergonomic in calling functionalities from txpool,
related to: #429",3,1
439,2022-06-24T11:31:25Z,2022-06-24T18:17:08Z,2022-06-24T18:17:08Z,2,9,12,Small nits in code,2,0
440,2022-06-24T11:35:39Z,2022-06-27T01:50:09Z,2022-06-27T01:50:09Z,41,170,160,Refactoring of main config structure and inclusion of other module configurations into one config.,4,2
441,2022-06-24T21:08:35Z,2022-07-06T01:55:46Z,2022-07-06T01:55:47Z,1,241,49,"[fixes #431]
Implements DummyDB functionality to be used on other tests.",4,2
442,2022-06-24T21:45:01Z,2022-06-25T08:11:57Z,2022-06-25T08:11:57Z,5,100,4,Guard against simultaneous block production. This is a temporary fix until we fully implement the planned client architecture (e.g. event-based block production / executor services),2,0
443,2022-06-25T00:26:51Z,2022-06-25T16:32:33Z,2022-06-25T16:32:33Z,1,2,0,The default k8s deployment strategy doesn't work for us since it waits for the new pod to pass the readiness probe before terminating the old one. For us that would cause an upgrade to hang indefinitely since the PVC/database was still held by the previously running node.,2,0
444,2022-06-25T19:50:23Z,2022-06-25T22:05:02Z,2022-06-25T22:05:02Z,2,6,6,update github actions checkout from v2 to v3,3,0
446,2022-06-27T08:25:53Z,,2023-06-16T10:24:32Z,14,43,23,"This PR adds WASM build support for all crates in this repo except for:

fuel-relayer (libp2p does not provide some required functionality on WASM)
the TCP Service in fuel-core (hyper's TCP functionality is also not available)

Needed for continuing work on FuelLabs/fuels-rs#429.
Impact on CI time is negligible, as rustup target add wasm32-unknown-unknown only downloads WASM stdlib (<1 sec).",4,4
448,2022-06-28T04:59:17Z,2022-06-28T15:59:40Z,2022-06-28T15:59:40Z,1,7,11,Update ci.yml to include the image-tag and version fields,2,0
450,2022-06-29T16:18:06Z,2022-07-05T02:20:15Z,2022-07-05T02:20:15Z,25,385,305,"Integrate fuel-relayer as fuel-core module and connect it to other module channels. Introduce relayer::Sender
Introduce ServiceBuilder in relayer so that we can build service and service can be called with  start() without any inputs.
Introduce notion of Context inside relayer so that we know what to share to fuel_relayer::run and what to expect to be returned back and kept in relayer server.",3,1
453,2022-06-30T21:44:39Z,2022-07-01T02:33:09Z,2022-07-01T02:33:09Z,1,31,38,"(This PR is a port of FuelLabs/fuels-ts#361.)
From this SO page, it seems like the way we cancel previous runs is outdated and GitHub's native concurrency setting is the current practice: https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre",2,0
456,2022-07-04T11:19:28Z,2022-07-08T20:54:27Z,2022-07-08T20:54:27Z,5,364,285,"Remove Interface and move its functionality to TxPool struct.
introduce ServiceBuilder and Context",4,0
459,2022-07-04T16:09:17Z,2022-07-04T21:40:15Z,2022-07-04T21:40:15Z,3,23,12,"Updates fuel-merkle to v0.3.0
Replaces the usage of the standard binary Merkle tree and storage map with an in-memory binary Merkle tree
Uses the in-memory BMT's infallible interface and removes calls to expect",2,0
462,2022-07-05T21:59:39Z,2022-07-06T02:37:42Z,2022-07-06T02:37:42Z,1,38,48,"Fixes https://github.com/FuelLabs/fuel-core/security/dependabot/6 (GHSA-x4mq-m75f-mx8m).
Update if-watch, which depends on windows to pick up mxinden/if-watch#16.
$ cargo update -p if-watch --aggressive 
    Updating crates.io index
    Updating if-watch v1.0.0 -> v1.1.1
    Removing memoffset v0.6.5
    Updating netlink-packet-route v0.11.0 -> v0.12.0
    Updating netlink-proto v0.9.2 -> v0.10.0
    Updating netlink-sys v0.8.2 -> v0.8.3
    Updating nix v0.22.3 -> v0.24.1
    Updating once_cell v1.12.0 -> v1.13.0
    Updating rtnetlink v0.9.1 -> v0.10.1
    Updating serde v1.0.137 -> v1.0.138
    Updating serde_derive v1.0.137 -> v1.0.138
    Updating smallvec v1.8.0 -> v1.9.0
    Updating windows v0.29.0 -> v0.34.0
    Updating windows_aarch64_msvc v0.29.0 -> v0.34.0
    Updating windows_i686_gnu v0.29.0 -> v0.34.0
    Updating windows_i686_msvc v0.29.0 -> v0.34.0
    Updating windows_x86_64_gnu v0.29.0 -> v0.34.0
    Updating windows_x86_64_msvc v0.29.0 -> v0.34.0",3,1
466,2022-07-07T13:44:40Z,2022-07-11T21:07:03Z,2022-07-11T21:07:03Z,9,202,127,some small renamings and adding cli for relayer,2,4
467,2022-07-08T02:23:53Z,2022-07-08T19:33:22Z,2022-07-08T19:33:22Z,2,2,1,,2,2
468,2022-07-08T10:32:12Z,2022-07-08T14:59:53Z,2022-07-08T14:59:53Z,5,85,87,"Try to parse new cli and if it fails try to parse legacy one. If Legacy one has an error return error from new cli as it is the way we want to go. This is temporary and legacy cli will be removed in future.
Little bit of code refactored.",2,0
475,2022-07-11T15:36:32Z,2022-07-11T16:45:39Z,2022-07-11T16:45:39Z,2,0,25,"Closes #474 , tempdir had already been moved out of in favor of tempfile",2,1
484,2022-07-12T07:36:49Z,2022-07-13T21:21:45Z,2022-07-13T21:21:45Z,13,45,44,"tx maturity fixes (from fuel-vm v0.12.1)
new api to produce blocks in test environments
snapshot node state to json via cli
new cli format for running fuel-core
other internal changes and work for future client features
gas overflow bug fix",4,1
485,2022-07-12T13:58:56Z,2022-07-29T21:19:52Z,2022-07-29T21:19:52Z,18,443,267,Replace DepositCoin with DaMessage,3,1
488,2022-07-13T11:17:51Z,2022-07-13T14:37:52Z,2022-07-13T14:37:52Z,1,1,0,"Small change, remove metadata from serialization.",2,0
491,2022-07-14T20:28:39Z,2022-07-28T22:25:49Z,2022-07-28T22:25:49Z,6,344,57,"Design to closes #477 and #478 . Adds 2 new channels to the txpool designed for p2p to hook into. One channel is a mpsc channel designed to send transactions received on the txpool from the gql endpoint to p2p, so that it can broadcast them to other nodes. The other is a simple broadcast channel which is used to receive transactions from p2p which should be included in the txpool. Tests are bit rough atm and need some polishing, but making a draft PR for general design review and feedback",3,10
492,2022-07-15T12:38:33Z,2022-08-24T07:07:27Z,2022-08-24T07:07:27Z,19,542,163,"Resolves #480
I have included both things in a single PR since once I included p2p into fuel-core and added p2p field to config the cli part of the codebase was complaining.
For clarity, there is:

P2pService
NetworkOrchestrator which contains P2pService
Service which wraps the NetworkOrchestrator (I have named it Service to keep in line with other modules that had top level Service)

Creating the top level Service
I have went and implemented a similar pattern for the network as our other Services have done, by adding start() and stop() methods.
I have achieved that by wrapping the NetworkOrchestrator into a Service but I had to change some things:
P2P Service and Network needed to shut down
Unlike  some other simpler Services, once network Service was stopped, we needed to shut down the whole p2p network.
I have achieved that by moving p2p_service from a NetworkOrchestrator field into a simple variable within run() method, so once run() ended (ie stop() was called) the p2p_service would go out of scope and get removed completely.
And if start() was called again, a new p2p_service would be instantiated - I had to keep the p2p_config within the NetworkOrchestrator for this case.
FuturesUnordered and their blocking of the executor
While testing out start() and stop() I have discovered a bug in our NetworkOrchestrator.
It's field outbound_responses which was of type
type ResponseFuture = Pin<Box<dyn Future<Output = Option<(OutboundResponse, RequestId)>>>>;
FuturesUnordered<ResponseFuture>

once called next() on it, it would return None so in our loop { tokio::select!... pattern it was constantly returning None
without letting any other items to be polled, basically it was blocking the executor. I discovered this while adding tokio's sleep within a test, and it never got to finish! So I have changed this part of the code slightly by using tokio's channels instead of FuturesUnordered.
There were few other changes and clean ups.",5,6
493,2022-07-15T13:10:16Z,2022-07-22T08:53:37Z,2022-07-22T08:53:37Z,6,26,9,"Since the argument can be multiple blocks, it makes sense for it to be plural.",3,3
495,2022-07-19T12:53:06Z,2022-07-19T15:08:52Z,2022-07-19T15:08:52Z,3,17,13,"Format proper output on cli error or when asking for --help or --version.
bump clap to 3.2.12
related to #494",2,0
501,2022-07-23T23:36:03Z,,2022-09-05T21:31:08Z,42,50,42,,2,1
502,2022-07-25T00:19:22Z,2022-07-27T16:37:18Z,2022-07-27T16:37:18Z,44,610,585,Fixes #498 among other things,3,1
506,2022-07-26T18:55:27Z,2022-09-29T03:05:37Z,2022-09-29T03:05:37Z,4,104,4,"Remotely dispatch Deploy and Delete Test Workflow Environments in Fuel-Deployment
Deploy ephemeral test workflow:

fuel-core: https://github.com/FuelLabs/fuel-core/runs/7595776886?check_suite_focus=true
fuel-deployment: https://github.com/FuelLabs/fuel-deployment/actions/runs/2768043419",4,8
508,2022-07-28T21:10:06Z,2022-07-30T03:12:30Z,2022-07-30T03:12:30Z,4,43,5,closes #415,2,0
509,2022-07-28T22:31:59Z,,2022-08-13T20:54:59Z,125,2202,3913,,3,0
510,2022-07-29T06:51:17Z,2022-07-29T18:30:19Z,2022-07-29T18:30:19Z,31,770,554,"Makes fuel-core compatible with fuel-vm 0.13.
Incorporates / propagates the following breaking changes:

FuelLabs/fuel-specs#384
FuelLabs/fuel-specs#383
FuelLabs/fuel-specs#373
FuelLabs/fuel-specs#372
FuelLabs/fuel-specs#368
FuelLabs/fuel-specs#366
FuelLabs/fuel-specs#359
FuelLabs/fuel-specs#353
FuelLabs/fuel-specs#343
FuelLabs/fuel-specs#338
FuelLabs/fuel-specs#333
FuelLabs/fuel-specs#332
FuelLabs/fuel-specs#330
FuelLabs/fuel-specs#318",2,1
518,2022-07-30T22:57:35Z,2022-08-01T16:39:28Z,2022-08-01T16:39:28Z,4,46,148,"Integration tests were creating a dependency on openssl, preventing the repo from being tested without openssl installed on the system. This PR also also includes a new CI change to prevent openssl from being included in the future.
closes: #500
Tested using a clean install of ubuntu in virtual box",2,0
524,2022-08-01T22:39:58Z,2022-08-03T01:11:36Z,2022-08-03T01:11:36Z,8,525,50,"Related issues:

closes #511",3,0
532,2022-08-04T03:42:34Z,2022-08-05T16:40:57Z,2022-08-05T16:40:57Z,1,336,65,Closes #512,3,0
533,2022-08-04T12:06:40Z,2022-08-04T19:55:49Z,2022-08-04T19:55:49Z,2,102,6,"solves #520

added the column for storing the [MessageId]
updated insert() and remove() methods so that MessageIds get persisted
added owned_message_ids() query method to the Database
added a test that verifies the functionality of the changes",2,0
536,2022-08-05T16:22:18Z,2022-08-09T15:41:35Z,2022-08-09T15:41:35Z,10,501,2,"WIP
solves #521
DONE:

I have added all_owners_and_message_ids() to the Database
to the Schema I have added MessageQuery that includes messages() and messages_by_owner()
added a test but couldn't complete it since fuel-client needs to expose those APIs

TODO

expose messages() and messages_by_owner() APIs within fuel-client
finish the test in fuel-tests/tests/messages",3,5
540,2022-08-09T06:11:26Z,2022-08-09T15:27:41Z,2022-08-09T15:27:41Z,9,71,242,Use optional owner to collapse nearly duplicate graphql interfaces.,3,1
541,2022-08-09T07:15:23Z,2022-08-10T16:16:09Z,2022-08-10T16:16:09Z,9,313,51,"closes: #487
Add ability to initialize messages in chain config's initial state along with coins and contracts.
todo: snapshot existing message state to json.",5,0
542,2022-08-09T16:42:45Z,2022-08-09T20:00:39Z,2022-08-09T20:00:39Z,18,201,204,"Related issues:

Closes #538",2,0
543,2022-08-09T23:12:42Z,2022-08-10T02:16:53Z,2022-08-10T02:16:53Z,20,278,267,Bumps versions and gets node to compile without fully implementing new features,2,0
545,2022-08-10T01:55:07Z,2022-08-10T06:52:11Z,2022-08-10T06:52:11Z,2,162,2,"implement current time for the vm, also fixes an issue where the currently executing block details were not available in the vm.",2,1
548,2022-08-10T19:26:38Z,2022-08-10T22:54:27Z,2022-08-10T22:54:28Z,13,40,40,"The long-awaited changes to fuel-core are arriving!
Breaking changes included:

removal of static contracts, bytePrice, minBytePrice
addition of TxPointer, spendable MessageInput, MessageReceipts
rocksdb upgrade
new opcodes (jmp, smo, etc..)
and much more!",3,0
549,2022-08-10T20:07:57Z,2022-08-10T22:37:16Z,2022-08-10T22:37:17Z,7,88,54,,2,1
550,2022-08-10T21:10:43Z,2022-08-10T22:18:14Z,2022-08-10T22:18:14Z,40,54,79,"This PR moves genesis chainspec configuration back to being a top-level module, and moves ""Config"" from being a top level module to being a submodule of service. This is because Config is only useful in the context of starting a FuelService, while chain_config is consumed in a larger variety of ways (e.g. node snapshot tooling).
This also reduces the number of breaking changes when migrating from v0.9.x.",3,1
552,2022-08-11T03:25:33Z,2022-08-11T04:28:19Z,2022-08-11T04:28:20Z,3,5,12,"fixes the publishing pipeline failure here: https://github.com/FuelLabs/fuel-core/runs/7779756065?check_suite_focus=true
test steps:

$ ./ci/build-images.sh
$ cross build --profile=release --target x86_64-unknown-linux-gnu -p fuel-core",2,0
557,2022-08-11T17:45:15Z,2022-08-11T22:14:27Z,2022-08-11T22:14:27Z,13,40,40,,2,0
562,2022-08-15T17:01:00Z,2022-08-23T14:10:06Z,2022-08-23T14:10:06Z,4,778,426,"Related issues:

closes #561
progresses #517

This PR refactors all tests in the fuel-txpool submodule to remove usages of the pre-seeded DummyDb. Tests now use a lightweight, empty by default database MockDb.
This approach has some advantages:

All tests are now responsible for their own setup and teardown. Tests are no longer sensitive to changes to external state.
All tests communicate their required initial state through explicit setup code. The tests more clearly which transactions in the tests are valid or invalid, and how dependencies are structured. Test setup is no longer implicit or hidden in other files.

On the other side, this has some small disadvantages:

Tests are now verbose and require more lines of code to setup, including bulky setups for the transactions

In my opinion, the advantages far outweigh the disadvantages and I believe this approach is superior to using a pre-seeded database.
In doing this refactor I noticed some things that I think should be addressed:

Test names are frequently not descriptive; readers must try to infer the goal of the test by reading the code
Many error cases are untested. Specifically, I noticed the following errors are not tested:

NotInsertedOutputNotExisting (code search shows this isn't even thrown)
NotInsertedInputContractNotExisting
NotInsertedContractIdAlreadyTaken
NotInsertedIoWrongOwner (checked in dependency.rs but not in any txpool tests)
NotInsertedIoWrongAmount (checked in dependency.rs but not in any txpool tests)
NotInsertedIoWrongAssetId (checked in dependency.rs but not in any txpool tests)
NotInsertedIoWrongMessageId
NotInsertedIoContractOutput (checked in dependency.rs but not in any txpool tests)
NotInsertedIoMessageInput (checked in dependency.rs but not in any txpool tests)


Inconsistencies in field names across structs make code confusing, e.g.,

CoinState::is_spend_by vs. ContractState::used_by vs. MessageState::spent_by


Some instances of awkward phrasing in error names and messages, e.g.,

NotInsertedInputUtxoIdNotExisting should be NotInsertedInputUtxoIdDoesNotExist",2,1
573,2022-08-20T18:29:21Z,2022-08-24T12:49:36Z,2022-08-24T12:49:36Z,1,1,0,"Adds a Dockerignore file
Closes #472
I did some testing locally but couldn't inpsect the image mid build to ensure /target wasn't being copied so need someone to confirm",2,1
574,2022-08-20T21:19:33Z,,2022-11-05T16:33:48Z,19,71,166,"Chrono has been a source of issue, this moves fuel-core to the much lighter and more maintained time crate
Fixes #115
Fixes #116
Fixes #384",3,2
575,2022-08-22T10:09:03Z,2022-09-07T08:19:33Z,2022-09-07T08:19:33Z,144,4502,1810,"Added rustfmt rules. I used my favorite rules but we can discuss your wishes=)
It requires usage of nightly rustfmt because it contains many new configurations.
Formatted the whole project, so it will make ongoing PR harder(you need to fix conflicts)
Added CI to check the fmt.",6,7
576,2022-08-23T14:55:54Z,2022-08-24T10:51:50Z,2022-08-24T10:51:50Z,5,384,40,"Related issues:

#517

This PR removes the Relayer tests' dependency on the existing DummyDb that comes pre-seeded, and uses a module level database, MockDb instead. MockDb does not come seeded with any data, and tests are expected to perform explicit setup. This means tests become more descriptive, self-documenting, and stable by removing sensitivity to data changes across shared test configurations.
The Relayer module is also the last area where the DummyDb is used. Once this PR is merged, we can also remove the DummyDb entirely, allowing us to move closer towards a convention of explicit test setup.",3,0
579,2022-08-24T13:58:20Z,2022-08-24T19:55:49Z,2022-08-24T19:55:49Z,5,43,3,keep relayer under a compile time feature flag,2,0
581,2022-08-25T09:15:06Z,2022-08-30T19:16:01Z,2022-08-30T19:16:01Z,5,146,17,Working towards making #409 mergeable,2,0
582,2022-08-25T15:59:03Z,,2022-08-31T17:30:19Z,4,29,20,"This is my take on #568, from my understanding of the task, I have added the following:

recipient field of InputMessage takes value from owner
recipient value is appended to data field of InputMessage",5,5
583,2022-08-25T17:29:53Z,2022-09-14T21:57:13Z,2022-09-14T21:57:13Z,47,1915,1456,"Refactored all tables to implement new storage traits(Also refactored all tests). Created types for all tables with descriptions and re-used tables defined in the fuel-vm.
Replaced all <Self as Storage<K, V>>::method with self.storage::<Table>().method.
The same for MerkleRootStorage and tests.
Instead of constants for columns, use the Column enum to manage tables columns(Use Column
everywhere instead of ColumnId). In the future, we can use more advanced naming for fields,
instead of ""column-{i}"" because now we have names of cloumns=)
In some places, removed unnecessary usage of Vec<u8>(in put, insert etc methods).
Removed usage of Clone and Copy for some value in the same methods.
Prepared the code for the next refactoring:

to simplify the implementation of storage-related traits
to use only read/write traits in the places where it is really required
performance improvements to work with types more optimal",3,0
589,2022-09-02T02:25:23Z,2022-09-03T14:44:08Z,2022-09-03T14:44:08Z,8,117,63,Moves Metrics into fuel-metrics allowing future metrics to be done inside of an optional crate,3,0
590,2022-09-04T00:51:39Z,2022-10-04T03:26:54Z,2022-10-04T03:26:54Z,15,665,124,"Connects P2p with TxPool which should allow transactions inserted over the txpool of one node to be broadcasted to the others. Done in collaboration with @bvrooman but this has fallen stale so I had to re-impl over master since merge conflicts and git history had grown too messy
Closes #477
Closes #478",5,6
591,2022-09-04T02:13:15Z,2022-09-14T23:00:09Z,2022-09-14T23:00:09Z,31,2178,960,"Created a new entity - Resource. It is an aggregator for the coins and messages. For more information, check the discussion at the #586
The API looks like:
struct SpendQueryElementInput {
    /// Asset ID to spend
    asset_id: AssetId,
    /// Target amount for the query
    amount: U64,
    /// The maximum number of resources for selection.
    max: Option<U64>,
}

pub struct ExcludeInput {
    /// Utxos to exclude from the selection.
    utxos: Vec<UtxoId>,
    /// Messages to exclude from the selection.
    messages: Vec<MessageId>,
}

pub enum Resource {
    Coin(Coin),
    Message(Message),
}

fn resourcesToSpend(
    // The `Address` of the resources owner.
    owner: Address, 
    // The list of requested assets` resources with asset ids, `target` amount the user wants
    // to reach, and the `max` number of resources in the selection. Several entries with the
    // same asset id are not allowed.
    query_per_asset: Vec<SpendQueryElementInput>, 
    // The excluded resources from the selection.
    exclude: Option<ExcludeInput>,
)
// The list of spendable resources per asset from the query. The length of the result is
// the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`
// is the same.
-> Result<Vec<Vec<Resource>>>
Added some abstraction to remove logic duplicating. I want to reuse it in the other schemas like balance.
Added schema::Scalar for MessageId.
Added message_id for the schema::Message.
Closes #586",4,5
592,2022-09-05T00:31:33Z,2022-09-06T16:43:19Z,2022-09-06T16:43:19Z,1,7,2,fixes: #408,4,5
594,2022-09-05T03:39:46Z,2022-09-23T21:16:45Z,2022-09-23T21:16:46Z,3,22,2,closes #593.,4,0
597,2022-09-08T12:35:56Z,2022-09-08T13:54:27Z,2022-09-08T13:54:27Z,2,2,1,"This adds a new CI ""cargo-verification"" check to ensure the Cargo.lock file is valid for the current state of all manifests within the workspace. This avoids having Cargo.lock files changes leak into unrelated PRs, and allows tools like Nix to always have a valid lock file present at each published release to ensure reproducible builds.",2,0
598,2022-09-08T21:53:28Z,2022-09-09T17:47:58Z,2022-09-09T17:47:58Z,2,4,8,"When moving metrics out into their own crate, a feature flag for integration testing didn't get modified as needed. This was causing the following compilation warning:
warning: invalid feature `fuel-core/prometheus` in required-features of target `metrics_test`: feature `prometheus` does not exist in package `fuel-core v0.10.1 (/path/to/fuel-core/fuel-core)`

This PR fixes the warning and also restructures the metrics test to share the same test harness as other integ tests to avoid stressing the linker too much with multiple targets.",2,0
599,2022-09-09T12:16:50Z,2022-10-13T13:28:03Z,2022-10-13T13:28:03Z,36,1615,80,"Closes #50
Requires #409 to be merged first",5,12
600,2022-09-09T17:16:24Z,2022-09-09T18:47:23Z,2022-09-09T18:47:23Z,22,47,91,"closes #568
blocked by #204
Removes all references of owner
TODO: once #204 is closed and VM's version bumped
this draft needs to reference that latest VM version",2,0
601,2022-09-09T19:54:20Z,2022-09-09T21:04:43Z,2022-09-09T21:04:43Z,1,1,1,The change with the owner requires a feature stabalized in the 1.63 release of rust.,2,0
604,2022-09-09T22:55:49Z,2022-09-13T20:29:10Z,2022-09-13T20:29:10Z,6,41,16,"In our CI we had both cargo make build and cargo check --locked which were doing basically the same things. This PR merges them together using a custom cargo make task. It also uses the cargo make gh action to avoid slower rust based caching.
It also includes fuel-p2p in the normal test pipeline since there hasn't been any flakiness lately.",3,0
605,2022-09-09T23:10:07Z,2022-09-12T10:11:05Z,2022-09-12T10:11:05Z,31,146,152,"Reused import from the fuel-vm instead of direct importing into Cargo.toml. It should simplify the version bumping. And it is clear now that fuel-vm is the required submodule of fule-core.
I only did it for crates that imported fuel-vm previously.
Used explicit annotation ""::fuel_vm::"", to simplify changes like this in the future.",3,1
606,2022-09-10T02:24:31Z,2022-09-12T00:21:02Z,2022-09-12T00:21:02Z,14,388,374,"General cleanup to help improve builds.

disable jemalloc for rocksdb by default (takes ~40s to build), enabled in docker using a production flag
update cargo deps
attempt to dedupe building some deps (there's a lot of mess resulting from surf and ethers-rs still)
put dap schema build script in fuel-gql-client under feature flag as that is unused currently",2,0
608,2022-09-10T20:21:51Z,,2023-02-20T19:15:52Z,1,4,25,Update the CI Github Action to use the reusable Cargo.toml linter workflow from FuelLabs/github-actions,2,1
609,2022-09-11T18:15:11Z,2022-09-15T22:21:37Z,2022-09-15T22:21:37Z,5,167,150,,3,1
613,2022-09-12T02:55:20Z,2022-09-13T00:58:45Z,2022-09-13T00:58:45Z,1,6,6,"FuelLabs/infrastructure#32

Based on: ravsamhq/notify-slack-action#38 using v2 should speed up the downstream dependencies",2,0
616,2022-09-12T20:46:31Z,2022-09-19T17:27:30Z,2022-09-19T17:27:30Z,5,617,0,"This commit introduces the benchmarks for fuel-vm. It covers the first phase of #526 and targets individual instructions with the rocksdb/database backend.
This targets gas instrumentalization, so we skip benchmarking for predicate cases.
This uses a dedicated component of fuel-core so it will be easier to isolate and extend this component into block checking, and maybe to add some script to parse the output from criterion.
The benchmark is created from an isolated state of the VM that is ready to execute a given instruction. It is sub-optimal in the case of contract state & call since the call overhead will always be added to any instruction to be checked inside of a contract (i.e. SWW).
As next step, we need to make an API in fuel-vm to allow users to perform the operations of a call without executing the contract code. In other words, just load the contract code, add the call frame to the stack and prepare the registers.
After this phase is complete, we need to benchmark beyond instructions to a block level so the post-execution steps (database commit, etc) is also accounted.",4,1
617,2022-09-13T14:25:46Z,2022-09-13T17:59:30Z,2022-09-13T17:59:30Z,1,8,8,closes #602,3,0
621,2022-09-14T06:02:44Z,,2022-09-15T01:35:40Z,4,129,0,"Closes #620
Related: FuelLabs/sway#2772
Reason for this feat explained in issue, copy pasting here:

In order to support nightlies and (very soon) specifically dated nightlies, fuelup needs to be able to compare dates between bins. fuelup is currently accomplishing this through a somewhat hacky method of storing the channel TOML that it downloaded a certain binary from and then comparing that versus what is on GitHub to check if it needs updating. This is a problem for custom toolchains since it might be a mess doing a lot of file I/O to track what versions/dates of components we have added/removed.

Looks like:",3,1
624,2022-09-18T03:24:54Z,2022-09-22T02:17:04Z,2022-09-22T02:17:04Z,22,235,115,"Closes #516 I ended up using u64 because it played much more nicely with the existing changes and I had misinterpreted the issue when I initially asked in that issue.
Migrates BlockHeight instances where DaBlockHeight should've been used over",4,6
630,2022-09-20T02:41:31Z,2022-09-23T20:41:43Z,2022-09-23T20:41:43Z,10,921,272,,3,4
631,2022-09-20T13:26:48Z,2022-10-07T00:08:45Z,2022-10-07T00:08:45Z,40,2314,5100,This is a rewrite of the relayer node to simplify and only download logs. This implements #398,5,5
632,2022-09-21T00:41:02Z,2022-09-28T17:03:33Z,2022-09-28T17:03:33Z,6,180,118,"Added support of messages and updated tests. But the test fails because fuel-tx doesn't support it. Fix: FuelLabs/fuel-tx#186
Closes #614",3,2
635,2022-09-21T19:28:29Z,2022-09-27T15:52:22Z,2022-09-27T15:52:22Z,31,474,314,"closes #603
Mostly copy/pasta apart from one important change, since ChainConfig was tightly coupled with Database (Db was passed during initialization of ChainConfig), I have created a ChainConfigDb trait which I passed instead. And on the fuel-core/Database side I have implemented that trait so that it is compatible for ChainConfig initialization.
By ""implemented"" I mean the methods were already previously implemented so I just referenced existing methods in trait implementation.",3,8
637,2022-09-21T23:06:55Z,2022-09-22T18:08:13Z,2022-09-22T18:08:13Z,4,11,17,use Database::default to get a tmpfile rocksdb db instance. This solves problems related to prematurely dropping the tempfile by using an Arc.,3,2
638,2022-09-22T21:38:56Z,2022-09-23T01:41:28Z,2022-09-23T01:41:28Z,2,2,2,"clippy fixes

Attempted the following but was blocked by sagiegurari/cargo-make#712 and LukeMathWalker/cargo-chef#148:

use new workspace dependencies feature to consolidate version numbers for common deps
use common workspace package fields for versioning, licenses, etc",3,3
660,2022-09-29T23:20:08Z,2022-09-30T00:26:22Z,2022-09-30T00:26:22Z,3,6,6,Minor changes to add preview/ git branch filter for github actions to deploy for ephemeral workflows,2,2
661,2022-09-30T18:18:19Z,2022-10-07T10:09:40Z,2022-10-07T10:09:41Z,13,609,657,"Closes #530 #644.
Also this introduces dependency on protoc for compiling Protobuf files, previously prost library bundled protoc within the lib, but they've recently moved away from that approach.
Changes
libp2p has made some breaking changes in recent updates, main change was how you handle behaviour events - this means that the Behaviour, in our case FuelBehaviour, would be stateless apart from holding other inner behaviours and all the stateful logic would be moved to FuelP2PService that holds the FuelBehaviour.
Usually this would just mean a lot of cut & paste (check the service.rs and behaviour.rs files), but in our case FuelBehaviour was generic over a NetworkCodec, and leaving it still generic would imply that our FuelBehaviourEvent enum would also need to be generic which made for some unwieldy code.
I decided to create a wrapper struct
pub struct BehaviourEventWrapper<Codec: NetworkCodec> {
    event: FuelBehaviourEvent,
    codec: PhantomData<Codec>,
}
from this wrapper we would easily get the inner event and handle it in FuelP2PService.
Also now FuelP2PService needed to become generic over NetworkCodec since it's now the one that handles encoding and decoding of the network messages.",5,2
664,2022-10-02T20:41:12Z,2022-10-02T21:50:26Z,2022-10-02T21:50:26Z,7,20,47,"Removes the feature flag of p2p from the txpool, and instead just requires a noop network_sender to be supplied",4,0
665,2022-10-03T05:18:55Z,2022-10-10T00:02:38Z,2022-10-10T00:02:39Z,3,217,1,,3,3
666,2022-10-03T13:56:38Z,2022-10-03T19:31:30Z,2022-10-03T19:31:30Z,1,10,0,Rendered,2,1
670,2022-10-03T21:55:29Z,2022-10-06T17:47:23Z,2022-10-06T17:47:23Z,2,13,50,"Removes the insert_with_broadcast method
Replaces call to insert_with_broadcast with sequential insert followed by broadcast for each inserted tx

This approach reduces some code complexity at the cost of second iteration over the transactions. See the discussion in the parent PR here #590 (comment).",3,3
678,2022-10-06T05:37:54Z,2022-10-12T00:27:28Z,2022-10-12T00:27:28Z,4,212,12,,2,1
690,2022-10-11T03:05:56Z,2022-10-14T05:13:17Z,2022-10-14T05:13:17Z,1,7,0,"I noticed that using cargo make was fixing the lockfile before we had a chance to verify the checked in version by using the --locked flag in our CI process. This update prevents the cargo make plugin from running any cargo commands before our task.
This may impact the nightly manifest used by fuel.nix, as our lockfile on master fell out of date temporarily because I accidentally broke this check when moving to cargo make cc @mitchmindtree",2,1
691,2022-10-11T04:42:26Z,2022-10-26T09:31:50Z,2022-10-26T09:31:50Z,24,1315,120,resolves #567,4,0
692,2022-10-11T08:43:44Z,2022-10-19T01:06:50Z,2022-10-19T01:06:51Z,29,1331,459,resolves #674,4,1
693,2022-10-11T23:59:54Z,2022-10-12T10:16:35Z,2022-10-12T10:16:35Z,1,1,1,"The relayer is still optional by default, but now it will be included in docker image builds of fuel core. This unblocks e2e integration testing.",2,0
698,2022-10-13T21:43:53Z,2022-10-13T22:46:14Z,2022-10-13T22:46:14Z,3,289,87,"The da_height header field was being set to default, which would prevent downloaded msgs from eth from being spent. This updates the currently used block generation method to always set the current relayer synced eth height.
Also added an integ test that downloaded messages from eth are spendable on fuel.
This is a bandaid solution until #677 is implemented.",2,0
699,2022-10-13T23:33:45Z,2022-10-14T00:41:23Z,2022-10-14T00:41:23Z,16,52,52,,2,0
700,2022-10-14T01:47:44Z,2022-10-15T01:14:56Z,2022-10-15T01:14:56Z,1,1,0,also missed block gas limit when updating the chainspec,2,0
702,2022-10-14T14:43:36Z,2022-10-26T08:25:01Z,2022-10-26T08:25:01Z,12,70,19,blocked by FuelLabs/fuel-vm#233,4,0
710,2022-10-15T01:37:02Z,2022-10-16T23:19:03Z,2022-10-16T23:19:03Z,1,1,0,"docker isn't needed to build mac binaries, and has recently has stopped working on mac. Disable running docker on mac-os.",2,0
712,2022-10-17T14:23:56Z,2022-10-24T04:12:00Z,2022-10-24T04:12:00Z,64,1452,1110,Closes #677,3,2
713,2022-10-18T09:36:21Z,2022-10-31T06:51:34Z,2022-10-31T06:51:34Z,1,5,4,,5,0
715,2022-10-20T00:22:59Z,2022-10-20T13:08:59Z,2022-10-20T13:08:59Z,52,644,313,"This adds support for dry_run as well as eliminates the gql based usage of ""submit_txs"", using the channels instead.
There's a few new test failures due to transactions being committed asynchronously, so I've been working on updating the tests to use a new fuel-client method for awaiting the tx status to change. However, there's still a few strange failure cases to chase down.",2,1
716,2022-10-20T20:18:27Z,2022-10-27T00:34:27Z,2022-10-27T00:34:27Z,47,1407,847,"Better to merge #702 first before merging this change because the new version of fuel-vm also has other changes.
Applied changes from new fuel-tx and fuel-vm:

Usage of Checked<Tx> type instead of CheckedTransaction.
Usage of corresponding renamed methods.
Replaced the work with public fields by getters and setters.
Moved common logic(for Create and Mint) into generic methods.
Replaced Interpreter<Database> with Interpreter<Database, Tx> and Interpreter<Database, Script> accordingly to the logic around(See ConcreteStorage).

Added a new PoolTransaction type that describes transactions stored and accepted by the TxPool. It is prepared to support Mint transactions that should be excluded from TxPool. Another solved TODO by this change - store only checked transactions in the TxPool and pass them into Producer(because PoolTransaction stores only checked transactions inside).
The TransactionBuilder from fuel-vm and fuel-tx now generate transaction of exact type as Script or Create instead of Transaction. Almost all tests in the fuel-core prefer to work with the Transaction type, so there is a lot of conversion Script/Create into Transaction.
Close #513",5,3
717,2022-10-22T00:19:48Z,2022-11-09T02:10:03Z,2022-11-09T02:10:03Z,22,446,169,,6,4
718,2022-10-25T04:48:54Z,2022-10-26T06:53:23Z,2022-10-26T06:53:23Z,28,751,160,"Initial implementation of PoA block signing & persistence of fuel consensus data.
Todo:

 update devops configs to accept a consensus secret (deferred to followup PR)
 (deferrable) safe method to convert block id's into messages for signatures (may require a BlockId newtype)
 (deferrable) update fuel-crypto to support zeroize on secret types

In the future, we should use the keystore traits provided by fuel-crypto to allow for a pluggable signing backend.
closes: #668
closes: #673",5,3
719,2022-10-25T17:20:40Z,2022-10-25T19:49:37Z,2022-10-25T19:49:37Z,14,96,56,"It's hard to find the right boundary for the newtype. It cannot be created like types in the fuel-types crate, since the construction shouldn't be public. This is the minimal amount of changes to introduce the type, and it's converted to Bytes32 for interoperating with database and GraphQL functions. It might make sense to switch the database to use the BlockId type as well.
Requested in #718",2,0
725,2022-10-26T14:50:19Z,2022-10-26T20:50:54Z,2022-10-26T20:50:54Z,8,218,18,"Closes #639
This PR adds TimeParameters to the produce_block mutation, as described in the issue. The provided time is checked to confirm that it is set after the latest block time, and that the addition of block_time_interval does not lead to an overflow.
Three tests are added to verify the normal behaviour + the two error cases.",2,0
726,2022-10-26T17:21:53Z,2022-10-27T01:32:27Z,2022-10-27T01:32:27Z,15,706,187,"Implementation of the coinbase logic as described in the issue.
Close #650",4,0
731,2022-10-27T21:26:01Z,2022-10-27T23:02:53Z,2022-10-27T23:02:53Z,7,298,166,"related to #730
fixes: #729
Instead of creating a temporary block during execution for certain opcodes, this PR adds a new database wrapper that implements the InterpreterStorage trait. This wrapper can be initialized directly with the values the VM needs to retrieve, so that we don't have to simulate useless parts of the unfinalized block or coinbase tx to satisfy the VM storage API.",3,1
734,2022-10-27T23:47:52Z,2022-10-28T01:47:23Z,2022-10-28T01:47:23Z,13,37,1,Adds a metrics config option so future metrics prs don't require a breaking change,2,0
737,2022-10-28T15:47:46Z,2022-10-29T01:16:18Z,2022-10-29T01:16:18Z,2,45,3,"We don't generate receipts for Create transactions, so ""Expected at least one set of receipts"" is relevant only for Script.",3,0
739,2022-10-28T22:16:49Z,2022-10-29T00:08:55Z,2022-10-29T00:08:55Z,1,2,2,,2,0
740,2022-10-30T21:08:44Z,2022-11-03T23:47:26Z,2022-11-03T23:47:26Z,2,12,0,"Add fuel-core secret yaml to define fuel-core secrets
Update helm chart to read fuel-core secrets",2,0
741,2022-10-30T23:39:51Z,,2023-01-17T19:53:20Z,8,280,13,,2,1
743,2022-11-01T14:33:14Z,2022-11-01T19:07:14Z,2022-11-01T19:07:14Z,5,58,30,Config used default ChainConfig for TxPoolConfig instead of parsed chain config from cli.,2,0
745,2022-11-02T09:34:27Z,2022-11-08T16:53:55Z,2022-11-08T16:53:55Z,3,109,53,"part of the #649
with this initial commit we have:

exposed p2p get peer ids
refactored certain parts of the Orchestrator
added few comments to clarify the channel usage

I achieved this by slightly refactoring Network Service & Orchestrator,
separated external p2p requests from internal Orchestrator requests.
I have also added checking and clearing of request_ids in inbound response table if response wasn't properly constructed.",3,0
748,2022-11-03T09:41:44Z,2022-11-09T02:43:19Z,2022-11-09T02:43:19Z,35,1227,180,"Adds subscriptions to the graphql api. It uses Server Sent Events to update the client about new events.
Adds a transaction status subscription call.
Currently only supports http 1.1 which is limited to 6 connections to a browser. Although it should be possible to use http 2.0 which has no such restriction and fallback to 1.1
Closes #168",4,0
751,2022-11-03T18:17:15Z,2022-11-04T15:45:34Z,2022-11-04T15:45:34Z,10,299,70,"Added removal of skipped transactions from TxPool on the PoACoordinator level instead of the BlockProducer level.
Added unit test for this case to check that skipped transactions are propagated to TxPool.
Renamed produce_block into produce_and_execute_block to clarify current behavior.
PR depends on #746",3,2
753,2022-11-03T23:58:27Z,2022-11-04T18:24:37Z,2022-11-04T18:24:37Z,1,49,2,"We've been getting a lot of graphql errors in our environments due requests not including a leading 0x prefix on hex string data. This is likely due to a change in fuel-types serde that removed this 0x by default. Even though all the SDK tests work fine with things the way they are, this PR removes the strict requirement on API requests to reduce the likelihood of failed requests that should otherwise pass.",2,0
754,2022-11-04T18:22:32Z,2022-11-08T19:37:37Z,2022-11-08T19:37:37Z,3,1102,1096,"Related issues:

#762

This PR refactors the TxPool tests and test helpers into separate files. This improves readability since files are now smaller and more targeted, this and gives us more room to add to and modify the TxPool test suite. In follow up PRs, I will be adding to the test suite to increase test coverage.",2,2
755,2022-11-04T20:35:56Z,2022-12-13T18:12:13Z,2022-12-13T18:12:13Z,9,497,4788,"This PR adds some integration tests for PoA block triggering. Timing-aware testing is currently blocked by Tokio issue 4522, since we cannot actually stop time in the tests. These should still be an improvement compared to the current testing situation. I'm hoping to make a PR to Tokio regarding the issue at some point, or alternatively add a way to toggle trigger on and off for testing.",4,4
757,2022-11-04T23:29:04Z,2022-11-05T18:04:18Z,2022-11-05T18:04:18Z,4,41,2,Add parameters needed for configuring a real ethereum node with fuel-core in the deployment environment.,4,0
758,2022-11-05T15:55:50Z,2022-11-05T17:51:44Z,2022-11-05T17:51:44Z,28,174,384,"We were incorrectly using unix time in blocks when we should be using tai64. This was causing issues for the solidity proofs when trying to verify the block hash and signature.
This is a breaking change that will require a new breaking release of fuel-core (0.14). However, this upgrade should be much easier than 0.13 and will be backward compatible with forc 0.30.",4,3
761,2022-11-05T21:35:32Z,2022-11-08T03:38:09Z,2022-11-08T03:38:09Z,11,193,279,"fixes: #752
Moves dry_run to a tokio::spawn_blocking call
Since the executor is mostly blocking code, issuing too many dry-run requests could impact more critical functions of the node (such as block production) if executed directly on the main worker pool.
Limits the number of concurrent dry_run requests by the CPU count
This is because in the worst case we will be CPU bound. While some txs may be state-access heavy and I/O bound, other txs could be CPU bound by using lots of crypto ops like hashing and ecrecover. To ensure we don't grind the system to a halt with hundreds of CPU intensive blocking threads, semaphore permits are used to rate limit the number of dry_run requests.
Removes async from the executor
Previously the executor methods were marked as async, even though there were no async calls. This posed a risk when calling the executor within spawn_blocking, as spawn_blocking is a sync context and must use block_on to call any futures. Using block_on is risky because it can easily lead to deadlocks when using async code. While block_on  likely would've been safe to use in this one case, it could be the source of difficult-to-debug issues if more asynchronous code is added to the executor in the future.",2,0
765,2022-11-09T02:49:51Z,2022-11-09T08:03:46Z,2022-11-09T08:03:46Z,16,145,136,,2,0
767,2022-11-09T03:19:33Z,2022-11-09T04:40:00Z,2022-11-09T04:40:00Z,2,56,9,"Found a bug where submitting more than two txs that conflict on the same input would stop squeezing the lower priced txs after the first squeeze.
This would ultimately lead to the tx with the lower price getting skipped by the executor, making this only a minor annoyance. However it causes wasted computation during block production.",4,1
768,2022-11-09T04:40:14Z,2022-11-09T07:35:30Z,2022-11-09T07:35:30Z,2,159,58,,2,0
769,2022-11-09T23:58:30Z,2022-11-10T23:08:27Z,2022-11-10T23:08:27Z,1,110,5,Close #763,2,0
770,2022-11-11T01:26:35Z,2022-11-12T03:03:20Z,2022-11-12T03:03:20Z,19,619,44,Previously the producer of the block was a part of the header. But after change it is not. Added exposing of all information required to get it,3,0
774,2022-11-15T16:59:04Z,2022-11-24T15:55:00Z,2022-11-24T15:55:00Z,33,276,180,"It requires obmarg/cynic#579
Close #766",3,0
775,2022-11-15T22:16:07Z,2022-12-14T00:27:59Z,2022-12-14T00:27:59Z,17,401,692,"Fixes #747 #382
Technically breaking but there shouldn't(?) be anything downstream which relies on getting nothing. This behavior is more of a bug than a feature/interface at this point",5,3
779,2022-11-16T17:28:31Z,2022-12-08T09:50:22Z,2022-12-08T09:50:22Z,8,462,110,"closes #645
The approach here was to create a wrapper over the Noise protocol authentication.
In the Noise protocol 2 peers, that are about to establish a connection, exchange their Identities,
In our wrapper, once we receive the remote's identity we check it against the reserved_nodes HashSet, if it's part of the given set the connection is allowed and established, if not it is rejected.
This check is only performed when reserved_nodes_only_mode is enabled, if not, the check is not done, that is, the Noise Protocol is used without the wrapper, but they do return the same value for the protocol_info, meaning, out there in the wild, they are the same protocol.",6,6
783,2022-11-18T13:25:08Z,2022-11-22T15:51:14Z,2022-11-22T15:51:14Z,3,19,1,closes #648,4,1
785,2022-11-23T13:29:47Z,2022-12-08T20:45:12Z,2022-12-08T20:45:13Z,4,210,41,"closes #646
libp2p allows us to implement Inbound and Outbound upgrades during connection initialization,
so I've implemented those 2 traits for our FuelUpgrade in which we compare the checksum (hash of the ChainConfig) and if they are not correct the connection is rejected.
Wrote a test to confirm that the connection will not be established, all other tests now implicitly confirm that the connection is established if the checksum matches.
Since we needed to pass ChainConfig variable into P2pArgs  for P2pConfig initialization, I had to refactor P2pArgs a bit, now instead of implementing From Trait for P2pArgs -> P2pConfig I created an instance method that consumes P2pArgs with a reference to ChainConfig
Old:
let _: P2pConfig = p2p_args.into();
New:
let _: P2pConfig = p2p_args.into_config(&chain_conf);",3,3
786,2022-11-24T15:57:04Z,2022-11-25T11:32:31Z,2022-11-25T11:32:32Z,5,57,8,"The bug was reported by the users.
Brandon in slack:

It seems like this is potentially an issue between h1-client (used in surf) and nginx: http-rs/async-h1#108 (comment)

I was able to reproduce the bug the problem is async-h1 used by surf. The usage of reqwest fixes the problem.
Close #596",3,0
787,2022-11-25T00:52:45Z,2022-11-29T22:51:51Z,2022-11-29T22:51:51Z,4,33,4,"I worked on the generation of the genesis block and found that dumping of the state will also include spent coins and messages.
It will not be a problem if we prune dead contracts, spent coins, and messages. But we will do it only after removing API to the indexer, so let's fix it for now by filtering.",2,0
788,2022-11-25T01:01:22Z,2022-12-01T00:45:42Z,2022-12-01T00:45:42Z,16,130,161,Minor refactoring to allow writing a generic code that can work outside of the fuel-core.,2,1
789,2022-11-25T17:24:54Z,2022-12-06T11:57:11Z,2022-12-06T11:57:11Z,17,735,205,"The change actualizes the balance_root and state_root for inputs before execution and outputs after execution. It only preparation of the code to do those updates with the current dummy algorithm. The correct algorithm for state calculation should be implemented in #627 and #626.
Also, it is preparation for updating tx_pointer. Because it requires an additional field in the database, it should be done in a separate PR.
Minor changes:

Created refs folder in the fuel-executor with a wrapper to minimize the amount of code.
Added tx_status to the ExecutionResult, preparation for the #772 and more advanced testing.
Moved tx_pool::TransactionStatus to fuel-core-interfaces.

CC @bvrooman This change should answer your question in the related issues.",4,1
790,2022-11-25T18:29:29Z,2022-11-28T21:18:03Z,2022-11-28T21:18:03Z,12,80,32,It will help in cases like this.,2,0
796,2022-11-28T23:34:16Z,,2023-02-24T22:40:05Z,11,359,1066,"Avoids cloning and serializing the contract code by inserting raw contract bytes (padded) directly into the database so it can be copied directly into vm memory. Ready for review but marked as draft so this is not merged until dependency is.
Depends on FuelLabs/fuel-vm#272 merging first",2,1
797,2022-11-29T02:12:15Z,2022-11-29T23:24:23Z,2022-11-29T23:24:23Z,9,243,73,"Partially fixes: #791
When a lot of txs are inserted into the txpool simultaneously, each tx creates a new ""submitted"" event which activates the PoA coordinator. The issue is that even if all the txs are included in the first block, each event was still triggering a block to be produced in instant mode (even though the pool was already empty). This PR updates the PoA Service to ignore txpool events if the pool is already empty, which also avoids triggering block production for other events like ""SqueezedOut"" or ""Completed"" which shouldn't impact block production signals.
Ideally, the PoA service just uses a notifier of newly submitted txs. That way we don't have to exhaust a full queue of tx status notifications which don't signal any new or meaningful data. It would also avoid extra processing of status updates like when a tx is removed from the txpool due to being included in a block (triggering an echo effect of block production).",3,1
798,2022-11-29T03:45:32Z,2022-11-29T05:58:25Z,2022-11-29T05:58:25Z,8,4869,965,,2,1
799,2022-11-29T06:31:12Z,2022-11-30T01:25:55Z,2022-11-30T01:25:55Z,16,1618,613,"Pin all libp2p crates
Update to latest libp2p including deprecated changes
Update ethers because the old version was in conflict with libp2p",4,1
800,2022-11-29T17:01:55Z,2022-11-29T23:46:30Z,2022-11-29T23:46:30Z,2,6,6,"Closes #795.
Changelog

Use ascending order for blocks() query

Testing Plan
Adjusted PageDirection::Forward assertion to match against the first five elements of the iterator. Tests should pass.",2,1
806,2022-11-30T01:56:38Z,2023-01-21T01:44:09Z,2023-01-21T01:44:09Z,42,2906,486,Depends on FuelLabs/fuel-vm#279,5,1
811,2022-12-03T19:01:00Z,2022-12-05T21:00:05Z,2022-12-05T21:00:05Z,3,7,2,Close #802 based on #802 (comment),3,2
812,2022-12-04T02:47:50Z,,2023-01-31T21:58:46Z,101,1788,1753,"Overview
It is pure extraction of the Database and all related stuff(tables definition, DatabaseTransaction, other types) to its own crate. There are no additional changes in the business logic except the small one highlighted in the comment. Also, the change follows the ideology described below and moves the implementation of the DB trait defined by each service into the service.
I accidentally started this change because I needed database primitives to have cross-service database transaction(I meant  DatabaseTransaction with some additional traits).
We already tried to do that in the past during this issue #464. But it was not a good time for this kind of change. With upcoming architecture refactoring, we need this kind of change if we want finally remove fuel-core-interfaces.
In the linked issue, there were some concerns:

service module crates taking a direct dependency on database / rocksdb, as that will drastically impact our unit testing performance

rocksdb is an optional dependency of the fuel-database disabled by default. All services will use it only for database primitives/types. Only fuel-core will enable it, and only fuel-core will decide in runtime which database type to use(In memory/RocksDB/New one).
All services will use an in-memory database for the unit tests by default. fuel-database(in most cases) and integration tests are responsible for testing of how RocksDB works.

a large amount of churn while there are other critical tasks in flight

Seems it is a good time for this change if we want to remove fuel-core-interfaces=) Also, it can remove MockDB in each service(and supporting of it).

loose design / boundaries, the db-related logic in fuel-core could likely be split into several different crates. More design and justification is necessary here.

fuel-database only implements the basic functionality of storage and common business logic(like get block, transactions, receipts), and defines primitives and abstraction. The fuel-database as upcoming fuel-core-types is a low-level library used by each service. The logic of each service belongs to the service. So each service defines its database trait with all required functionality. The service should implement this trait for Database directly or by a generic implementation(by using some traits, for example, KeyValueStore).
The services still want to work with the trait defined by them because it allows them to not depend on Database and allows downstream crates to provide their ""Database"" with their own implementation of traits(at the same time fuel-core will use a Database as the primary type).
Follow-ups
This change only moves the code we had before without introducing a new one. But we can make more changes later:

With a low-level database crate, we can remove the usage of MockDB and use the Database directly.
Maybe we want to implement all basic functionality for a generic type that implements KeyValueStore instead of Database.
Maybe we want to use a generic database instead of DataSource inside services. It will allow having more complex traits with generics(with dyn keyword the trait should be safe).
Change the structure of the fuel-database crate because it is the same as it was in the fuel-core.
Review traits and types, maybe change naming, add comments, maybe improve our abstraction.
Improve our errors during work with the database(because we use several there).",4,4
815,2022-12-05T10:18:32Z,2022-12-05T21:14:20Z,2022-12-05T21:14:20Z,1,2,2,Small nit on the license file.,4,0
817,2022-12-05T20:55:05Z,2022-12-06T03:13:34Z,2022-12-06T03:13:34Z,26,654,270,"Close #792.
The change inserts the genesis block into the database and the corresponding FuelBlockConsensus::Genesis seal information to define the initial state of the blockchain and the consensus for future blocks.
We also need to add rules for the genesis into the specification(it is in progress).",2,2
818,2022-12-06T20:38:40Z,2022-12-14T08:23:51Z,2022-12-14T08:23:51Z,4,624,15,Signed-off-by: Mitch Martin mitch.martin@fuel.sh,5,1
819,2022-12-07T02:01:33Z,2022-12-08T11:54:46Z,2022-12-08T11:54:46Z,24,570,286,"Close #791.
This change would be nice to do after #812 with Transaction<Database> structure from fuel-core-storage. But while it is not merged, it is a variant of implementation without a known type. A workaround is to define a DatabaseTransaction<Database> trait and use the Box<dyn DatabaseTransaction<Database>> type instead.
The main idea of the change is to return a UncommittedResult from Executor and commit it after all updates of the Database at the end of the block production loop of PoACoordinator.",2,1
821,2022-12-08T21:15:16Z,2022-12-09T12:17:25Z,2022-12-09T12:17:25Z,3,18,4,"Related issues:

Closes #793

Currently, fuel-client makes calls to the GraphQL subscription endpoint using an eventsource client (built on Hyper) with an HTTP-only connector. This connector forbids HTTPs connections and throws an INVALID_NOT_HTTP error when it encounters one. When deploying a contract to a node deployed to an HTTPs URL, the connector throws this error.
I was able to reproduce this error by doing the following:

Registering the domain brandonvrooman.com
Getting an SSL cert for a subdomain (node.brandonvrooman.com) from LetsEncrypt and adding it to my local keychain
Adding the url (node.brandonvrooman.com) to my /etc/hosts and pointing it to localhost
Configuring NGINX to point this url (node.brandonvrooman.com) to my local node running on localhost:4000 using SSL
Deploying a contract to https://node.brandonvrooman.com

With this fix, I was able to test that I can deploy to http and https at the respective urls:

http://localhost:4000
https://node.brandonvrooman.com",4,1
822,2022-12-09T04:21:36Z,2022-12-09T14:07:42Z,2022-12-09T14:07:42Z,1,20,7,"Problem
SSE doesn't provide a built-in way to gracefully terminate a stream from the server side. Our existing behavior was to return a None value when the stream has closed. While this does end up closing the SSE stream, the eventsource client reads this None value as an EOF which is considered retryable error.
This meant that anyone using the new SSE API was seeing error logs from eventsource like Waiting 1s before retrying whenever the stream was about to close.
For example, this has been showing up in the faucet API logs:

These log messages also appeared in forc-deploy.
Solution
The fix is to stop consuming the stream on the client side once a non-null terminal value has been reached (e.g. SqueezedOut or Success), to avoid triggering an EOF.
I also verified in local testing that the stream is immediately closed on the server side once the fuel client stops polling the stream, by attaching a drop logger to the server side stream state (this change is not committed though):

Future Work
We may want to find a way to generically end all types of SSE subscriptions without an EOF issue by using a generic event wrapper that indicates when it is the last event in the stream. Then client side subscriptions can check the generic event is_last flag to close their connection without special logic based on each endpoint.",2,0
825,2022-12-09T15:11:21Z,2022-12-09T17:01:34Z,2022-12-09T17:01:34Z,1,2,2,"Closes #794.
Bump fuel-vm to 0.22.6 to fix the bug with an empty Script transaction by FuelLabs/fuel-vm#284",2,0
827,2022-12-10T09:50:07Z,2022-12-13T12:14:18Z,2022-12-13T12:14:18Z,26,339,161,"closes #824
I renamed Merklization trait to GenesisCommitment and moved it to chain-config module.
Moved the implementations of the trait to their respective files.
Included few extra fields in ChainConfig hash calculation.
Implemented GenesisCommitment for Genesis within chain-config module.
Made a wrapper struct Checksum([u8; 32]).",4,0
828,2022-12-10T17:47:49Z,2022-12-12T16:36:48Z,2022-12-12T16:36:48Z,15,153,65,"#827 (comment)
Also:

Renamed P2pArgs -> P2PArgs
Renamed P2PConfig.local_keypair -> P2PConfig.keypair",2,0
829,2022-12-12T01:20:53Z,2022-12-12T17:50:05Z,2022-12-12T17:50:05Z,2,2,4,"After releasing fuel-core 0.15, we can use it from crates.io in compatibility tests",2,0
830,2022-12-13T01:35:51Z,2022-12-13T17:59:09Z,2022-12-13T17:59:09Z,1,135,221,Suggestions for #818,2,0
834,2022-12-14T00:54:34Z,2022-12-14T16:17:15Z,2022-12-14T16:17:15Z,17,401,692,"Re-make of #775
DO NOT MERGE, until 0.15.1 per @Voxelot 's comment

Looks good but I'd like to get 0.15.1 released with the sequential slot access before merging this to avoid any breakage on the beta-2 block explorer due to some of these changes.

(although that is mostly a note for me)",2,0
835,2022-12-14T08:27:20Z,2022-12-14T09:49:26Z,2022-12-14T09:49:26Z,16,119,91,,2,0
836,2022-12-14T15:44:40Z,2022-12-14T21:07:08Z,2022-12-14T21:07:09Z,2,69,25,Based on the conversation in the slack let's also show coinbase transaction during transactions_by_owner query,2,0
838,2022-12-14T19:39:46Z,2022-12-14T23:57:49Z,2022-12-14T23:57:49Z,22,1489,28,"Created fuel-core-types and fuel-core-storage crates. Copied most of the main types from fuel-core-interfaces.
I didn't remove the old one, will do that in another commit.",4,0
839,2022-12-14T20:15:03Z,2022-12-17T02:09:17Z,2022-12-17T02:09:17Z,328,5368,5241,"Collaborative branch for the fuel-core architecture migration described in: #809

If you are working solo, it's better to create a PR to this branch to make the changes re viewable by others.
If you are working as a group, ensure the branch is passing CI before you end your work session.",6,0
843,2022-12-15T16:53:11Z,2022-12-15T18:14:31Z,2022-12-15T18:14:31Z,1,12,7,"The publishing of fuel-core 0.14.2 failed because of a small delay. Increased it from 30 seconds to 60 seconds.
Also pinned rust toolchains to avoid unpredictable CI failing",2,0
848,2022-12-16T12:19:34Z,2022-12-16T21:57:44Z,2022-12-16T21:57:44Z,159,1560,1734,"Moved transaction pool error into fuel-core-types. Used it everywhere as TxPoolError.
Removed block_id and time from TransactionExecutionResult. Used those values from ExecutionResult.
Removed conversion StorageError -> DatabaseError and fixed all related compilation errors. Replaced Ok(_?) with .map_error(Into::into) to convert DatabaseError -> StorageError.
Replaced some anyhow::Result with StorageResult for database ports(traits). Added alias DatabaseResult into fuel-core/database.
Used StorageResult, ExecutorResult aliases to minimise number of lines.
Added ci_checks.sh to run all CI check by one command locally.
Updated all places(tests included) to use types and traits from fuel-core-types and fuel-core-storage.
Removed exporting of common from fuel-core-interfaces.
Removed exporting of fuel_vm from fuel-core-client. Now developers should use fuel-core-types.fuel_core_interfaces is only used for channels and ports right now.
Applied Clippy 1.66 to the code.
For all tests simplified imports into library::*.
Moved TxUodate into fuel-core-txpool.
Replaced implementation of Chargeable, UniqueIdentifier traits for PoolTransaction by plain pub fn methods.",5,0
849,2022-12-16T17:48:07Z,2022-12-21T03:25:04Z,2022-12-21T03:25:04Z,80,1637,2095,"This branch has kept up to date with teamwork/europa-16-december but it also introduces changes of removing (some of) the channels in some of the modules/services.
Mainly I have created PeerToPeer port for txpool and consequently an Adapter for it.
I have also created a simple Database port for p2p. Updated p2p's Orchestrator and Network Service to match the new interface.
Warning:
The code compiles, but there are few todos and warnings of unused code which will be used once other things are updated.
Test in producer and txpool currently fail, due to the change of the api a bit, so that would be a good place to start for refactoring, basically instead of providing a p2p channel now you need to provide a p2p adapter.",6,0
850,2022-12-16T18:27:10Z,2022-12-16T21:56:54Z,2022-12-16T21:56:55Z,38,181,282,"Moved fuel-core binary into bin/fuel-core. It is still named fuel-core, but package is fuel-core-bin.
Added #![deny(unused_crate_dependencies)] almost in all crates. Sometimes it doesn't work for dev-dependencies so not all crates are covered. Cleaned up imports from unused crates.",3,0
858,2022-12-20T20:05:20Z,2023-01-14T00:18:40Z,2023-01-14T00:18:40Z,80,1888,1208,"Refs #809
Closes: #907
It is the refactoring for the graphql-api service to use ports instead of direct work with Database. The service defines minimal database functionality and builds its functionality on top of it to process GrapQL requests.
Right now, this functionality is represented by {}QueryContext structures with the public methods. It is done to make the migration easier.
But later, we will need to move this functionality into corresponding traits and implement it directly for the DatabaseTemp type. Like:
impl {}QueryContext for DatabaseTemp {...}

or

impl<D: DatabasePort> {}QueryContext for D {...}
With traits, we can mock them and improve our tests.
The PR contains the following changes:

Renamed Transactional into Transaction.
Added Transactional trait with transaction method.
Used BlockId instead of Bytes32 in Database.
Created ports for block.rs, tx.rs, message.rs, balance.rs, coin.rs and updated corresponding schema.
Added and used in ports BoxedIter instead of associated types(In most cases they were Box<dyn> too).
Almost removed usage of fuel_core::database from schema. Only dap.rs uses it right now for VMDatabase.
Introduced CompressedCoin and Coin(contains UtxoId). CompressedCoin is used during work with the database, Coin in external API.
Moved resources into fuel-core-type and simplified it by removing generics.
Tried to re-work dap.rs but the change is big and also related to fuel-core-executor, so will do it in a separate PR.
Updated Transactional to support Transactional<dyn Database>

Before we can extract grapgql-api into its crate, we need:

Add ports for other services.
Add iteration abstraction into fuel-core-storage.
Solve the problem with DatabaseVM(The solution should also fit for fuel-core-executor).",3,4
860,2022-12-21T19:02:55Z,2022-12-23T04:11:50Z,2022-12-23T04:11:50Z,45,2040,2129,"Created a fuel-core-services crate to have common stuff of services.
Added initial implementation of ServiceRunner.
Used ServiceRunner to implement fuel_core_poa::Service. Removed fuel-core-bft from fuel-core because we don't use it now.",2,0
863,2022-12-22T01:38:24Z,2022-12-23T02:59:44Z,2022-12-23T02:59:44Z,32,1502,1862,"Updated TxPool to use ServiceRunner.
Removed RWLock and replaced it with ParkingMutex.
Removed channels from TxPool.
Used BoxStream instead of next_*, to avoid needing ports to be mutable
Refactored PoA trigger tests to use automocks
Split PoA trigger tests into smaller ones (and found a bug)
Removed some unused methods from the txpool.
select_transactions now removes transactions from the pool so that they aren't selected by block production again (since the import event is async and may not be processed by the txpool in time). There is a todo to address the need to have a different way to remove txs from the pool without recursively removing dependencies.",2,0
864,2022-12-22T18:30:47Z,2022-12-22T19:56:03Z,2022-12-22T19:56:03Z,1,1,1,"Windows would just not compile because a missed import
Closes #463
Clearer Protoc instructions are still needed but now there is nothing technically blocking it. Although I would actually be in favor of just distributing a windows binary in the future and telling people to vendor it",2,0
869,2022-12-23T04:08:39Z,2022-12-23T23:56:32Z,2022-12-23T23:56:32Z,3,9,3,,2,1
870,2022-12-23T19:57:10Z,2022-12-23T22:14:56Z,2022-12-23T22:14:56Z,32,260,364,"Renamed all runnable parts of the service into Task.
Renamed each file that contains the runnable part into service.rs.
Removed fuel_core_txpool::ServiceBuilder.
Removed fuel_core_importer and fuel_core_sync from fuel-core.
Renamed NetworkOrchestrator into Task.
All services expect DB without Arc or Box.",2,0
871,2022-12-23T20:14:02Z,2023-01-11T17:30:38Z,2023-01-11T17:30:38Z,8,128,1,"since fuel-core doesn't use bech32 for it's apis or chainspec configuration like forc-wallet or the sdk, this PR adds a simple keygen CLI utility to make devops and testing easier when developing on fuel-core directly.",3,0
872,2022-12-23T22:09:37Z,2022-12-23T23:46:04Z,2022-12-23T23:46:04Z,23,483,580,,2,0
874,2023-01-03T18:57:11Z,2023-01-03T20:20:27Z,2023-01-03T20:20:27Z,1,4,4,resolves: FuelLabs/fuel-vm#295,2,0
875,2023-01-04T20:02:40Z,2023-01-05T23:14:24Z,2023-01-05T23:14:24Z,37,1092,797,"The final change of #860 epic. Ref #809
Reworked RunnableService to be RunnableService and RunnableTask. RunnableService::initialize replaced with the RunnableService::into_task method. into_task returns a runnable task that implements the RunnableTask trait. into_task may return another type after initialization.
Updated all services to implement new traits. Implemented GraphQL service via ServiceRunner. Extracted the graph QL logic into a separate module(preparation to move this service into its own crate).
Re-usedServiceRunner for FuelService. Replaced Modules with SharedState and SubServices.
Added a new Starting state of the service lifecycle. Added functions to allow to await Started or Stop state.",2,0
889,2023-01-05T04:50:22Z,2023-01-19T23:30:49Z,2023-01-19T23:30:49Z,22,2108,65,"Closes #881
Closes #882
Closes #880",5,0
890,2023-01-06T20:14:05Z,2023-01-11T04:11:20Z,2023-01-11T04:11:20Z,66,1742,1286,"Renamed Transactional into Transaction.
Added Transactional trait with transaction method.
Used BlockId instead of Bytes32 in Database.
Created ports for block.rs, tx.rs, message.rs, balance.rs, coin.rs and updated corresponding schema.
Added and used in ports BoxedIter instead of associated types(In most cases they were Box<dyn> too).
Almost removed usage of fuel_core::database from schema. Only dap.rs uses it right now for VMDatabase.
Introduced CompressedCoin and Coin(contains UtxoId). CompressedCoin is used during work with the database, Coin in external API.
Moved resources into fuel-core-type and simplified it by removing generics.
Tried to re-work dap.rs but the change is big and also related to fuel-core-executor, so will do it in a separate PR.
Updated Transactional to support Transactional<dyn Database>",3,1
893,2023-01-06T23:28:00Z,2023-01-07T21:06:58Z,2023-01-07T21:06:58Z,2,79,41,,2,0
894,2023-01-10T19:13:36Z,2023-01-13T16:00:19Z,2023-01-13T16:00:19Z,8,659,404,"following @Voxelot 's comment this is a prototype of how would we move checking of peer slot availability during handshake instead of after the connection is established.
The approach is that we share a state between PeerManager and Fuel Authenticator (that does the handshake), we update the state only on PeerManager side, but we read the state from Fuel Authenticator every time we want to establish a connection with a peer",3,2
895,2023-01-11T00:22:49Z,2023-01-12T15:43:23Z,2023-01-12T15:43:23Z,9,186,118,,3,0
900,2023-01-12T21:48:38Z,2023-01-13T01:58:32Z,2023-01-13T01:58:32Z,23,881,113,Adaptation of fuel-core to use latest fuel-vm with FuelLabs/fuel-vm#301,2,0
903,2023-01-13T17:54:34Z,2023-01-20T22:02:09Z,2023-01-20T22:02:09Z,25,1240,189,"Closes: #883

What is done:

Added the main logic of the block importer.
Added debug_assert_eq to verify that the block header id is an identifier of the block. And that it uses the last hash of the application header.

No unit tests right now.",3,1
909,2023-01-16T04:11:47Z,2023-02-07T00:31:11Z,2023-02-07T00:31:11Z,6,104,24,"I've added ports for both TxPool, Executor,  and BlockProducer. Also doing some final cleanup, so that the GraphQL API can be extracted from fuel-core soon in a future PR, but goal is to fix most issues in the crate in this PR to keep diff clean in a future migration (after beta-3).
WIP",4,2
910,2023-01-17T08:28:05Z,2023-01-17T23:18:12Z,2023-01-17T23:18:12Z,1,5,0,Fixes an issue where each benchmark run was nesting the interpreter storage transaction from a previous run into a new transaction.,3,0
911,2023-01-17T15:40:24Z,2023-01-23T07:47:28Z,2023-01-23T07:47:29Z,17,772,180,"Closes #879
This PR introduces heartbeat protocol, which replaces existing ping protocol.
On a high level, P2PService now exposes 2 APIs:

update_block_height(BlockHeight) - this method informs p2p service of the latest locally known block height (more on it soon)
subscribe_block_height() -> broadcast::Receiver<BlockHeightHeartbeatData> - caller of this method subscribes to getting latest block heights from connected peers.

The approach here was following:

on each new Peer connection, we start a Heartbeat (struct HeartbeatHandler), beating to some configured interval, on each beat it first requests from p2p Service the latest known block height and then it shares that height with the connected peer.
p2p service needs to be up to date with latest known block height so that it can share the info with Hearbeat

small todos (shouldn't stop you from reviewing):

expose HeartbeatConfig for configuration, currently it's hardcoded
(maybe) document the flow of HeartbeatHandler and its OutboundState",5,3
912,2023-01-17T20:47:46Z,,2023-01-17T21:58:42Z,19,67,61,"do not merge *

patches beta2 to allow for larger contract sizes.",3,1
913,2023-01-18T04:41:32Z,,2023-01-26T04:10:01Z,24,626,178,,3,4
914,2023-01-18T05:43:50Z,2023-01-20T21:34:26Z,2023-01-20T21:34:26Z,2,4,1,Enables libp2p in the standard docker container for fuel-core.,3,1
915,2023-01-18T15:03:20Z,2023-01-23T06:40:54Z,2023-01-23T06:40:54Z,46,1098,709,"Closes #887
Closes #884

What is done:

Removed CHAIN_HEIGHT_KEY, because now we have a genesis block to track this information.
Unified all database API that works with BlockHeight to work with references. Previously in some places, it was the reference, in some not.
Added manual_produce_block into PoA and used it in the GraphQL to have the one source of the block production. There are no unit tests(help is appreciated).
Connected PoA and BlockImporter via ports. Added BlockImporterAdapter.
Added the FuelBlockRoots column with the corresponding table. It is used to track BMT MMR roots for fuel blocks. The implementation adds new DatabaseColumn and IntoDatabaseKey traits to automate the storage trait implementation for some tables.
Moved implementation of database ports into the corresponding file in the fuel_core::service::adapter.
Removed the Database generic from PoA at all. Now we must pass the last_height while creating the Task. Updated tests to work with it.
Block producer now accepts the block_time along with block_height.",4,1
916,2023-01-18T15:30:14Z,2023-01-23T04:20:15Z,2023-01-23T04:20:16Z,37,712,170,"Refs: #883
It is the implementation of the block verifier. Right now it provides only one function to verify the block's fields. But in the future, we can add verification of the seals(it is why it holds a relayer) and reuse this verifier in the fuel-core-sync.
Along with the verifier, I changed the fuel_core_poa::Config and ChainConfig to have rules for the block's time of the network and separate rules for block production.

Added NodeRole::Producer and NodeRole::Validator. Based on the role, we will create a fuel_core_poa::Config.
Removed Never from BlockProduction from ChainConfig because it is the block production information of the PoA.

No unit tests right now.",5,2
917,2023-01-19T01:34:42Z,2023-01-24T21:29:33Z,2023-01-24T21:29:33Z,38,537,495,Includes breaking changes from FuelLabs/fuel-vm#307. Requires FuelLabs/fuel-vm#314 as well.,4,2
919,2023-01-19T16:19:06Z,2023-01-24T07:20:15Z,2023-01-24T07:20:16Z,12,501,149,"closes #878 #877
The work has been done on 2 (now merged) branches, by @freesig and myself.",5,1
920,2023-01-20T06:50:51Z,2023-01-23T14:10:47Z,2023-01-23T14:10:47Z,5,119,20,fixes: #877,4,3
921,2023-01-20T13:10:06Z,2023-01-20T21:03:11Z,2023-01-20T21:03:11Z,3,28,8,"This change was done at the same time as moving this file into another place, so during conflict resolution, we missed it.
Closes #593",4,0
922,2023-01-20T21:45:54Z,2023-01-21T00:08:35Z,2023-01-21T00:08:35Z,2,2,0,"I noticed these descriptions were missing.
Before:

After:",3,0
924,2023-01-23T02:40:01Z,2023-01-24T09:00:10Z,2023-01-24T09:00:10Z,39,477,93,"Adds the p2p adapter for fuel-sync
closes #885
closes #886
closes #901
closes #902",6,2
925,2023-01-23T04:42:54Z,2023-01-23T16:36:55Z,2023-01-23T16:36:55Z,10,105,204,"Updates to make devops easier

Support configuration via env vars instead of cli args
allow libp2p keypair to have a secret passed in directly without a file (i.e. env var)
upgrade all CLI's to clap 0.4.1",2,1
926,2023-01-24T00:05:27Z,2023-01-26T21:17:24Z,2023-01-26T21:17:24Z,10,112,47,"Postcard is a drop-in replacement for bincode. It has almost identical performance characteristics, but it's bit a more comact and stable across Rust versions. It recently reached 1.0 and is considered rather stable.
This PR simply replaces all invocations to bincode with their postcard equivalents. Closes #905 and closes #776",5,7
927,2023-01-24T09:40:32Z,2023-01-24T11:05:30Z,2023-01-24T11:05:30Z,1,2,1,fixes master branch failure,2,0
928,2023-01-24T12:54:25Z,2023-01-24T19:34:34Z,2023-01-24T19:34:34Z,18,135,113,"Because I didn't have a chance to review the PR in time, I did a review after=)",3,0
931,2023-01-24T23:45:02Z,,2023-01-25T17:25:10Z,3,137,3,Add deploy k8s secret to fuel-core deploy script,2,0
932,2023-01-25T02:36:48Z,2023-01-25T21:00:25Z,2023-01-25T21:00:25Z,26,246,31,"This adds a tracing subscriber to any of our tests but it is behind the env var FUEL_TRACE so it doesn't collide with any downstream or custom subscribers.:
Usage
To enable tracing for a test, add the following to the lib.rs file of the crate you want to trace:
#[cfg(test)]
fuel_core_trace::enable_tracing!();
If you also want tracing in your integration tests, you need to add the above to each integration tests file.
Tracing is still disabled by default so to enable it set the following environment variable:
export FUEL_TRACE=1
Or if you just want it for a single test run:
FUEL_TRACE=1 cargo test
Now you will have error level tracing like:
2023-01-25T02:27:14.362856Z ERROR works: tracing: I'm visible if FUEL_TRACE=1 is set

You can use the RUST_LOG environment variable to control the level of tracing you want to see. For example:
FUEL_TRACE=1 RUST_LOG=trace cargo test
Additional Subscribers
You can set a few different types of subscribers:
Compact output:
FUEL_TRACE=compact cargo test
Pretty output:
FUEL_TRACE=pretty cargo test
Log to file:
FUEL_TRACE=log-file cargo test
Log to file and output to console:
FUEL_TRACE=log-show cargo test
You can also set the log file path:
FUEL_TRACE_PATH=/some/path FUEL_TRACE=log-file cargo test
If you don't set the path, it will default to CARGO_MANIFEST_DIR/logs/logfile.",2,0
933,2023-01-25T05:22:15Z,2023-01-26T21:00:32Z,2023-01-26T21:00:32Z,11,213,39,"Mostly finishes #777
But I can't remember what these meant:

Log transaction id at tx pool on submit.
Log transaction id at tx pool on receiver.",2,3
934,2023-01-25T09:02:57Z,2023-01-27T19:08:11Z,2023-01-27T19:08:11Z,29,1059,211,,3,0
935,2023-01-25T12:43:10Z,2023-01-26T02:57:26Z,2023-01-26T02:57:26Z,19,364,184,"It is an alternative implementation of the #913 with minimum changes. The main change is the same, but other changes are minimal.",3,1
936,2023-01-25T15:35:31Z,2023-01-26T21:47:00Z,2023-01-26T21:47:00Z,7,152,69,"Closes #595
For gossipsub messages, we need to validate all the messages.
Messages will not be propagated unless a timely validation is reported.
I have updated the gossipsub tests, now instead of just checking that Node A sends a gossipsub message to Node B,
we also check that Node C gets the propagated message from Node B.
Of course if the validation is positive, if the message is rejected Node C should not receive it.",3,0
937,2023-01-25T17:21:42Z,2023-01-25T18:29:02Z,2023-01-25T18:29:02Z,3,137,3,"fuel-deployment success:
https://github.com/FuelLabs/fuel-deployment/actions/runs/4008367051/jobs/6882444549
 % kubectl get secrets
NAME                                                   TYPE                 DATA   AGE
fuel-core-preview-test-deploy-k8s-secret-swayswap-io   kubernetes.io/tls    2      41s
fuel-core-secret                                       Opaque               1      2m2s
sh.helm.release.v1.fuel-core.v1                        helm.sh/release.v1   1      117s

 % kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
fuel-core-k8s-54ff54589d-vb9fk   1/1     Running   0          2m1s

 % kubectl get ingress
NAME                                               CLASS    HOSTS                                                  ADDRESS                                                                         PORTS     AGE
fuel-core-preview-test-deploy-k8s-secret-ingress   <none>   fuel-core-preview-test-deploy-k8s-secret.swayswap.io   a065e5ee954a54b0c965ffb97e8cf279-e3218a4fb3e6e7a1.elb.us-east-1.amazonaws.com   80, 443   77s

https://fuel-core-preview-test-deploy-k8s-secret.swayswap.io/playground is active",2,0
938,2023-01-25T21:35:27Z,2023-01-26T06:43:07Z,2023-01-26T06:43:07Z,7,6,8,"Renamed transactional into transaction.
Renamed message_proof into message.",3,0
939,2023-01-25T22:23:04Z,2023-01-26T04:03:28Z,2023-01-26T04:03:28Z,7,84,222,"Re-used DatabaseColumn blanket implementation of the StorageInspect and StorageMutate for tables without Merkle or double primary key logic.
The same idea is used in the PR to implement FuelBlockMerkleData, FuelBlockMerkleMetadata, and FuelBlockSecondaryKeyBlockHeights tables.
The mentioned PR should land the master first after we can merge this PR.",3,0
941,2023-01-26T03:58:36Z,2023-01-26T09:47:11Z,2023-01-26T09:47:11Z,5,24,17,"Just shuffling code around, moving a port used in PoA verifier to the ports module.
I'm guessing the port was left in this module to make it easy to extract into a common verifier that could be shared between multiple CMs in the future, but I think it's better to follow our architectural conventions and extract the port out later when we actually need to.",2,0
942,2023-01-26T10:27:39Z,2023-01-26T11:33:53Z,2023-01-26T11:33:53Z,6,35,50,Addressed #936 (comment),2,0
952,2023-01-26T23:48:53Z,2023-01-27T01:54:54Z,2023-01-27T01:54:54Z,24,98,98,,2,0
957,2023-01-27T17:39:13Z,2023-01-27T20:03:08Z,2023-01-27T20:03:08Z,1,3,3,"some of our CLI arguments require array of values, we had issues parsing them, adding a comma delimiter helps in parsing the values like:
RESERVED_NODES=""/dns4/my-fuel-sentry-0/tcp/30333/p2p/16Uiu2HAmKTu2oFwqhcRQ9fyyCy5bh5vReh8nWfbZRQ991MzEVwWw,/dns4/my-fuel-sentry-1/tcp/30333/p2p/16Uiu2HAmLFKkEYZFE86JZszmoMTCw4XJF7P4jxoDG7RJgtKV8ZNN""",2,1
958,2023-01-27T18:47:53Z,2023-01-27T20:15:49Z,2023-01-27T20:15:49Z,6,35,5,"Fixed CI to publish. Added additional job before publishing to verify that publishing will be successful.
Added instructions on how to verify publishing",2,0
959,2023-01-27T22:04:05Z,2023-01-31T21:24:43Z,2023-01-31T21:24:43Z,1,1,2,"Follow up to FuelLabs/fuel-vm#328.
Now that push returns StorageError rather than MerkleTree<StorageError> we no longer need to map the error to Other.",2,0
960,2023-01-27T22:44:04Z,2023-01-28T05:40:42Z,2023-01-28T05:40:42Z,3,9,12,,3,0
961,2023-01-28T10:59:45Z,2023-01-31T15:25:08Z,2023-01-31T15:25:09Z,1,13,3,,2,0
963,2023-01-28T19:58:49Z,2023-01-30T01:00:41Z,2023-01-30T01:00:41Z,37,162,182,,5,3
968,2023-01-31T12:59:05Z,2023-02-01T22:14:12Z,2023-02-01T22:14:13Z,2,23,6,It would be nice to have it as info-level logs,3,0
971,2023-02-01T09:30:51Z,2023-02-08T00:42:24Z,2023-02-08T00:42:24Z,80,1769,596,closes #781 #681 #977,3,2
973,2023-02-02T05:41:22Z,2023-02-07T21:14:20Z,2023-02-07T21:14:21Z,32,467,557,"Tracks FuelLabs/fuel-vm#283
Updates to fuel-vm 0.26.0",4,2
974,2023-02-02T16:26:07Z,2023-02-03T09:49:22Z,2023-02-03T09:49:22Z,2,22,33,Closes #967,3,0
976,2023-02-03T01:52:50Z,2023-02-03T19:42:11Z,2023-02-03T19:42:11Z,22,292,228,"Closes #622
Each point of the issue is made as a separate commit, so it may be simpler to review each commit.",3,0
979,2023-02-03T21:36:20Z,2023-02-06T19:27:11Z,2023-02-06T19:27:11Z,33,587,506,,3,0
982,2023-02-03T23:34:34Z,2023-02-04T04:33:56Z,2023-02-04T04:33:56Z,5,16,12,"futures-timer was being used in p2p, however it makes use of helper threads which are unnecessary since we use a tokio runtime.",2,0
984,2023-02-06T11:15:10Z,2023-02-06T21:33:25Z,2023-02-06T21:33:25Z,2,15,7,"To allow fuels-types to use fuel-core-client on WASM (and unblock the Indexer team), usage of eventsource-client (which uses TCP, sockets etc.) needs to be feature-gated while I'm working on bringing the subscription functionality to WASM.
This should be merged before #446, as it still needs to be completed and is of much lesser priority.",3,0
986,2023-02-06T17:56:34Z,2023-02-06T18:57:50Z,2023-02-06T18:57:50Z,1,4,1,"fixes bug introduced in #643
this bug can be demonstrated on master by running all tests with --no-default-features
actually this bug might've existed earlier, we just didn't notice it due to feature unification",2,0
987,2023-02-06T20:03:06Z,2023-02-07T04:26:08Z,2023-02-07T04:26:08Z,3,5,5,our --no-default-features testing wasn't working as expected due to feature unification. This change ensures each crate is tested in isolation with no extra features enabled.,2,3
988,2023-02-06T20:08:27Z,2023-02-06T23:39:37Z,2023-02-06T23:39:37Z,1,1,0,Ignore unpublished changes when simulating publishing on master / PR CI.,3,0
990,2023-02-06T23:46:33Z,2023-02-14T11:45:55Z,2023-02-14T11:45:55Z,12,210,101,,3,0
994,2023-02-07T08:38:36Z,2023-02-27T18:28:48Z,2023-02-27T18:28:48Z,12,541,67,replaces #796,4,2
995,2023-02-07T18:43:26Z,2023-02-07T20:28:58Z,2023-02-07T20:28:58Z,3,20,1,"During #974 optimistic reconnect was removed from the code as being a duplicate work.
It was not a duplicate work, more of an optimistic immediate reconnect if the node is available, while health_check tries to reconnect after a certain Interval (e.g. 30-60 seconds) which is there as a backup only if the optimistic reconnect was not successful.
I also added a small description comment to OutboundState.",2,0
998,2023-02-07T21:00:22Z,2023-02-07T22:09:13Z,2023-02-07T22:09:13Z,5,53,12,"currently our Block heartbeat config fields were hardcoded, this PR makes them configurable and exposes them in the CLI",2,0
1000,2023-02-08T01:00:48Z,2023-02-08T02:40:25Z,2023-02-08T02:40:25Z,2,8,7,speedup builds using --no-default-features by disabling extra deps that aren't used,3,1
1002,2023-02-08T13:39:45Z,2023-02-08T19:18:51Z,2023-02-08T19:18:51Z,1,30,24,"We've been having certain issues with this test especially in the CI,
here's the analysis and the fix.
First problem is the assertion put on the swarm itself instead of our PeerManager:
if p2p_service.swarm.connected_peers().count() > peer_limit { panic!() }
While generally this should not return more peers than allowed, one of the reasons we have PeerManager is to actually contain number of peers connected logic, so moving the assertion to
if p2p_service.peer_manager().total_peers_connected() > peer_limit { panic!() }
should suffice since PeerManager is the one disconnecting surplus peers.
Other, and bigger, issue with the test was the amount of simulated nodes we used in our example.
Having 100+ nodes running makes the test itself unnecessarily slow.
This became even more evident now that we made our Heartbeat protocol ask for a disconnect from a node that did not reply within 2 seconds with a Block Height. So nodes started disconnecting from each other and the test would never hit its exit point.
Actually there is no need to have that amount of nodes, instead same assertion can be achieved with a smaller amount, so I have decreased the amount of nodes in the test.",2,0
1003,2023-02-09T10:14:23Z,2023-02-16T02:50:18Z,2023-02-16T02:50:18Z,18,747,12,"This adds a new publishable binary to fuel-core that allows for e2e testing against deployed environments. Ideally tests added here should be relatively lightweight, tolerate concurrency and make minimal assumptions about the state of the network before executing.
Currently the test only performs a basic transfer, but the suite should be expanded to cover other common use-cases like contract deployments.
The main binary uses libtest-mimic to make it compatible with most cargo test runner plugins (e.g. nextest) or common IDE patterns for debugging tests.
It is driven by a configuration tomlfile which allows endpoints and wallet secrets to be configured based on the environment being tested. This is described more in the README.md.
helps unblock #482 and FuelLabs/fuel-k8s-operator#26",3,1
1008,2023-02-10T19:34:17Z,2023-03-16T04:03:22Z,2023-03-16T04:03:22Z,6,503,70,"Related PRs:

Closes #626
Closes #627

This PR calculates SMT roots for a contract's state and balances. Both states and balances are modified via random-access inserts and deletes, so roots must be calculated as an SMT on top of a sparse key-value dataset.
Additionally, this PR modifies the root calculations and related tests to use the correct empty root, the 32 byte 0, rather than the hash of the empty string. The 32 byte 0 is the default for SMTs while the hash of the empty string is the default for BMTs.",3,2
1011,2023-02-13T19:15:05Z,2023-02-14T02:11:04Z,2023-02-14T02:11:04Z,3,41,2,"fuel-core #997: multiple sentry deployment via helm#997
fuel-core #1006 Add resources to fuel-core#1006",3,0
1012,2023-02-14T00:36:04Z,2023-03-14T14:42:29Z,2023-03-14T14:42:30Z,36,493,358,"This PR works to simplify the query interfaces by extracting the logic from all *contexts into traits, then refactors all queries to fetch this information via type objects rather than directly through the database, which will allow a clean removal of the graphql crate, where the traits will move to, while the implementations for Database remain within fuel-core.
There are some small pointer annoyances such as borrowed_box, but this is unavoidable because Database is passed into the graphql context as a Box, and so whenever its accessed the pointer to it by default is &Box<T>, and so any function which requires erasing Box<DatabasePort> (which is aliased to Database with the graphql crate) to something like Box<dyn MessageProofData> will inevitable create a borrowed box and so clippy will complain, but this can't really be avoided due to the graphql structure",3,1
1017,2023-02-15T00:26:12Z,2023-03-08T18:42:14Z,2023-03-08T18:42:14Z,1,23,16,,2,1
1018,2023-02-15T20:56:01Z,2023-02-16T12:07:21Z,2023-02-16T12:07:21Z,19,401,153,"Closes #949
Closes #897

Removed second spawned task for fuel_core_services::service::run function.
Instead, wrapped it into catch_unwind.
Added a shutdown method for the task that allows doing some cleanup for methods. For, almost, all services, it does nothing, but can be reused in the future. Added handling of the shutdown for Relayer to act immediately instead of waiting for the synchronization's end. Improved handling of the stop signal for fuel-core-sync.",3,0
1021,2023-02-16T01:15:53Z,2023-02-16T12:32:31Z,2023-02-16T12:32:31Z,10,126,84,"resolves: #1019
Disables p2p and sync services from starting if no peering key or network name is configured.",2,0
1022,2023-02-16T07:30:22Z,2023-02-16T13:09:56Z,2023-02-16T13:09:56Z,1,45,44,pulls in the changes from FuelLabs/fuel-vm#355,3,0
1025,2023-02-16T23:34:24Z,2023-02-17T01:36:18Z,2023-02-17T01:36:18Z,4,8,2,"add rust_log option to deployment charts
increase default max_transmit_size to match our load balancer limit",2,1
1026,2023-02-17T02:20:54Z,2023-02-17T18:19:01Z,2023-02-17T18:19:01Z,1,131,1,Adds integ tests to verify resources_to_spend doesn't select from any spent resources,2,0
1027,2023-02-17T04:42:12Z,2023-02-17T18:43:05Z,2023-02-17T18:43:05Z,2,57,37,"Throw an error when attempting to use args like before and after for balance queries since they aren't used and are not currently supported.
Also updated the integ test for balances to setup assets for multiple owners to ensure the query is able to precisely select a particular owner.",2,1
1028,2023-02-17T18:24:30Z,2023-04-15T12:45:04Z,2023-04-15T12:45:04Z,10,1205,797,"The approach is mostly detailed in Notion.
These are the first steps of our Peer Reputation approach, there are certain todos left, could be added later on or if needed I can add them with this PR.
Todo:

 peer reputation decay with time
 implement unban peers after certain period
 reserved peers should not be banned/scored ? - this is kind of ""implemented"" by only updating the score of non-reserved peers

Ref #943",5,3
1029,2023-02-17T19:56:43Z,2023-02-19T22:53:52Z,2023-02-19T22:53:52Z,3,60,17,"Added transfer_back test to check that Bob can receive money back from Alice.
Subscribed for TxPool instead of block importer.",2,1
1030,2023-02-17T22:48:13Z,2023-02-20T16:29:38Z,2023-02-20T16:29:38Z,6,204,120,"Added tests to ensure errors like PredicateExhaustedGas are correctly returned by the txpool
Removed duplicate predicate verification
Removed async from tests that didn't need it
Removed tests related to predicates being enabled or disabled since they are always enabled.",3,0
1033,2023-02-20T20:36:27Z,2023-02-21T22:29:09Z,2023-02-21T22:29:09Z,20,463,127,"Added basic pruning of the transaction by the TTL.
It is done periodically for constant period of time. We can do it often(based on the remaining time to the next timeout), but I tried to avoid to often locking.",2,0
1037,2023-02-22T03:22:30Z,2023-02-22T17:20:34Z,2023-02-22T17:20:34Z,5,22,44,add fuel-core service monitor to helm chart,2,0
1039,2023-02-23T03:56:15Z,2023-02-23T17:47:14Z,2023-02-23T17:47:14Z,3,10,8,"Given we are now doing multiple sentries, we need to add a specific app selector that is common to fuel-core or sentry deployments, this is just an addition for it",2,0
1041,2023-02-23T15:53:04Z,2023-02-23T21:43:53Z,2023-02-23T21:43:53Z,1,95,0,"Added test to cover the iteration over owned transactions.
Ref #1040",2,0
1048,2023-02-26T22:24:53Z,2023-02-26T23:39:46Z,2023-02-26T23:39:46Z,2,5,15,"remove_dir_all has a security advisory due to a race condition, which was a dependency of tempfile, and has been removed in tempfile 3.4, so this just bumps the version to fix the security issue",2,0
1050,2023-02-27T22:20:59Z,,2023-07-24T17:38:21Z,94,681,471,"Added several new options for the rustfmt.toml, because I'm trying to keep the code in this style without them. Why not to automate them=D",3,1
1054,2023-03-08T06:45:59Z,2023-03-08T21:13:34Z,2023-03-08T21:13:34Z,33,1221,224,"closes: #544

adds logic to the executor for setting / verifying tx_pointers
adds tx pointer to chain config for coins and contracts
adds utxo id to chain config for contracts",2,0
1055,2023-03-08T08:06:23Z,2023-03-17T00:53:45Z,2023-03-17T00:53:45Z,46,729,941,"fixes: #1053
Remove owned coin index entries when coins are spent to improve the performance of random-improve based coin selection.
Already released v0.17.4 hotfix from this branch, ready to merge into mainline now.",2,2
1056,2023-03-08T17:07:16Z,2023-03-17T14:18:51Z,2023-03-17T14:18:51Z,8,845,930,"In this PR to PR I moved out our inner peer_manager logic from PeerInfoBehaviour to top of the p2p service, so that behaviour is not tasked with handling logic and decisions about peers, it just reports about peer events.
So I renamed previously named PeerManagerBehaviour to PeerReportBehaviour
and left PeerManager struct inside peer_manager.rs consequently this messes up the diffs be warned.
Although moving peer_manager up the stack cleaned up a lot of code and was a good decision, someone still had to poll decay and health_check intervals to inform p2p_service/peer_manager to perform the mentioned tasks, I had left those events inside PeerReportBehaviour as for now at least, until maybe we refactor some other parts and make it clearer where/who should perform the polling.",3,1
1058,2023-03-09T03:22:32Z,,2023-03-10T21:06:29Z,1,5,0,,3,1
1059,2023-03-11T15:52:29Z,2023-03-17T00:08:35Z,2023-03-17T00:08:35Z,20,247,227,"Updated the logic of the PoA to take into account the last_timestamp during block production. If the user manually specified the block with the future timestamp, the block production will use a new timestamp as a base to produce blocks.
Changed the API of the produce_blocks endpoint to accept only the start time and the number of blocks(The user can't specify the interval between blocks, it is defined by the Trigger::Interval mode).
Allowed enabling of the manual_blocks_enabled for the Trigger::Interval production mode.",7,4
1060,2023-03-13T15:03:26Z,2023-03-15T17:06:23Z,2023-03-15T17:06:23Z,5,555,130,,2,0
1062,2023-03-14T23:25:56Z,2023-03-15T04:42:01Z,2023-03-15T04:42:01Z,18,208,41,"fixes: #1061
Increases the max_block_size to match the size limit of transactions",3,0
1066,2023-03-17T20:55:19Z,,2023-04-11T17:23:20Z,55,506,349,"Migrates the graphql api into a new separate crate, which contains all of the query traits, that are then implemented in fuel-core. dap is left in fuel-core, and due to that a MergedObject is needed to contain the full schema, but this change should good have no breaking changes on the endpoint",3,2
1067,2023-03-17T22:33:53Z,2023-03-22T01:16:25Z,2023-03-22T01:16:25Z,107,2146,1974,"Fixes #946
This PR also uses the latest fuel-vm with FuelLabs/fuel-vm#373.

Updated the code to use named input types.
Removed the usage of the MessageId from all places except the BlockHeader and related to the block stuff.
Used Nonce as a primary key for messages instead of MessageId. Because of it, we don't need CheckedMessage anymore. Also, several tests failed because the nonce was the same.
Updated the Nonce from u64 to 32 bytes. Updated the ABI to use uint256 instead of uint64 - FuelLabs/fuel-v2-contracts#35
Renamed Resources into Coins. Renamed all comments and GraphQL API. Moved coin.rs and resource.rs into one coins.rs.
Fixed some tests for FuelLabs/fuel-vm#377 not to increase the HP.
Removed usage of the Output::Message.
Renamed message_output_count - > message_receipt_count and message_output_root -> message_receipt_root

And the main feature of why this change was created(implemented by several lines):
MessageData aren't marked as spent unless included in a successfully executed script tx",2,0
1071,2023-03-22T01:27:34Z,2023-04-05T23:34:01Z,2023-04-05T23:34:01Z,94,961,726,"Close #1046
Updated the code to use fuel-vm 0.29",3,0
1073,2023-03-22T17:35:11Z,2023-03-27T13:24:09Z,2023-03-27T13:24:10Z,2,116,4,"Related issues:

Closes: #1064

Additional tests to confirm that we create and remove Merkle metadata from the DB upon asset/state put and remove",2,0
1078,2023-03-28T16:53:01Z,,2023-03-28T19:50:02Z,17,562,368,This branch is a hotfix for beta 3 to support sticky session on the client. The change enables cookies for the reqwest and reuse them for the subscription,2,4
1079,2023-03-28T17:32:33Z,2023-03-30T12:03:53Z,2023-03-30T12:03:53Z,17,159,66,"Analog of the #1078 for master
Closes #1076 and #1074",2,0
1080,2023-03-28T20:56:55Z,2023-03-28T22:11:41Z,2023-03-28T22:11:41Z,1,6,0,"enables buffering of proxy responses
increases client and response buffer sizes to 1mb to avoid frequent tmp file access / disk IO
increase timeout from a default of 1m to 1h to avoid 504 timeouts",2,0
1081,2023-03-28T21:31:59Z,,2023-03-28T23:58:07Z,10,70,74,The previous release introduced a breaking change. Revert that part back,2,0
1083,2023-03-29T07:25:34Z,2023-04-05T01:47:02Z,2023-04-05T01:47:02Z,16,1414,531,enable honeycomb tracing for fuel-core,3,0
1084,2023-03-29T19:08:02Z,2023-03-29T23:24:39Z,2023-03-29T23:24:39Z,3,25,32,"Follow up on #1008
Now that loading a Sparse Merkle tree checks for empty sum roots, we can simplify the usage at the client code level.",2,0
1091,2023-03-30T18:57:16Z,2023-03-30T20:39:58Z,2023-03-30T20:39:58Z,11,180,151,Reworked unit tests to execute the code directly without cmd.,2,0
1092,2023-03-30T19:51:07Z,2023-03-30T20:59:40Z,2023-03-30T20:59:40Z,1,12,0,"Occasionally our CI fails due to exceeding the docker.io rate limit.
This PR adds an API token to our CI to increase our image pull limit.",2,0
1096,2023-04-02T06:58:48Z,,2023-04-05T23:58:45Z,15,224,114,"Yet another hotfix.. In my local testing it seems like jemalloc has less overhead when initializing vm instances (which we do frequently). It should also do a better job of reclaiming memory.
The release also disables dap endpoints for the production.",2,1
1107,2023-04-06T01:37:03Z,2023-04-07T22:19:36Z,2023-04-07T22:19:36Z,54,495,230,"Adapts fuel-core to changes in FuelLabs/fuel-vm#406
Routing the consensus parameters everywhere is a little painful, since we need to fetch the transaction ID so often. I've cleaned this up a little bit by introducing a new infallible api in fuel-vm to fetch the transaction id when it's known to be computed already.
This could be cleaned up even further by using Checked<Tx> in more places, such as using pub type CheckedBlock = Block<CheckedTransaction> in the executor and consensus modules. But this would involve larger structural changes and optimizations to avoid rechecking transactions that have already been checked in the tx pool during sync, and should be done in a separate PR.",2,0
1108,2023-04-06T02:32:53Z,2023-05-29T09:52:36Z,2023-05-29T09:52:36Z,43,2261,616,"This PR refactors the transaction_status_change function to improve its readability and efficiency. The main changes are:

Changed input stream type from BoxStream<'a, Result<TxUpdate, BroadcastStreamRecvError>> to BoxStream<'a, TxStatusMessage>.
Changed return type from impl Stream<Item = anyhow::Result<TransactionStatus>> + 'a to impl Stream<Item = anyhow::Result<ApiTxStatus>> + 'a.
Removed unnecessary async/await and error mapping for the initial database status check.
Replaced the complex unfold logic with a simpler chain of the initial database check and stream, followed by a take_until to handle stream termination.
Replaced the nested match structure with a single match block to improve readability.
Simplified the stream termination logic by closing the stream if s new transaction status is not Submitted.

Additionally, this PR introduces property testing to ensure the refactored transaction_status_change function behaves correctly under various input conditions. This will help identify potential edge cases, increase the test coverage, and provide greater confidence in the robustness of the changes made.",4,1
1111,2023-04-09T00:35:15Z,2023-04-11T19:44:37Z,2023-04-11T19:44:37Z,4,7,1,"For some reason the e2e test for dry-run's was actually running transfer_back, this corrects that to use the actual dry run test impl.
Also includes jemalloc in the e2e integration tests to more closely represent production.",2,0
1113,2023-04-09T03:19:39Z,2023-04-20T16:35:54Z,2023-04-20T16:35:54Z,17,256,88,"closes #1036
based on #1090, but completes the work and squashes into a single commit for easy cherry-picking
pulls in all changes from #1114",2,0
1115,2023-04-11T04:36:20Z,2023-04-17T08:52:12Z,2023-04-17T08:52:12Z,7,75,1,See more details below,2,2
1118,2023-04-12T14:58:54Z,2023-04-13T14:29:58Z,2023-04-13T14:29:58Z,4,70,74,"Deals with #1028 (comment)
Pass the Punisher to PeerManager so it can deal with the banishment internally :)",2,0
1119,2023-04-12T15:00:26Z,,2023-04-19T13:34:14Z,5,55,409,"It is the change only for beta 3. We don't have this problem in the master branch.
It removes the calculation/verification of the Merkle root for the state_root and balance_root fields in inputs and outputs.
More about it in the slack.",3,1
1140,2023-04-19T02:11:03Z,,2023-05-02T23:51:30Z,11,328,22,"This PR adds pyroscope to fuel-core-bin. Pyroscope is a platform that allows for continuous profiling, enabling real-time flamegraphs in deployed environments.
This is still in draft, and requires additional testing in the dev environment.",2,1
1144,2023-04-20T19:42:46Z,2023-05-22T23:18:53Z,2023-05-22T23:18:53Z,35,883,303,"Related issues:

#1121

This PR introduces a module of Rust types used by the Client in the fuel-core-client crate. These types are referred to as client types and they are used to compose the Client interface. All function signatures in the Client interface now use only client types and Rust primitives. All references to GraphQL schema types are removed from the interface's function signatures.
Specifically, this PR introduces the following client types:

Balance
Block (as well as its constituent parts Header, Consensus, Genesis, and PoAConsensus)
ChainInfo
Coin, MessageCoin, and CoinType
ConsensusParameters
Contract and ContractBalance
MerkleProof
Message and MessageProof
NodeInfo

While GraphQL types are used inside the client methods, all types returned by the GraphQL server are transformed back into client types so that the Client returns only these client types. This is enabled by defining a number of From traits, that transform the GraphQL schema type into the client type.",3,0
1151,2023-04-22T19:29:37Z,2023-04-25T09:39:17Z,2023-04-25T09:39:17Z,14,144,141,"Added a new e2e test that allows dry run any hex-encoded transaction.
Simplified the PrometheusExtension.
Use a new fuel-vm 0.26.3 with disabled logging for instruction function.
Use tokio_rayon::spawn_fifo to run dry runs instead of manual semaphore and tokio::spawn_blocking.
Removed 5 second delay for dry runs caused by the relayer.",3,0
1152,2023-04-24T05:21:30Z,2023-04-26T11:02:03Z,2023-04-26T11:02:03Z,18,334,1028,Updates the audit to the latest version and also adds it to PRs,3,4
1158,2023-04-25T14:46:55Z,2023-04-27T10:44:32Z,2023-04-27T10:44:32Z,42,123316,740,"Closes #1137
The PR duplicates most of the changes from the #1157 but for the master branch.
It adds two e2e tests, but they fail because of new changes in the fuel-vm(the change to the PC register). It is not critical, but replacing them with the correct scripts later would be nice.

One test uploads the contract with a huge large state and executes it. The test takes a lot of time to execute and highlights that we have performance problems with the state calculation: #1143
Another test is more of a base for spamming the testnets. We can put any hex-encoded transaction and dry run it on the network. It contains a simple transfer transaction right now.

The change improves the fuel-core snapshot command to accept the arguments, and you can either snap the whole state of the blockchain via the everyone command, or the state only of the contract. In the follow-up PRs we can snapping of the coins and messages too.
Optimizations:

Use a lru cache to store the uncompressed data in the DB. The size is configurable via CLI max-database-cache-size.
Added a DryRun execution type that skips the coinbase Mint transaction. In the future, we can skip some non-actual steps too.
Updated the PrometheusExtension to not use the lock.
Removed usage of the tracing extension in the graph QL because we have PrometheusExtension to gather the statistic about requests. #1152 removes the honeycomb, so I didn't duplicate it here.
Replaced the tokio::task::spawn_blocking + Semaphore by tokio_rayon::spawn_fifo.
Replaced the concatenated column_key with the array for separate hash maps per column in the MemoryStore and MemoryTransactionView.
Replaced the Vec<u8> in the KV API by the Arc<Vec<u8>>, because in most cases, we use it only for deserialization, and the memory database can continue to store the type. It helps reduce the number of clones.
Used BTreeMap in the MemoryStore, because it allows to have a more optimized iter_all method. Without this change, a new e2e test fails with a timeout.
Dry run doesn't wait for relayer anymore.",3,2
1159,2023-04-25T17:32:04Z,2023-04-26T13:06:53Z,2023-04-26T13:06:53Z,9,99,33,Adding optional Task parameters when initializing Task:RunnableTask from RunnableService.,2,0
1162,2023-04-26T10:37:02Z,2023-04-26T15:21:52Z,2023-04-26T15:21:52Z,1,4,7,Closes #966,2,0
1165,2023-04-27T00:12:34Z,2023-04-27T19:26:17Z,2023-04-27T19:26:17Z,7,581,284,"The change bumps the version to 0.18.0 and exposes sync_max_get_header and sync_max_get_txns in the helm chart.
Release 0.18.0
Overview
A new release brings:

Optimization for the execution based on the performance from beta 3 and on internal benchmarks. Improved metrics gathering.
Stabilization and better test coverage of the fuel-vm. We removed almost all unsafe code and added test cases for each opcode. Fixed some edge cases with memory in the fuel-vm.
Fully integrated Merkle trees and filled all malleable fields in the transactions.
Added retryable messages, removed redundant fields from it, and updated the API to support a new commitment schema.

What's Changed
Breaking

All unsafe functions were replaced with safe analog in the fuel-crypto - FuelLabs/fuel-vm#346
$hp holds the address of the last available byte in a heap, while previously it was $hp - 1 - FuelLabs/fuel-vm#377
Each variant in the fuel_tx::Input enum now has its own type - FuelLabs/fuel-vm#364
Message nonce is unified and now Bytes32 everywhere - FuelLabs/fuel-vm#394
Removed the message_id field from all places - FuelLabs/fuel-vm#397, FuelLabs/fuel-vm#373,
Unified the block height in all places with the introduction of a new BlockHeigh - FuelLabs/fuel-vm#410
Make SMO instruction take data ptr as an argument -  FuelLabs/fuel-vm#404
Now the chain id affects the signature and predicate's owner and should be passed into the sign function - FuelLabs/fuel-vm#406
Updated the produce_blocks endpoint to accept the start time and the number of blocks. All new blocks will use the previous timestamp as a base - #1059
The fuel-core stores only unspent coins and messages, so all API that previously returned spent coins is affected - Prune owned coin idx when inputs are spent by @Voxelot in #1055
The message proof API has been changed to be compatible with a new version - #1071
The fuel-core now has retryable messages and coin messages. Retryable messages can only be consumed during successful transaction execution. The coin message acts as common coins. resouces_to_spend API was replaced with coins_to_spend that returns a new CoinType type. - #1067

All changes

adding fuel-core service monitor to helm chart by @rfuelsh in #1037
Adding specific app selector  by @rfuelsh in #1039
use sticky sessions for GQL requests to sentries by @Voxelot in #1042
Add ingress service name to helm chart by @rfuelsh in #1043
Added test to verify the iteration over owned transactions by @xgreenx in #1041
Change sentry lb to use clusterIP by @Voxelot in #1045
Fixed Tempfile dependency by @ControlCplusControlV in #1048
Write contract code in raw by @freesig in #994
attempt to use buildjet runners by @Voxelot in #1017
Set tx pointer during block production by @Voxelot in #1054
Used BASE_AMOUNT for test with bob to pay for fee by @xgreenx in #1057
Prepare GraphQL Crate for extraction by @ControlCplusControlV in #1012
Support large contract deployments over p2p by @Voxelot in #1062
fix yaml and add linting job by @Voxelot in #1063
Actualized the ABI for message to be compatible with last version of the Solidity contracts. by @xgreenx in #1060
feat: Contract state and assets merkle data storage by @bvrooman in #1008
Take into account the previous block timestamp during block production by @xgreenx in #1059
Prune owned coin idx when inputs are spent by @Voxelot in #1055
Retrayable messages fuel-core part by @xgreenx in #1067
chore: Additional Tests for Contract States and Balances by @bvrooman in #1073
Rust 1.68.1 & Sparse Registry by @Voxelot in #1077
Nginx tuneup by @Voxelot in #1080
chore: Update balance and state Merkleization by @bvrooman in #1084
Support sticky session in the client by @xgreenx in #1079
Added e2e test to run 1000 dry_run by @xgreenx in #1091
Use docker.io auth credentials to overcome rate limiting by @Voxelot in #1092
honeycomb tracing subscription by @Voxelot in #1083
Update withdrawal proof API to support proving from a block header committed to L1 by @xgreenx in #1071
Upstream v0.17.8 by @Voxelot in #1102
use chainid for transactions and predicates by @Voxelot in #1107
fix the dry-run e2e test to actually perform dry runs by @Voxelot in #1111
peer reputation with separate app & gossipsub score by @leviathanbeak in #1028
Adding sentry data synchronization by @rfuelsh in #1115
Capture metrics for graphql api by @Voxelot in #1113
Update cargo audit and add to commit by @freesig in #1152
add task params by @leviathanbeak in #1159
Took into account that block creation could take some time by @xgreenx in #1162
Applying optimizations from 0.17.11 release by @xgreenx in #1158

Full Changelog: v0.17.3...v0.18.0",2,1
1166,2023-04-27T05:40:28Z,2023-04-28T14:12:39Z,2023-04-28T14:12:39Z,7,70,49,"Fixes #1164. Prepares for wide math intstruction benchmarking.
Most importantly this addresses the SMO changes from FuelLabs/fuel-vm#407 and FuelLabs/fuel-vm#404, and ALOC/HP changes from FuelLabs/fuel-vm#377",2,0
1169,2023-05-02T15:31:48Z,2023-06-09T14:30:39Z,2023-06-09T14:30:39Z,23,750,94,"Closes #1120
After refactoring and enabling TaskParams for Services in order for them to be turned into Task with a TaskParam,
I created SyncPort, and added it as a TaskParam for poa's Service.
The current implementation is that the SyncAdapter only checks for 60 seconds if a new block was imported, if not, it considers the PoA node to be synced.
Improvement on top of this would be - waiting first to connect to N amount of Reserved Peers.",3,1
1171,2023-05-03T00:09:52Z,2023-05-04T12:26:58Z,2023-05-04T12:26:58Z,3,21,1,"The versions being tested for backwards compatibility are no longer supported, so I've excluded them from the workspace to avoid spending ci hours on these.",3,0
1172,2023-05-03T15:58:42Z,2023-05-03T22:05:50Z,2023-05-03T22:05:50Z,3,118,117,Bump the fuel-vm to 0.31.1 and release 0.18.1 with fix FuelLabs/fuel-vm#435,2,0
1173,2023-05-04T11:41:48Z,2023-05-18T19:09:50Z,2023-05-18T19:09:50Z,15,396,20,Waiting for the next fuel-vm release that contains wideint operations.,2,0
1175,2023-05-04T17:36:29Z,2023-05-09T09:48:00Z,2023-05-09T09:48:00Z,6,88,2,Makes the FuelClient::query public to allow custom queries. Added an example of how to write custom queries for #1174 but it requires access to the schema.sdl,3,2
1176,2023-05-06T16:31:55Z,2023-05-25T22:09:58Z,2023-05-25T22:09:58Z,5,2,2,,2,0
1179,2023-05-10T12:01:43Z,2023-06-04T13:36:38Z,2023-06-04T13:36:38Z,30,906,139,"In this approach I have added NetworkInfo trait to SyncAdapter implementation,
it returns number of reserved peers that are currently connected, so when we are syncing with the network we first check the min amount of reserved peers are already connected.",3,0
1184,2023-05-22T15:18:15Z,2023-05-23T23:36:19Z,2023-05-23T23:36:19Z,17,48,26,Fixes #1155,2,0
1185,2023-05-23T05:16:19Z,2023-05-23T22:36:14Z,2023-05-23T22:36:14Z,6,403,221,"Make executor use it's own config struct instead of reusing the fuel-core service config.
Make utxo_validation overridable on each execution, avoiding the need to create a fresh executor instance with a cloned config that's been slightly modified

This gives benefits such as:

reduces the cost of dry-runs if the config object is large
makes it easier to extract executor to a separate crate later on
is a more sensible pattern to split parameters that change based on the caller vs ones that always stay the same",2,0
1191,2023-05-25T23:05:03Z,2023-05-31T20:37:15Z,2023-05-31T20:37:15Z,27,227,348,"Related issues:

Closes #1121

This PR update the FuelClient API to use ID types in place of string serialized IDs. Now, consumers of the API must directly pass a client type when performing a method call. Internally, these ID types are then converted to GraphQL types to be used in the GraphQL API. This API update represents a breaking change.",3,0
1192,2023-05-26T15:28:49Z,2023-05-29T23:02:22Z,2023-05-29T23:02:23Z,5,95,19,,4,0
1195,2023-05-31T01:21:36Z,2023-06-07T21:11:20Z,2023-06-07T21:11:20Z,77,861,448,"The change is based on #1072, so you can review it first to check the main changes for the predicate estimation. All other changes are from new breaking changes from the fuel-core 0.33.
The main changes:

Each transaction now should have at least one coin or message, so it affected all unit and integration tests to construct a valid transaction.
Contract id is affected by the new strategy of the root calculation. So it changed hardcoded values in several places.
Now, id and check_signature functions use ChainId instead of the ConsensusParametrs because of corresponding changes in the fuel-vm.
Removed the verify_tx_has_at_least_one_coin_or_message stage from the executor because it is done by the CheckedTransaction.
Transaction::precompute may return the error for Create transactions if the witness is not set.",3,0
1198,2023-06-01T21:17:07Z,,2023-06-02T14:46:54Z,4,49,48,"The indexer team needs a public version of the FuelClient::query method to write custom queries. We don't need to deploy it to testnet, only a new version as a lirbary",2,1
1201,2023-06-05T23:02:31Z,2023-06-08T18:54:44Z,2023-06-08T18:54:44Z,1,0,0,"Adding this diagram that was drawn while familiarizing myself with the codebase. I showed it to @Voxelot, who mentioned adding it to our docs. Lots of the credit goes to @freesig for guiding me through the code!",2,0
1203,2023-06-09T09:31:01Z,2023-06-09T13:33:22Z,2023-06-09T13:33:22Z,3,356,335,Use a new VM release with bugfix for Input::MessageCoinSigned and Input::MessageCoinPredicate,2,0
1207,2023-06-11T22:03:04Z,2023-06-13T14:18:34Z,2023-06-13T14:18:34Z,10,334,52,"This PR uses an upcoming release of the fuel-vm 0.34.
It brings a new important feature - hashing the leaf key for the SMT to prevent tree structure manipulation.
As an example: Hashed storage key decreases the number of nodes in the SMT from 1.3M to 70K for 30K leaves in the run_contract_large_state e2e test. It improves the test time from 200 seconds to 13 seconds in Debug mode and to 1 second in the release(instead of 20 seconds).
So it improves security and performance.
The change is breaking because it affects the state_root field -> generated ContractId.
Fixes #1143",3,0
1208,2023-06-12T18:58:18Z,2023-06-13T17:08:13Z,2023-06-13T17:08:13Z,8,438,90,Closes #1204,3,0
1210,2023-06-13T14:07:20Z,2023-06-13T16:40:55Z,2023-06-13T16:40:56Z,6,148,40,Close #1194,2,0
1211,2023-06-13T14:54:59Z,2023-06-14T00:23:28Z,2023-06-14T00:23:28Z,3,353,332,"What's Changed

version compatibility cleanup by @Voxelot in #1171
Added example with custom query around the fuel-core-client by @xgreenx in #1175
Update to fuel-vm 0.32 (including wideint gas profiling) by @Dentosal in #1173
feat: Client primitives by @bvrooman in #1144
Improve executor config by @Voxelot in #1185
Added contract_id to the ContractConfig by @xgreenx in #1184
fix windows file name error by @firedpeanut in #1176
Make transaction status stream work by @freesig in #1108
Added submit_and_await endpoint to not miss the notifications by @xgreenx in #1192
feat: Use ID types in client api by @bvrooman in #1191
Use fuel-vm 0.33 with predicate estimation by @xgreenx in #1195
Add transaction lifecycle diagram to the docs by @digorithm in #1201
sync with peers before producing blocks by @leviathanbeak in #1169
SMT storage key hashing by @xgreenx in #1207

New Contributors

@firedpeanut made their first contribution in #1176

Full Changelog: v0.18.1...v0.19.0",2,0
1214,2023-06-14T21:59:47Z,2023-06-16T09:56:25Z,2023-06-16T09:56:25Z,16,494,487,Updated default gas costs,5,0
1215,2023-06-16T09:58:52Z,2023-06-17T01:19:11Z,2023-06-17T01:19:11Z,4,107,107,"What's Changed

Use fuel-vm 0.34.1 with updated gas prices by @xgreenx in #1214

Full Changelog: v0.19.0...v0.19.1",2,0
1219,2023-06-19T17:23:26Z,2023-06-19T20:34:55Z,2023-06-19T20:34:55Z,3,21,10,closes: #1218,2,0
1222,2023-06-21T19:46:15Z,2023-06-21T21:47:41Z,2023-06-21T21:47:41Z,14,540,561,,2,2
1223,2023-06-22T13:25:04Z,2023-06-22T20:36:58Z,2023-06-22T20:36:58Z,25,579,203,"Closes #1217 for the master.
Release 0.17.13 was packed with the same change #1220",2,0
1226,2023-06-22T20:55:33Z,2023-06-29T12:59:10Z,2023-06-29T12:59:10Z,2,173,0,"Related issues:

Ref #1134

These benches demonstrate the performance of:

Inserting 1 key/value pair into the RocksDB table that contains n state entries for a single contracts. n = [0, 1, 10, 100, 1,000, 10,000, 100,000, 1,000,000]
Inserting 1 key/value pair into the RocksDB table that contains 1 state entries with n existing contracts. n = [0, 1, 10, 100, 1,000, 10,000, 100,000, 1,000,000]

Bench results:
state single contract/insert state with 0 preexisting entries
                        time:   [11.991 µs 12.132 µs 12.310 µs]
                        change: [-4.7172% -1.6523% +1.0884%] (p = 0.29 > 0.05)
                        No change in performance detected.
Found 9 outliers among 100 measurements (9.00%)
  5 (5.00%) high mild
  4 (4.00%) high severe
state single contract/insert state with 1 preexisting entries
                        time:   [25.009 µs 28.694 µs 32.962 µs]
Found 6 outliers among 100 measurements (6.00%)
  5 (5.00%) high mild
  1 (1.00%) high severe
state single contract/insert state with 10 preexisting entries
                        time:   [39.002 µs 41.617 µs 44.324 µs]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
state single contract/insert state with 100 preexisting entries
                        time:   [60.968 µs 63.985 µs 67.259 µs]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
state single contract/insert state with 1,000 preexisting entries
                        time:   [87.465 µs 91.207 µs 95.394 µs]
                        change: [+0.4239% +4.5684% +8.9542%] (p = 0.04 < 0.05)
                        Change within noise threshold.
Found 7 outliers among 100 measurements (7.00%)
  6 (6.00%) high mild
  1 (1.00%) high severe
state single contract/insert state with 10,000 preexisting entries
                        time:   [117.22 µs 121.38 µs 125.93 µs]
Found 6 outliers among 100 measurements (6.00%)
  6 (6.00%) high mild
state single contract/insert state with 100,000 preexisting entries
                        time:   [145.05 µs 148.30 µs 151.60 µs]
                        change: [-3.4471% -0.8145% +1.9661%] (p = 0.56 > 0.05)
                        No change in performance detected.
state single contract/insert state with 1,000,000 preexisting entries
                        time:   [186.36 µs 190.05 µs 193.80 µs]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild

state multiple contracts/insert state with 0 preexisting entries
                        time:   [11.957 µs 12.080 µs 12.237 µs]
                        change: [-19.431% -7.6642% +0.8636%] (p = 0.27 > 0.05)
                        No change in performance detected.
Found 9 outliers among 100 measurements (9.00%)
  5 (5.00%) high mild
  4 (4.00%) high severe
state multiple contracts/insert state with 1 preexisting entries
                        time:   [11.872 µs 12.008 µs 12.199 µs]
Found 5 outliers among 100 measurements (5.00%)
  2 (2.00%) high mild
  3 (3.00%) high severe
state multiple contracts/insert state with 10 preexisting entries
                        time:   [12.189 µs 12.252 µs 12.320 µs]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) high mild
  3 (3.00%) high severe
state multiple contracts/insert state with 100 preexisting entries
                        time:   [12.538 µs 12.691 µs 12.867 µs]
Found 8 outliers among 100 measurements (8.00%)
  5 (5.00%) high mild
  3 (3.00%) high severe
state multiple contracts/insert state with 1,000 preexisting entries
                        time:   [13.041 µs 13.278 µs 13.640 µs]
                        change: [-1.9317% +1.1895% +4.0288%] (p = 0.46 > 0.05)
                        No change in performance detected.
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high severe
state multiple contracts/insert state with 10,000 preexisting entries
                        time:   [13.350 µs 13.529 µs 13.729 µs]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
state multiple contracts/insert state with 100,000 preexisting entries
                        time:   [13.973 µs 14.312 µs 14.719 µs]
                        change: [+4.3928% +9.0688% +14.995%] (p = 0.00 < 0.05)
                        Performance has regressed.
Found 6 outliers among 100 measurements (6.00%)
  2 (2.00%) high mild
  4 (4.00%) high severe
state multiple contracts/insert state with 1,000,000 preexisting entries
                        time:   [13.891 µs 14.096 µs 14.314 µs]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe

Conclusion:
For inserting n state entries for the same contract, the performance appears to be logarithmic with n.
For inserting 1 state entry for a contract, with n existing contracts, the performance appears to be fairly constant, i.e., the number of existing contracts does not have an impact on the performance of inserting state for a contract.
Note that these benchmarks were taken after the change to use RocksDB in benches (#1227).",2,1
1227,2023-06-22T23:00:59Z,2023-06-23T00:18:22Z,2023-06-23T00:18:22Z,1,1,4,Closes #1216,3,0
1230,2023-06-28T10:51:56Z,2023-07-04T15:35:30Z,2023-07-04T15:35:30Z,1,144,11,"Related issues:

Closes #1134

This PR adds additional benches to compare the performance of inserting state when the existing data is 1) written to the database, and 2) stored in-memory in a transaction. The results demonstrate that when preexisting data is held in a transaction, inserting state has constant complexity and is generally faster, and performance degradation comes from the logarithmic complexity of Merkle tree insertion.
insert state single contract database/insert state with 0 preexisting entries
                        time:   [3.0283 µs 3.0349 µs 3.0417 µs]
insert state single contract database/insert state with 1 preexisting entry
                        time:   [6.4704 µs 6.9960 µs 7.6233 µs]
insert state single contract database/insert state with 10 preexisting entries
                        time:   [15.750 µs 16.668 µs 17.636 µs]
insert state single contract database/insert state with 100 preexisting entries
                        time:   [29.102 µs 30.128 µs 31.204 µs]
insert state single contract database/insert state with 1,000 preexisting entries
                        time:   [45.264 µs 46.447 µs 47.666 µs]
insert state single contract database/insert state with 10,000 preexisting entries
                        time:   [63.839 µs 65.277 µs 66.784 µs]
insert state single contract database/insert state with 100,000 preexisting entries
                        time:   [85.863 µs 87.430 µs 89.119 µs]

insert state single contract transaction/insert state with 0 preexisting entries
                        time:   [2.4829 µs 2.8342 µs 3.4867 µs]
insert state single contract transaction/insert state with 1 preexisting entry
                        time:   [5.4261 µs 5.8455 µs 6.2946 µs]
insert state single contract transaction/insert state with 10 preexisting entries
                        time:   [11.104 µs 11.721 µs 12.352 µs]
insert state single contract transaction/insert state with 100 preexisting entries
                        time:   [20.425 µs 21.213 µs 21.987 µs]
insert state single contract transaction/insert state with 1,000 preexisting entries
                        time:   [28.998 µs 29.852 µs 30.714 µs]
insert state single contract transaction/insert state with 10,000 preexisting entries
                        time:   [38.645 µs 39.401 µs 40.206 µs]
insert state single contract transaction/insert state with 100,000 preexisting entries
                        time:   [49.969 µs 50.776 µs 51.611 µs]

insert state multiple contracts database/insert state with 0 preexisting entries
                        time:   [2.7846 µs 2.7901 µs 2.7962 µs]
insert state multiple contracts database/insert state with 1 preexisting entry
                        time:   [2.9599 µs 2.9688 µs 2.9782 µs]
insert state multiple contracts database/insert state with 10 preexisting entries
                        time:   [3.1822 µs 3.2080 µs 3.2350 µs]
insert state multiple contracts database/insert state with 100 preexisting entries
                        time:   [3.7841 µs 3.9514 µs 4.1838 µs]
insert state multiple contracts database/insert state with 1,000 preexisting entries
                        time:   [4.1301 µs 4.3894 µs 4.7190 µs]
insert state multiple contracts database/insert state with 10,000 preexisting entries
                        time:   [4.4221 µs 4.5124 µs 4.6034 µs]
insert state multiple contracts database/insert state with 100,000 preexisting entries
                        time:   [4.8611 µs 4.9762 µs 5.0904 µs]

insert state multiple contracts transaction/insert state with 0 preexisting entries
                        time:   [2.8071 µs 2.8121 µs 2.8175 µs]
insert state multiple contracts transaction/insert state with 1 preexisting entry
                        time:   [2.9778 µs 2.9842 µs 2.9912 µs]
insert state multiple contracts transaction/insert state with 10 preexisting entries
                        time:   [2.9502 µs 2.9587 µs 2.9677 µs]
insert state multiple contracts transaction/insert state with 100 preexisting entries
                        time:   [2.9706 µs 2.9779 µs 2.9854 µs]
insert state multiple contracts transaction/insert state with 1,000 preexisting entries
                        time:   [2.9824 µs 2.9910 µs 2.9999 µs]
insert state multiple contracts transaction/insert state with 10,000 preexisting entries
                        time:   [2.9799 µs 2.9887 µs 2.9985 µs]
insert state multiple contracts transaction/insert state with 100,000 preexisting entries
                        time:   [2.9731 µs 2.9846 µs 2.9963 µs]",3,3
1231,2023-06-28T11:07:18Z,2023-06-29T10:56:17Z,2023-06-29T10:56:18Z,11,286,377,"Speedup and stabilize unit and integration tests:

Removed usage of mdns = true from all test except one(which tests it)
P2PService::startis async function now and awaits getting of any address
Updated some p2p tests to have more strict conditions to exit.",3,0
1232,2023-06-28T16:46:24Z,2023-06-29T20:40:19Z,2023-06-29T20:40:19Z,10,3,650,Closes #1182. Breaking change.,2,0
1233,2023-06-29T11:47:00Z,2023-07-04T17:03:15Z,2023-07-04T17:03:15Z,3,24,5,Enables the arm64 platform in our docker image builds. This should help with running fuel-core docker images on M1 silicon.,3,0
1241,2023-07-08T07:35:35Z,2023-07-08T13:04:59Z,2023-07-08T13:04:59Z,1,1,1,Erorr -> Error,2,0
1244,2023-07-11T17:15:32Z,2023-07-12T05:46:05Z,2023-07-12T05:46:05Z,10,971,2,"#1221
This PR adds:

new GraphQL schema for GasCosts inside the ChainInfo schema
public GasCosts types for client
appropriate conversions
check in tests to confirm gas costs are included in chain info",4,3
1248,2023-07-12T16:46:16Z,2023-07-12T21:57:21Z,2023-07-12T21:57:21Z,1,32,29,#1112,2,8
1249,2023-07-12T23:09:42Z,2023-07-14T18:52:56Z,2023-07-14T18:52:56Z,9,277,125,"The change adds a MaybeCheckedTransaction type that is either CheckedTransaction or Transaction.
We need it because the validation of the block works with the Transaction type, while block production works with CheckedTransaction(TxPool has already validated transactions before during insertion).
The executor calls check_signatures and check_predicates that inside only will be executed if the flag is not set.


It should speedup block production",2,0
1250,2023-07-13T00:12:12Z,2023-07-14T17:53:39Z,2023-07-14T17:53:39Z,10,136,72,"#1186
This PR:

Creates new extension for logging
Adds new extension to GraphQL API
Allows caller of new_service to customize the log_threshold_ms for how long a query must take for it to get logged",4,6
1251,2023-07-13T23:10:15Z,2023-07-14T04:45:06Z,2023-07-14T04:45:06Z,1,1,1,"Removed erroneous build-platform on the runnable image, as it was forcing builds on all platforms to always use the native platform of the build env.",2,0
1252,2023-07-14T04:38:28Z,2023-08-03T01:17:43Z,2023-08-03T01:17:43Z,1,14,13,"github cache has been suffering from performance issues and the cache team at github has been very inactive. Testing out migrating to alternate CI caching schemes to improve performance.
see https://buildjet.com/for-github-actions/blog/launch-buildjet-cache",3,2
1253,2023-07-14T13:40:13Z,2023-07-27T15:42:15Z,2023-07-27T15:42:15Z,18,793,671,closes #1087 on the fuel-core side,2,0
1256,2023-07-14T16:54:00Z,2023-07-14T21:17:30Z,2023-07-14T21:17:30Z,31,278,81,"The PR uses the latest fuel-vm 0.35.0. It affects the fuel-core in the next way:

Removes support for OpaqueReceipt transaction
Adds new opcodes eck1, ecr1, ed19
Adds new Receipt::Mint and Receipt::Burn",3,0
1257,2023-07-16T20:42:53Z,2023-07-17T22:33:42Z,2023-07-17T22:33:42Z,7,416,326,"Release v0.20.0
The release brings a couple of new breaking changes from the fuel-vm 0.35.0 with bugfixes. Check the description of the VM release for more details.
The fuel-core release mostly improved the internal codebase but also brought some breaking changes:

Removed Trigger::Hybrid PoA block trigger mode. Only Trigger::Instante and Trigger::Interval are available for block production now. The main mode for testnets and mainnet will be Interval.
Removed support for OpaqueReceipt and the Receipt type doesn't have the raw_payload field anymore.
A Receipt type got two new variants: Mint and Burn. The corresponding opcodes emit these new events.
The AssetId is derived from ContractId and additional nonce. So the ContractId and AssetId can't be the same anymore.

What's Changed

bump rocksdb to enable compiling with GCC 13 by @segfault-magnet in #1219
setting peer reputation params by @leviathanbeak in #1202
Take into account the actually used gas by the transactions and fetch more transaction by @xgreenx in #1223
Use production configuration for fuel-core during benches by @xgreenx in #1227
Speedup and stabilize unit and integration tests by @xgreenx in #1231
test: State benchmarks by @bvrooman in #1226
Remove hybrid PoA block trigger mode by @Dentosal in #1232
test: Benchmark contract state insertions with DB vs. DB transactions by @bvrooman in #1230
multiplatform docker builds by @Voxelot in #1233
Fix typo in architecture.md by @eltociear in #1241
Expose gas cost in chain info by @MitchTurner in #1244
Reuse calculated tx id in executor by @MitchTurner in #1248
Fix multi-platform images by @Voxelot in #1251
Add logging of the long GraphQL queries for future debug by @MitchTurner in #1250
Reused CheckedTransaction from transaction pool in the executor by @xgreenx in #1249
Bump fuel-vm to 0.35.0 version by @xgreenx in #1256

New Contributors

@segfault-magnet made their first contribution in #1219
@eltociear made their first contribution in #1241
@MitchTurner made their first contribution in #1244

Full Changelog: v0.19.1...v0.20.0",2,0
1258,2023-07-18T05:49:33Z,2023-07-18T09:21:54Z,2023-07-18T09:21:54Z,23,26,4,The fix for failed publishing,3,0
1262,2023-07-26T00:29:08Z,2023-08-10T15:36:15Z,2023-08-10T15:36:15Z,66,2870,2447,"#1243
Adding the changes from FuelLabs/fuel-vm#514 to fuel-core",3,7
1263,2023-07-27T12:39:57Z,2023-08-14T15:43:23Z,2023-08-14T15:43:23Z,5,176,19,Closes #1254,2,2
1264,2023-07-27T14:51:53Z,2023-07-27T17:23:08Z,2023-07-27T17:23:08Z,8,153,11,"Fixed wrong encoding of the Mint and Burn receipts.
Added an integration test to decode all receipts.",2,0
1265,2023-07-27T17:27:09Z,2023-07-27T18:38:18Z,2023-07-27T18:38:18Z,6,170,153,"Release v0.20.2
The release adds parallel predicate verification and fixes the Receipt GraphQL serialization bug.
What's Changed

parallel predicate verification by @leviathanbeak in #1253
Fixed wrong encoding of the Mint and Burn receipts. by @xgreenx in #1264

Full Changelog: v0.20.1...v0.20.2",2,0
1266,2023-07-27T23:25:23Z,2023-08-03T22:47:35Z,2023-08-03T22:47:35Z,1,5,2,,2,0
1267,2023-07-28T10:18:59Z,,2023-08-09T20:18:13Z,13,144,3,"closes #1168
I added metrics to each run() method of RunnableTask implementor.
Improvement: this could be hidden behind metrics feature?",2,1
1268,2023-07-29T01:11:39Z,2023-08-03T13:49:03Z,2023-08-03T13:49:03Z,1,61,55,"Related issues:

#1236

This PR disables P2P by default, and adds a new flag to the fuel-core CLI to allow users to expressly enable P2P:
--enable-p2p

Currently, the P2P service is only enabled when the user provides CLI arguments for keypair and network. If either of these values are missing, P2P is implicitly disabled without warning to the user. There is no way to tell if the user accidentally omitted these values, or deliberately omitted them in order to disable P2P.
A better user experience is to enable P2P explicitly using --enable-p2p and to make keypair and network mandatory. This will raise an error if either of these values is missing. P2P should be disabled by default. This flag replaces having to add or remove the network argument to enable or disable P2P implicitly.
If a user wants to run fuel-core with P2P, and supplies --enable-p2p, but forgets to include keypair and/or network, they will encounter an error:
error: the following required arguments were not provided:
  --keypair <KEYPAIR>
  --network <NETWORK>",2,1
1270,2023-08-01T00:41:33Z,2023-08-21T23:39:08Z,2023-08-21T23:39:08Z,21,964,769,#1133,5,3
1272,2023-08-02T21:02:28Z,2023-08-03T05:17:18Z,2023-08-03T05:17:18Z,15,711,463,Adding the Beta 4 Chainspec to the deployment/scripts/chainspec directory for the operator and public users to pull from.,2,0
1273,2023-08-02T21:43:44Z,2023-08-04T20:50:30Z,2023-08-04T20:50:30Z,8,358,112,"Added a new benchmark, block_target_gas, that runs different simple scripts with opcode and measures the block execution time. It allows us to track how accurate is our gas cost. If each benchmark takes ~ the same amount of time, then our gas cost is accurate. The current costs is not accurate because the noop takes ~1s for 100M gas, while meq - ~6s, logd - ~23s... Later we can have more opcodes tested and the end goal is to optimize opcodes/calibrate benchmarks to have the same execution time.
Modified the formula to calculate the dependent cost. Instead of the predicted value, we use the value from the worst scenario. But we also need to consider that the cost of most opcodes rises logarithmically. So, there is a point after which each new element is relatively cheap. And if the cost includes cases with a small number of elements as a base cost, we can make the cost per element much cheaper. So, the initial benchmarks with 10, 1000, and 10000 elements can be included in the base cost to decrease the cost for each new element. The predicted value from linear regression is used to find this point.",3,0
1274,2023-08-03T03:11:01Z,2023-08-24T02:13:34Z,2023-08-24T02:13:34Z,18,501,231,"Related issues:

#1167

This PR adds benchmarking for block synchronization.
Benchmarks simulate the import by using mock services that introduce artificial delays. Benchmarks are provisioned by reusing existing test types and mock ports. This PR refactors the existing back pressure tests to extract its test structures so that they can be reused in benchmarks.
In a follow up PR, I will be refactoring the block import to use a single buffer and asynchronous tasks to perform header downloads.",2,3
1279,2023-08-07T15:52:36Z,2023-08-15T18:26:42Z,2023-08-15T18:26:42Z,7,150,109,"Related issues:

#1236

This PR adds a new CLI flag to enable the Relayer service --enable-relayer, and disable the Relayer service by default.
When supplying the --enable-relayer flag, the --relayer argument becomes mandatory, and omitting it is an error. Similarly, providing a --relayer argument without the --enable-relayer flag is an error.
Lastly, providing the --keypair or --network arguments will also produce an error if the --enable-p2p flag is not set.",2,0
1281,2023-08-09T02:09:14Z,2023-08-09T12:09:37Z,2023-08-09T12:09:37Z,5,15,5,Fixes #1280,2,0
1284,2023-08-09T20:17:40Z,2023-08-09T23:11:25Z,2023-08-09T23:11:25Z,11,335,29,FIxes #1168,3,1
1285,2023-08-09T23:20:18Z,2023-08-10T03:23:32Z,2023-08-10T03:23:32Z,3,112,113,"Release 0.20.4
Some improvements for the infrastructure.
What's Changed

Fixes the relayer hot loop in the case of error by @xgreenx in #1281
Time consumption metrics for each service by @xgreenx in #1284

Full Changelog: v0.20.3...v0.20.4",2,0
1286,2023-08-10T00:45:49Z,2023-08-14T13:05:24Z,2023-08-14T13:05:24Z,8,135,104,"#940
This issue seemed specific to the block import tests, but while I was here I figured I could do it for all the tests.
LMK if I missed any, since my IDE search seemed to be ignoring some.",3,0
1287,2023-08-10T11:33:25Z,2023-08-10T13:40:01Z,2023-08-10T13:40:01Z,2,42,0,Added changelog as we did for fuel-vm. It should simplify our release process and make it more clear,2,0
1289,2023-08-10T17:06:57Z,,2023-08-11T01:20:20Z,8,62,52,"Hotfix patch to fuel-core 0.19 to avoid spamming eth rpc when errors occur.
This PR diff is just to show the changes between 0.19.1, but it should not get merged.",2,1
1290,2023-08-10T22:30:39Z,2023-08-11T03:49:42Z,2023-08-11T03:49:42Z,4,42,41,"#1277
Standardizing CLI args.",3,0
1293,2023-08-13T05:09:33Z,2023-08-14T12:46:48Z,2023-08-14T12:46:48Z,2,9,5,Close #1291,3,3
1302,2023-08-16T12:51:39Z,2023-08-16T20:52:11Z,2023-08-16T20:52:11Z,6,10,961,Closes #686,2,0
1304,2023-08-16T13:29:06Z,2023-08-16T17:45:01Z,2023-08-16T17:45:01Z,4,21,9,Closes #1178,2,0
1308,2023-08-16T20:34:34Z,2023-08-22T06:32:31Z,2023-08-22T06:32:31Z,11,50,14,"Related issues:

#1236

This PR adds conditional support for loading a local .env for environment variables. This support is only enabled when compiling the client binary with the env feature or when passing --all-features to Cargo. This is not enabled by default for production environments.
Users can add a .env to the root directory of their local copy of their Fuel node (or wherever their working directory is).
This helps users provide CLI arguments in a way that is more convenient and more secure than entering these values in an IDE directly:

Users can reuse environment variables across IDEs (e.g., VS Code and CLion) and IDE configurations seamlessly, rather than specifying them in each IDE specific configuration
Users can avoid putting secrets in shared commands or configurations
CLion users can greatly shorten their run commands, which is helpful since the configuration window does not word wrap long commands

The .env is also added to .gitignore to prevent users from uploading individual environment configurations that may include secrets.
This approach acts as a sort of stop gap for handling secrets before we have SOPS.
This PR also renames the internal eth_client component of the relayer configuration to relayer. This allow users to use the environment variable name RELAYER to supply this value. Prior to this, the CLI expected an environment variable called ETH_CLIENT, even though the CLI argument is named relayer.
Note: Due to the order in which the initialization functions are called, we cannot supply RUST_LOG in the .env file; this has to be provided elsewhere or directly to Cargo.",3,2
1309,2023-08-17T01:43:35Z,2023-08-22T21:09:49Z,2023-08-22T21:09:49Z,4,213,0,"Related issues:

Closes #1236

This PR adds documentation on debugging.",4,4
1314,2023-08-22T04:54:59Z,2023-08-22T15:56:16Z,2023-08-22T15:56:16Z,6,6,190,"Related:

#1312

Removes the types::ConsensusParameters type designed to duplicate the existing fuel_tx::ConsensusParameters type. Instead, ChainInfo can use the fuel_tx type directly.",2,0
1318,2023-08-23T22:36:28Z,2023-08-28T13:53:59Z,2023-08-28T13:53:59Z,11,164,136,"Related issues:

Closes #1167",4,4
1321,2023-08-25T10:14:31Z,2023-08-28T15:04:51Z,2023-08-28T15:04:51Z,2,9,4,Related #981,3,1
1322,2023-08-25T14:15:38Z,2023-08-29T20:52:25Z,2023-08-29T20:52:25Z,30,170,291,"Closes #1297 #1296
Removed manual_blocks_enabled flag.
Added a new debug flag:
    /// Should be used for local development only. Enabling debug mode:
    /// - Allows GraphQL Endpoints to arbitrarily advanced blocks.
    /// - Enabled debugger GraphQL Endpoints.
    /// - Allows setting `utxo_validation` to `false`.
    #[arg(long = ""debug"", env)]
    pub debug: bool,
Removed debug and dap features, now the code contains it by default and disables it if debug is false in the config.",4,2
1324,2023-08-25T18:48:01Z,2023-09-01T18:09:39Z,2023-09-01T18:09:39Z,10,386,22,"Reopening work from the previous pyroscope PR now that grafana actually supports pyroscope to work with our current master branch: #1170
This will enable real-time flame graphs from fuel-core in deployed environments, making it easier to diagnose performance bottlenecks on the fly based on real world usage.
Closes #1138",3,0
1331,2023-08-28T21:16:38Z,2023-08-31T23:12:23Z,2023-08-31T23:12:23Z,18,581,147,"First implementation of #943
During block import, if the peer gives incorrect values, dock their peer score. If they successfully report a block, improve their peer score.",4,1
1338,2023-08-29T16:39:50Z,2023-09-08T19:12:43Z,2023-09-08T19:12:43Z,36,420,182,"Related issues:

Closes #1337
Ref #1325

This PR upgrades fuel-vm to version 0.37.0.
Because the 0.37.0 release of fuel-vm uses Rust 1.72, I am also upgrading fuel-core CI to 1.72 as well.",3,5
1339,2023-08-29T21:23:57Z,2023-09-13T23:08:02Z,2023-09-13T23:08:02Z,13,317,169,"Related issues:

Closes FuelLabs/fuel-vm#164",4,3
1342,2023-09-01T21:34:42Z,2023-09-02T00:11:09Z,2023-09-02T00:11:09Z,2,44,14,#1278,2,3
1349,2023-09-06T02:23:09Z,2023-10-02T21:35:50Z,2023-10-02T21:35:50Z,22,1086,665,"Related issues:

Closes #1315
Closes #1089

This PR introduces a structure for holding data collections called Batch. A Batch encapsulates a collection of homogeneous data returned by a P2P request, retaining only successfully received items. A Batch may contain fewer items than originally requested, in which case an error has occurred.
For transactions, we now use batches to request and return transaction data from peers. This means a reduced number of database trips and more succinct (less chatty) p2p communication.",3,1
1355,2023-09-07T06:29:25Z,2023-09-08T17:37:13Z,2023-09-08T17:37:13Z,33,296,146,"closes: #1163
Adds the following metrics to prometheus:

importer_tx_count
importer_block_height
importer_latest_block_commit_timestamp_s
importer_execute_and_commit_duration_s

Additional related changes:

New field in the metadata table to keep track of the total number of transactions so that the metric is accurate across restarts
Removed the compiler feature flag for ""metrics"" since it was sneaked into all builds anyways with the addition of futures tracking.

This allows us to finally start measuring the following:

Transactions per second
Delays in synchronization (ie. comparing the block heights between nodes, and comparing the committed timestamps)
Various measures of time related to block importing/execution on synchronizing nodes (i.e. validation mode) such as avg, max, min etc",3,1
1356,2023-09-07T23:00:46Z,2023-09-15T21:00:30Z,2023-09-15T21:00:30Z,12,727,90,"#1348
In order to track peer heartbeats, this PR adds two new things:

A concept of a rolling/moving average for the time between heartbeats for each peer

This is updated every time a heartbeat is sent from that peer


A regular timeout in the P2P Task that will check peers for good heartbeat behavior

Originally I was looking at just reporting on heartbeat, but if a peer never reported then they would be exempt from checks
There are 3 2 cases in which we will want to punish peers for their heartbeat behavior:

They have never sent us a heartbeat (If we treat the setup as the first heartbeat, then we can merge this with the next 👇)
They haven't sent us a heartbeat in a long time
They are sending heartbeats very sporadically

We can also use this data to determine which peers are performing the best",4,8
1357,2023-09-08T12:01:10Z,2023-09-19T15:41:58Z,2023-09-19T15:41:58Z,1,1,1,,5,3
1358,2023-09-08T15:57:38Z,2023-09-08T18:05:27Z,2023-09-08T18:05:27Z,18,50,47,Upgrades the Rust version used in CI to 1.72.0. This matches the Rust version used in fuel-vm which was previously upgraded.,2,0
1362,2023-09-12T16:18:09Z,2023-09-12T19:42:14Z,2023-09-12T19:42:14Z,1,0,493,"Defer developers to the graphql or specs to avoid confusion
https://forum.fuel.network/t/what-is-a-withdrawal-output/3072/2",2,1
1363,2023-09-12T18:24:53Z,2023-09-12T23:38:05Z,2023-09-12T23:38:05Z,9,34,33,Closes #1234,2,2
1366,2023-09-15T03:13:52Z,2023-09-15T18:51:34Z,2023-09-15T18:51:34Z,2,5,4,remove remaining uses of gha caching for docker builds. The github cache is very unreliable and slow.,2,0
1367,2023-09-16T08:03:07Z,2023-09-27T20:52:00Z,2023-09-27T20:52:00Z,27,497,434,"Addresses breaking fuel-vm changes from FuelLabs/fuel-vm#582, FuelLabs/fuel-vm#578, FuelLabs/fuel-vm#588 and FuelLabs/fuel-vm#587.
Waiting for a new fuel-vm release.",2,1
1371,2023-09-18T22:39:41Z,2023-09-20T22:00:32Z,2023-09-20T22:00:32Z,13,303,14,"The bridge UI requires an client endpoint for querying the status of a specific Message, whether it has been spent or not. An additional variant is added for unknown messages, i.e. messages that can't be found in the DB.
The lookup is by Nonce. I'm not sure if we would prefer some other discriminators, but that seems like the obvious choice when you're searching the entire space--IDK if it's the most efficient though.
#1323",5,2
1372,2023-09-20T18:31:39Z,2023-09-20T21:21:34Z,2023-09-20T21:21:34Z,6,15,32,Closes #1360,2,0
1374,2023-09-20T22:35:27Z,2023-09-21T09:56:56Z,2023-09-21T09:56:56Z,11,20,21,Closes #1373,2,0
1375,2023-09-21T10:35:48Z,2023-09-21T17:02:01Z,2023-09-21T17:02:01Z,19,775,458,"Add query and handling for MessageStatus (#1371)
The bridge UI requires an client endpoint for querying the status of a specific Message, whether it has been spent or not. An additional variant is added for unknown messages, i.e. messages that can't be found in the DB.

Co-authored-by: Green Baneling XgreenX9999@gmail.com
(cherry picked from commit c6b0df7)",3,0
1377,2023-09-21T21:02:56Z,2023-09-25T08:08:56Z,2023-09-25T08:08:56Z,4,19,97,"Closes #1065
The idea being that we had the DiscoveryEvent that didn't serve any special purpose and wasn't being consumed anywhere. This simplifies DiscoveryBehavior.
The issue also suggested:

Upon removing the Discovery test should be updated too.

I'm not really sure what this test is for. The actual code uses mdns to identify new peer addresses, whereas the test bypasses this and does it manually on UnroutablePeer events. I don't understand the point of this.",2,3
1379,2023-09-22T21:28:31Z,2023-12-22T13:04:50Z,2023-12-22T13:04:50Z,26,2000,2966,"#1298
Documentation:
Removed upgrade::read_length_prefixed and upgrade::write_length_prefixed: https://github.com/libp2p/rust-libp2p/pull/4787/files
Remove FastMessageId: libp2p/rust-libp2p#4138
Remove TokioDnsConfig: libp2p/rust-libp2p@95890b5
Implement InboundConnectionUpgrade/OutboundConnectionUpgrade: libp2p/rust-libp2p#4307",6,8
1380,2023-09-22T23:34:52Z,2023-09-25T14:01:35Z,2023-09-25T14:01:35Z,3,71,17,"This was left behind from this work: #1356
As we did for the syncing peer config, we left hard-coded values for each variant. The followup work for that is tracked here:
#1340",2,0
1390,2023-10-01T17:01:18Z,2023-10-02T15:38:15Z,2023-10-02T15:38:15Z,6,648,373,Closes #1389 and fixes CI for #1349,2,0
1391,2023-10-01T19:59:13Z,2023-10-02T15:43:37Z,2023-10-02T15:43:37Z,5,132,218,Simplification after the review process,2,0
1392,2023-10-02T15:58:52Z,2023-10-03T08:52:03Z,2023-10-03T08:52:03Z,2,7,1,"Fixes #1334
See FuelLabs/fuel-vm#596 for follow-up work.",3,0
1397,2023-10-04T18:50:12Z,2023-10-04T21:25:29Z,2023-10-04T21:25:29Z,6,83,47,Make the keygen a crate that can be implemented and extended from other places (like a forc-plugin). Upgraded its dependencies to avoid depending on protoc for building,2,0
1399,2023-10-04T20:13:46Z,2023-10-09T12:14:49Z,2023-10-09T12:14:49Z,12,74,130,"Related issues:

Closes #1336

This PR changes the approach a Fuel node uses to determine the finalized blocks on the Ethereum blockchain.
The existing approach:

Assume a ""finalization period"" - a period of time after which we assume a block is finalized. Generally, we assume a block is finalized after 100 new blocks have been produced afterwards
Observe what the current block height is as reported by the Ethereum client
Subtract the finalization period from the current height to get an assumed finalized block, i.e. current block height - 100

The problem with this approach, as outlined by Trail of Bits, is that finality cannot be guaranteed simply by the amount of time passed alone.
This PR proposes a more robust approach:

Use the Ethereum client to query for the most recently finalized block directly. This is done using the Finalized tag in the query. See gakonst/ethers-rs#1792

This approach removes any assumption on our side as to what the finalized block is, and gets the canonically accepted finalized block from Ethereum.",3,0
1400,2023-10-05T05:34:57Z,2023-10-23T10:31:28Z,2023-10-23T10:31:28Z,3,36,1,"Description
This adds releasy-beta to fuel-core which will ping fuels-rs repo every time there is a new commit to the master of this repo.
Once we ensure everything works nicely we will start working with all repos with the same procedure.",2,1
1406,2023-10-06T10:00:13Z,2023-10-06T16:16:58Z,2023-10-06T16:16:58Z,52,406,254,Release includes #1405 and #1355,4,1
1407,2023-10-09T11:45:21Z,2023-10-18T20:54:30Z,2023-10-18T20:54:30Z,36,952,604,"Closes #1269
This PR also adapts fuel-core to use fuel-vm 0.39.

The recipient is a ContractId instead of Address. The block producer should deploy its contract to receive the transaction fee. The collected fee is zero until the recipient contract is set.
The Mint transaction is reworked with new fields to support the account-base model. It affects serialization and deserialization of the transaction and also affects GraphQL schema.
I limited the number of selected transactions from the TxPool to u16::MAX to avoid overflow.
The Mint transaction is the last transaction in the block instead of the first.
Applied changes for BlockHeight to use succ and pred functions.",4,0
1408,2023-10-09T12:13:48Z,2023-10-23T14:08:41Z,2023-10-23T14:08:41Z,6,197,120,Closes #1239. Closes #1255.,4,6
1411,2023-10-10T19:29:49Z,2023-10-17T18:40:31Z,2023-10-17T18:40:31Z,29,251,150,"Related issues:

Closes #1370

Adds no_std compilation support for crates:

fuel-core-types
fuel-core-storage
fuel-core-client
fuel-core-chain-config",3,0
1415,2023-10-12T10:34:55Z,2023-10-12T12:23:17Z,2023-10-12T12:23:17Z,1,117,0,"I copied the flow from rust-lang.
It closes #1329.",2,0
1419,2023-10-12T23:24:16Z,2023-10-17T23:15:28Z,2023-10-17T23:15:28Z,12,615,65,"#1386
This PR adds benchmark tests for all the arithmetic op codes. The actual purpose being running those tests to see if the costs actually line up for all the codes.
These tests work by starting a vm with a set amount of gas, and running an ""infinite"" loop of each op code until the vm runs out of gas. This is timed and the time is reported.
After running these, I've found a number of divergent op codes that could possibly require updated gas costs:
block target estimation/wddv opcode
                        time:   [4.0950 ms 4.1181 ms 4.1411 ms]
block target estimation/wdmd opcode
                        time:   [3.3510 ms 3.3710 ms 3.3931 ms]
block target estimation/wdam opcode
                        time:   [3.4912 ms 3.5138 ms 3.5363 ms]
block target estimation/wdmm opcode
                        time:   [3.4505 ms 3.4686 ms 3.4868 ms]
block target estimation/wqdv opcode
                        time:   [3.2404 ms 3.2590 ms 3.2796 ms]
block target estimation/wqmd opcode
                        time:   [4.1508 ms 4.1716 ms 4.1928 ms]
block target estimation/wqam opcode
                        time:   [3.6933 ms 3.7081 ms 3.7230 ms]
block target estimation/wqmm opcode
                        time:   [5.2120 ms 5.2395 ms 5.2667 ms]

So, that's wddv, wdmd, wdam,  wdmm, wqdv, wqmd, wqam, wqmm.
Whereas all the other op codes take close to 2ms to run out of gas, implying that these divergent op codes could be priced higher. These ""wide"" op codes all share similar setup, and not all of the ""wide"" op codes fail the test, so it's probably not the setup that is causing these specific op code benchmarks to fail.

Here are all of the results:
lock target estimation/add opcode
                        time:   [2.1024 ms 2.1142 ms 2.1259 ms]
block target estimation/addi opcode
                        time:   [2.1066 ms 2.1208 ms 2.1369 ms]
block target estimation/aloc opcode
                        time:   [1.8966 ms 1.9104 ms 1.9252 ms]
block target estimation/and opcode
                        time:   [2.0765 ms 2.0877 ms 2.0990 ms]
block target estimation/andi opcode
                        time:   [2.1647 ms 2.1797 ms 2.1963 ms]
block target estimation/div opcode
                        time:   [2.1176 ms 2.1303 ms 2.1440 ms]
block target estimation/divi opcode
                        time:   [2.1445 ms 2.1572 ms 2.1711 ms]
block target estimation/eq opcode
                        time:   [2.0585 ms 2.0721 ms 2.0859 ms]
block target estimation/exp opcode
                        time:   [2.0829 ms 2.0931 ms 2.1031 ms]
block target estimation/expi opcode
                        time:   [2.1114 ms 2.1218 ms 2.1323 ms]
block target estimation/gt opcode
                        time:   [2.0068 ms 2.0176 ms 2.0287 ms]
block target estimation/gtf opcode
                        time:   [2.2672 ms 2.2765 ms 2.2859 ms]
block target estimation/lt opcode
                        time:   [1.9848 ms 1.9959 ms 2.0070 ms]
block target estimation/mlog opcode
                        time:   [2.0176 ms 2.0278 ms 2.0380 ms]
block target estimation/mod opcode
                        time:   [1.9694 ms 1.9819 ms 1.9943 ms]
block target estimation/modi opcode
                        time:   [1.9519 ms 1.9640 ms 1.9760 ms]
block target estimation/move opcode
                        time:   [1.8479 ms 1.8600 ms 1.8716 ms]
block target estimation/movi opcode
                        time:   [1.9531 ms 1.9645 ms 1.9758 ms]
block target estimation/mroo opcode
                        time:   [2.4029 ms 2.4151 ms 2.4272 ms]
block target estimation/mul opcode
                        time:   [2.0221 ms 2.0335 ms 2.0446 ms]
block target estimation/muli opcode
                        time:   [1.9674 ms 1.9781 ms 1.9897 ms]
block target estimation/noop opcode
                        time:   [1.8149 ms 1.8389 ms 1.8631 ms]
block target estimation/not opcode
                        time:   [1.8706 ms 1.8861 ms 1.9008 ms]
block target estimation/or opcode
                        time:   [2.0889 ms 2.0994 ms 2.1111 ms]
block target estimation/ori opcode
                        time:   [2.1002 ms 2.1106 ms 2.1208 ms]
block target estimation/sll opcode
                        time:   [2.1776 ms 2.1864 ms 2.1956 ms]
block target estimation/slli opcode
                        time:   [2.0932 ms 2.1038 ms 2.1153 ms]
block target estimation/srl opcode
                        time:   [2.0355 ms 2.0453 ms 2.0555 ms]
block target estimation/srli opcode
                        time:   [2.0444 ms 2.0509 ms 2.0578 ms]
block target estimation/sub opcode
                        time:   [2.1181 ms 2.1269 ms 2.1358 ms]
block target estimation/subi opcode
                        time:   [1.9773 ms 1.9905 ms 2.0050 ms]
block target estimation/xor opcode
                        time:   [2.0735 ms 2.0837 ms 2.0937 ms]
block target estimation/xori opcode
                        time:   [2.0139 ms 2.0246 ms 2.0354 ms]
block target estimation/wdcm opcode
                        time:   [2.2144 ms 2.2272 ms 2.2406 ms]
block target estimation/wdop opcode
                        time:   [2.5049 ms 2.5220 ms 2.5395 ms]
block target estimation/wdml opcode
                        time:   [2.6808 ms 2.6963 ms 2.7130 ms]
block target estimation/wddv opcode
                        time:   [4.2766 ms 4.3064 ms 4.3368 ms]
block target estimation/wdmd opcode
                        time:   [3.5144 ms 3.5451 ms 3.5798 ms]
block target estimation/wdam opcode
                        time:   [3.7095 ms 3.7397 ms 3.7760 ms]
block target estimation/wdmm opcode
                        time:   [3.6330 ms 3.6595 ms 3.6915 ms]
block target estimation/wqcm opcode
                        time:   [2.4236 ms 2.4410 ms 2.4597 ms]
block target estimation/wqop opcode
                        time:   [2.7717 ms 2.7920 ms 2.8154 ms]
block target estimation/wqml opcode
                        time:   [2.9315 ms 2.9631 ms 2.9986 ms]
block target estimation/wqdv opcode
                        time:   [3.4322 ms 3.4572 ms 3.4846 ms]
block target estimation/wqmd opcode
                        time:   [4.4126 ms 4.4383 ms 4.4669 ms]
block target estimation/wqam opcode
                        time:   [3.8279 ms 3.8610 ms 3.8986 ms]
block target estimation/wqmm opcode
                        time:   [5.8005 ms 5.8658 ms 5.9469 ms]",3,2
1422,2023-10-14T19:57:42Z,2023-10-16T19:22:04Z,2023-10-16T19:22:04Z,20,92,76,fixes: #1421,3,1
1423,2023-10-15T10:17:03Z,2023-10-16T19:23:14Z,2023-10-16T19:23:14Z,4,32,9,"Closes #1384
After debugging the issue with transaction broadcasting in the Beta 4 network, I can confirm that it is related to the gossipsub reputation.
At some point, no one sends transactions to the authority node. When I manually restart one sentry node, this node starts to send transactions to the authority node. It sends transactions via gossiping and publishing:

Publishing: I send a transaction to sentry 1, which sends it to authority.
Gossiping: I send the transaction to sentry 0, it sends the transaction to sentry 1, and it sends the transaction to authority.

But at some point, gossiping doesn't work while publishing still works(Sentry 0 gossips transaction to Sentry 1, and Sentry 1 doesn't gossip it to authority).
After some time, the publishing doesn't work either.
The gossipsub has two thresholds, one for gossiping and one for publishing. We use these values:

So, the described behavior aligns with authority reputation decreasing. I don't know the reason why it happens(maybe decay), but adding all reserved peers to explicit peers should solve the problem.",3,0
1424,2023-10-16T13:07:51Z,2023-10-17T08:15:36Z,2023-10-17T08:15:36Z,5,5,5,"fix some typos:
recieve->receive
seperate->separate
successfull->successful
additionaly->additionally
ealier->earlier",4,3
1426,2023-10-17T20:53:32Z,2023-10-23T14:31:44Z,2023-10-23T14:31:44Z,9,106,14,Split so it can be inherited from other binaries FuelLabs/sway#5170,4,0
1427,2023-10-17T21:21:43Z,2023-10-18T11:03:00Z,2023-10-18T11:03:00Z,2,67,28,"Update benchmarks for scwq, swwq and srwq opcodes. Fixed the collect binary for the case of exponential functions not to panic.",2,0
1430,2023-10-19T04:09:01Z,2023-10-23T12:53:37Z,2023-10-23T12:53:37Z,8,196,97,"#1386
Results:
block target estimation/crypto/eck1 opcode
                        time:   [4.8418 ms 4.8650 ms 4.8882 ms]
block target estimation/crypto/ecr1 opcode
                        time:   [18.634 ms 18.791 ms 18.992 ms]
block target estimation/crypto/ed19 opcode
                        time:   [2.6451 ms 2.6698 ms 2.6963 ms]

s256:
block target estimation/crypto/s256 opcode 1
                        time:   [3.1244 ms 3.1409 ms 3.1575 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low mild
  3 (3.00%) high mild
block target estimation/crypto/s256 opcode 10
                        time:   [3.1082 ms 3.1299 ms 3.1515 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high severe
block target estimation/crypto/s256 opcode 100
                        time:   [4.1553 ms 4.1781 ms 4.2026 ms]
block target estimation/crypto/s256 opcode 1000
                        time:   [8.3133 ms 8.3554 ms 8.3990 ms]
block target estimation/crypto/s256 opcode 10000
                        time:   [10.562 ms 10.611 ms 10.661 ms]
block target estimation/crypto/s256 opcode 19753
                        time:   [10.794 ms 10.847 ms 10.902 ms]
block target estimation/crypto/s256 opcode 29629
                        time:   [10.694 ms 10.773 ms 10.853 ms]
block target estimation/crypto/s256 opcode 44444
                        time:   [10.724 ms 10.795 ms 10.870 ms]
block target estimation/crypto/s256 opcode 66666
                        time:   [10.745 ms 10.810 ms 10.879 ms]
block target estimation/crypto/s256 opcode 100000
                        time:   [10.551 ms 10.608 ms 10.665 ms]

k256:
block target estimation/crypto/k256 opcode 1
                        time:   [4.0653 ms 4.0881 ms 4.1123 ms]
block target estimation/crypto/k256 opcode 10
                        time:   [4.0803 ms 4.1121 ms 4.1500 ms]
block target estimation/crypto/k256 opcode 100
                        time:   [3.9216 ms 3.9472 ms 3.9730 ms]
block target estimation/crypto/k256 opcode 1000
                        time:   [19.240 ms 19.610 ms 20.102 ms]
block target estimation/crypto/k256 opcode 10000
                        time:   [46.020 ms 46.250 ms 46.491 ms]
Benchmarking block target estimation/crypto/k256 opcode 19753: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.0s, or reduce sample count to 90.
block target estimation/crypto/k256 opcode 19753
                        time:   [51.484 ms 51.795 ms 52.121 ms]
Benchmarking block target estimation/crypto/k256 opcode 29629: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.1s, or reduce sample count to 90.
block target estimation/crypto/k256 opcode 29629
                        time:   [53.408 ms 54.647 ms 56.676 ms]
Benchmarking block target estimation/crypto/k256 opcode 44444: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.2s, or reduce sample count to 90.
block target estimation/crypto/k256 opcode 44444
                        time:   [54.142 ms 54.426 ms 54.716 ms]
Benchmarking block target estimation/crypto/k256 opcode 66666: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.3s, or reduce sample count to 90.
block target estimation/crypto/k256 opcode 66666
                        time:   [55.453 ms 55.730 ms 56.009 ms]
Benchmarking block target estimation/crypto/k256 opcode 100000: Warming up for 3.0000 s
Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.4s, or reduce sample count to 90.
block target estimation/crypto/k256 opcode 100000
                        time:   [54.617 ms 55.698 ms 57.215 ms]",2,0
1432,2023-10-19T19:16:46Z,2023-10-19T23:29:02Z,2023-10-19T23:29:02Z,21,95,77,"Applying hotfix #1422 to master branch.
Closes #1421",2,0
1433,2023-10-19T22:53:18Z,2023-10-24T08:42:36Z,2023-10-24T08:42:36Z,10,230,17,"#1386
block target estimation/flow/jmp opcode
                        time:   [1.9838 ms 1.9917 ms 2.0001 ms]
block target estimation/flow/ji opcode
                        time:   [1.6020 ms 1.6119 ms 1.6223 ms]
block target estimation/flow/jne opcode
                        time:   [2.2373 ms 2.2479 ms 2.2589 ms]
block target estimation/flow/jnei opcode
                        time:   [2.0990 ms 2.1085 ms 2.1176 ms]
block target estimation/flow/jnzi opcode
                        time:   [1.9626 ms 1.9776 ms 1.9930 ms]
block target estimation/flow/jmpb opcode
                        time:   [1.5740 ms 1.5819 ms 1.5904 ms]
block target estimation/flow/jmpf opcode
                        time:   [1.5385 ms 1.5455 ms 1.5529 ms]
block target estimation/flow/jnzb opcode true
                        time:   [1.6174 ms 1.6246 ms 1.6323 ms]
block target estimation/flow/jnzb opcode false
                        time:   [1.6395 ms 1.6482 ms 1.6568 ms]
block target estimation/flow/jnzf opcode true
                        time:   [1.5932 ms 1.5999 ms 1.6070 ms]
block target estimation/flow/jnzf opcode false
                        time:   [1.6132 ms 1.6227 ms 1.6333 ms]
block target estimation/flow/jne opcode
                        time:   [1.7591 ms 1.7703 ms 1.7822 ms]
block target estimation/flow/jnei opcode
                        time:   [1.5247 ms 1.5340 ms 1.5447 ms]
block target estimation/flow/jneb opcode not equal
                        time:   [1.6881 ms 1.6961 ms 1.7057 ms]
block target estimation/flow/jneb opcode equal
                        time:   [1.7255 ms 1.7362 ms 1.7481 ms]
block target estimation/flow/jnef opcode not equal
                        time:   [1.8018 ms 1.8132 ms 1.8259 ms]
block target estimation/flow/jnef opcode equal
                        time:   [1.7644 ms 1.7731 ms 1.7823 ms]

Not sure how to test ret_script or ret_contract with an infinite loop 🤷",3,0
1435,2023-10-20T01:54:47Z,2023-10-23T09:39:14Z,2023-10-23T09:39:14Z,10,401,121,"Beta 4 authority node punished some sentries because of some invalid transactions they sent because of block race.
The fix is to not punish the reserved peer for sending an invalid transaction.",3,0
1436,2023-10-20T22:03:21Z,2023-10-23T10:43:20Z,2023-10-23T10:43:20Z,3,29,0,"fixes: #1420
Uses a recurring github action to run e2e tests against the beta-4 environment.
Successful run demonstrated here: https://github.com/FuelLabs/fuel-core/actions/runs/6593133202/job/17915110825?pr=1436",2,0
1437,2023-10-21T00:02:43Z,2023-10-24T08:19:22Z,2023-10-24T08:19:22Z,10,587,228,"fixes: #1410
Adds some basic benchmarks for a single node involving transfer scripts with 2 inputs & 2 outputs.
This includes:

signed coin transfers
noop predicate transfers
eck1 verifying predicate transfers

On a Ryzen 5950X I got the following results:
signed transfers/100    time:   [3.8326 ms 3.8560 ms 3.8862 ms]                               
                        thrpt:  [25.732 Kelem/s 25.933 Kelem/s 26.092 Kelem/s]
signed transfers/500    time:   [19.983 ms 20.106 ms 20.245 ms]                               
                        thrpt:  [24.698 Kelem/s 24.869 Kelem/s 25.021 Kelem/s]
signed transfers/1000   time:   [40.451 ms 40.885 ms 41.354 ms]                                
                        thrpt:  [24.182 Kelem/s 24.459 Kelem/s 24.721 Kelem/s]
signed transfers/1500   time:   [62.526 ms 62.943 ms 63.368 ms]                                
                        thrpt:  [23.671 Kelem/s 23.831 Kelem/s 23.990 Kelem/s]

predicate transfers/100 time:   [3.6510 ms 3.6999 ms 3.7461 ms]                                  
                        thrpt:  [26.695 Kelem/s 27.028 Kelem/s 27.390 Kelem/s]
predicate transfers/500 time:   [19.011 ms 19.109 ms 19.222 ms]                                  
                        thrpt:  [26.011 Kelem/s 26.166 Kelem/s 26.301 Kelem/s]
predicate transfers/1000 time:   [38.979 ms 39.273 ms 39.627 ms]
                        thrpt:  [25.236 Kelem/s 25.463 Kelem/s 25.655 Kelem/s]
predicate transfers/1500 time:   [60.765 ms 62.232 ms 64.057 ms]
                        thrpt:  [23.417 Kelem/s 24.103 Kelem/s 24.685 Kelem/s]

predicate transfers eck1/100 time:   [3.8533 ms 3.8765 ms 3.8980 ms]
                        thrpt:  [25.654 Kelem/s 25.796 Kelem/s 25.952 Kelem/s]
predicate transfers eck1/500 time:   [19.910 ms 20.061 ms 20.207 ms]
                        thrpt:  [24.744 Kelem/s 24.923 Kelem/s 25.113 Kelem/s]
predicate transfers eck1/1000 time:   [41.045 ms 41.489 ms 41.976 ms]
                        thrpt:  [23.823 Kelem/s 24.103 Kelem/s 24.363 Kelem/s]
predicate transfers eck1/1500 time:   [63.361 ms 63.941 ms 64.802 ms]
                        thrpt:  [23.147 Kelem/s 23.459 Kelem/s 23.674 Kelem/s]

Interestingly the throughput difference between noop predicates and eck1 verification is fairly minimal, indicating the bottlenecks are in other areas besides tx validity checking (i.e. db performance). However the results show that a fuel-core node can easily process roughly 20k tps at full throttle without any p2p or block timing restrictions.",3,1
1438,2023-10-22T00:15:33Z,2023-10-23T10:06:05Z,2023-10-23T10:06:05Z,1,136,143,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m async-trait v0.1.73 -> v0.1.74
�[0m�[0m�[1m�[32m    Updating�[0m bitflags v2.4.0 -> v2.4.1
�[0m�[0m�[1m�[32m    Updating�[0m const_format v0.2.31 -> v0.2.32
�[0m�[0m�[1m�[32m    Updating�[0m const_format_proc_macros v0.2.31 -> v0.2.32
�[0m�[0m�[1m�[32m    Updating�[0m cpufeatures v0.2.9 -> v0.2.10
�[0m�[0m�[1m�[32m    Updating�[0m deranged v0.3.8 -> v0.3.9
�[0m�[0m�[1m�[32m    Updating�[0m ed25519 v2.2.2 -> v2.2.3
�[0m�[0m�[1m�[32m    Updating�[0m flate2 v1.0.27 -> v1.0.28
�[0m�[0m�[1m�[32m    Updating�[0m hashbrown v0.14.1 -> v0.14.2
�[0m�[0m�[1m�[32m    Updating�[0m if-watch v3.0.1 -> v3.1.0
�[0m�[0m�[1m�[32m    Updating�[0m libp2p-identity v0.2.5 -> v0.2.7
�[0m�[0m�[1m�[32m    Updating�[0m lock_api v0.4.10 -> v0.4.11
�[0m�[0m�[1m�[32m    Updating�[0m os_str_bytes v6.5.1 -> v6.6.1
�[0m�[0m�[1m�[32m    Updating�[0m parking v2.1.1 -> v2.2.0
�[0m�[0m�[1m�[32m    Updating�[0m parking_lot_core v0.9.8 -> v0.9.9
�[0m�[0m�[1m�[36m      Adding�[0m powerfmt v0.2.0
�[0m�[0m�[1m�[36m      Adding�[0m redox_syscall v0.4.1
�[0m�[0m�[1m�[32m    Updating�[0m regex v1.10.0 -> v1.10.2
�[0m�[0m�[1m�[32m    Updating�[0m regex-automata v0.4.1 -> v0.4.3
�[0m�[0m�[1m�[32m    Updating�[0m regex-syntax v0.8.1 -> v0.8.2
�[0m�[0m�[1m�[32m    Updating�[0m ring v0.17.3 -> v0.17.5
�[0m�[0m�[1m�[31m    Removing�[0m rustix v0.37.24
�[0m�[0m�[1m�[31m    Removing�[0m rustix v0.38.18
�[0m�[0m�[1m�[36m      Adding�[0m rustix v0.37.26
�[0m�[0m�[1m�[36m      Adding�[0m rustix v0.38.20
�[0m�[0m�[1m�[32m    Updating�[0m scale-info v2.9.0 -> v2.10.0
�[0m�[0m�[1m�[32m    Updating�[0m scale-info-derive v2.9.0 -> v2.10.0
�[0m�[0m�[1m�[32m    Updating�[0m serde v1.0.188 -> v1.0.189
�[0m�[0m�[1m�[32m    Updating�[0m serde_derive v1.0.188 -> v1.0.189
�[0m�[0m�[1m�[31m    Removing�[0m socket2 v0.4.9
�[0m�[0m�[1m�[31m    Removing�[0m socket2 v0.5.4
�[0m�[0m�[1m�[36m      Adding�[0m socket2 v0.4.10
�[0m�[0m�[1m�[36m      Adding�[0m socket2 v0.5.5
�[0m�[0m�[1m�[32m    Updating�[0m strum_macros v0.25.2 -> v0.25.3
�[0m�[0m�[1m�[32m    Updating�[0m thiserror v1.0.49 -> v1.0.50
�[0m�[0m�[1m�[32m    Updating�[0m thiserror-impl v1.0.49 -> v1.0.50
�[0m�[0m�[1m�[32m    Updating�[0m time v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m tracing v0.1.37 -> v0.1.40
�[0m�[0m�[1m�[32m    Updating�[0m tracing-attributes v0.1.26 -> v0.1.27
�[0m�[0m�[1m�[32m    Updating�[0m tracing-core v0.1.31 -> v0.1.32
�[0m�[0m�[1m�[32m    Updating�[0m uuid v1.4.1 -> v1.5.0
�[0m�[0m�[1m�[32m    Updating�[0m windows v0.34.0 -> v0.51.1
�[0m�[0m�[1m�[36m      Adding�[0m windows-core v0.51.1
�[0m�[0m�[1m�[31m    Removing�[0m windows_aarch64_msvc v0.34.0
�[0m�[0m�[1m�[31m    Removing�[0m windows_i686_gnu v0.34.0
�[0m�[0m�[1m�[31m    Removing�[0m windows_i686_msvc v0.34.0
�[0m�[0m�[1m�[31m    Removing�[0m windows_x86_64_gnu v0.34.0
�[0m�[0m�[1m�[31m    Removing�[0m windows_x86_64_msvc v0.34.0
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.16 -> v0.5.17",1,0
1439,2023-10-22T22:37:35Z,2023-10-23T11:03:41Z,2023-10-23T11:03:41Z,4,8,4,"Related issues:

FuelLabs/fuel-vm#610

This PR updates all relevant usages of binary::in_memory::MerkleTree inside fuel-core to use binary::root_calculator::MerkleRootCalculator for calculating BMT roots.",2,0
1440,2023-10-23T10:01:05Z,2023-10-24T22:44:03Z,2023-10-24T22:44:03Z,11,343,71,"Applying #1435 to master
Beta 4 authority node punished some sentries because of some invalid transactions they sent because of block race.
The fix is to not punish the reserved peer for sending an invalid transaction.",3,0
1444,2023-10-23T19:26:26Z,2023-10-24T23:10:45Z,2023-10-24T23:10:45Z,7,328,27,"#1386
block target estimation/memory/aloc opcode
                        time:   [1.7153 ms 1.7225 ms 1.7304 ms]
block target estimation/memory/cfe opcode
                        time:   [1.6035 ms 1.6133 ms 1.6242 ms]
block target estimation/memory/cfei opcode
                        time:   [1.6067 ms 1.6161 ms 1.6261 ms]
block target estimation/memory/cfs opcode
                        time:   [1.5815 ms 1.5926 ms 1.6051 ms]
block target estimation/memory/cfsi opcode
                        time:   [1.6355 ms 1.6428 ms 1.6513 ms]
block target estimation/memory/lb opcode
                        time:   [1.7495 ms 1.7592 ms 1.7703 ms]
block target estimation/memory/lw opcode
                        time:   [1.7579 ms 1.7699 ms 1.7828 ms]
block target estimation/memory/mcl opcode 1
                        time:   [2.1388 ms 2.1553 ms 2.1799 ms]
block target estimation/memory/mcl opcode 10
                        time:   [2.1554 ms 2.1661 ms 2.1769 ms]
block target estimation/memory/mcl opcode 100
                        time:   [2.1288 ms 2.1415 ms 2.1547 ms]
block target estimation/memory/mcl opcode 1000
                        time:   [2.7993 ms 2.8172 ms 2.8354 ms]
block target estimation/memory/mcl opcode 10000
                        time:   [4.0290 ms 4.0541 ms 4.0791 ms]
block target estimation/memory/mcl opcode 19753
                        time:   [4.9775 ms 5.0025 ms 5.0281 ms]
block target estimation/memory/mcl opcode 29629
                        time:   [5.0122 ms 5.0411 ms 5.0712 ms]
block target estimation/memory/mcl opcode 44444
                        time:   [4.9450 ms 4.9724 ms 5.0005 ms]
block target estimation/memory/mcl opcode 66666
                        time:   [4.9388 ms 4.9640 ms 4.9899 ms]
block target estimation/memory/mcl opcode 100000
                        time:   [4.9764 ms 5.0030 ms 5.0310 ms]
block target estimation/memory/mcli opcode 1
                        time:   [2.0453 ms 2.0548 ms 2.0648 ms]
block target estimation/memory/mcli opcode 10
                        time:   [2.0375 ms 2.0480 ms 2.0585 ms]
block target estimation/memory/mcli opcode 100
                        time:   [2.0586 ms 2.0684 ms 2.0784 ms]
block target estimation/memory/mcli opcode 1000
                        time:   [2.7113 ms 2.7287 ms 2.7477 ms]
block target estimation/memory/mcli opcode 10000
                        time:   [3.9312 ms 3.9568 ms 3.9852 ms]
block target estimation/memory/mcli opcode 19753
                        time:   [4.9118 ms 4.9353 ms 4.9589 ms]
block target estimation/memory/mcli opcode 29629
                        time:   [4.9363 ms 4.9627 ms 4.9899 ms]
block target estimation/memory/mcli opcode 44444
                        time:   [4.8455 ms 4.8674 ms 4.8902 ms]
block target estimation/memory/mcli opcode 66666
                        time:   [4.8760 ms 4.9036 ms 4.9337 ms]
block target estimation/memory/mcli opcode 100000
                        time:   [4.9923 ms 5.0176 ms 5.0431 ms]
block target estimation/memory/mcp opcode 1
                        time:   [2.2783 ms 2.2892 ms 2.3000 ms]
block target estimation/memory/mcp opcode 10
                        time:   [2.2653 ms 2.2751 ms 2.2855 ms]
block target estimation/memory/mcp opcode 100
                        time:   [2.3478 ms 2.3608 ms 2.3740 ms]
block target estimation/memory/mcp opcode 1000
                        time:   [2.6947 ms 2.7140 ms 2.7390 ms]
block target estimation/memory/mcp opcode 10000
                        time:   [2.9727 ms 2.9851 ms 2.9976 ms]
block target estimation/memory/mcp opcode 19753
                        time:   [4.0645 ms 4.0992 ms 4.1429 ms]
block target estimation/memory/mcp opcode 29629
                        time:   [4.5143 ms 4.5370 ms 4.5602 ms]
block target estimation/memory/mcp opcode 44444
                        time:   [4.6528 ms 4.6742 ms 4.6967 ms]
block target estimation/memory/mcp opcode 66666
                        time:   [4.6505 ms 4.6744 ms 4.7010 ms]
block target estimation/memory/mcp opcode 100000
                        time:   [3.5548 ms 3.5713 ms 3.5883 ms]
block target estimation/memory/mcpi opcode 1
                        time:   [1.2296 ms 1.2352 ms 1.2405 ms]
block target estimation/memory/mcpi opcode 10
                        time:   [1.2135 ms 1.2188 ms 1.2240 ms]
block target estimation/memory/mcpi opcode 100
                        time:   [1.2760 ms 1.2816 ms 1.2873 ms]
block target estimation/memory/mcpi opcode 1000
                        time:   [1.4219 ms 1.4307 ms 1.4398 ms]
block target estimation/memory/meq opcode 1
                        time:   [1.9330 ms 1.9430 ms 1.9534 ms]
block target estimation/memory/meq opcode 10
                        time:   [1.9648 ms 1.9738 ms 1.9830 ms]
block target estimation/memory/meq opcode 100
                        time:   [1.9911 ms 2.0000 ms 2.0092 ms]
block target estimation/memory/meq opcode 1000
                        time:   [2.4182 ms 2.4293 ms 2.4405 ms]
block target estimation/memory/meq opcode 10000
                        time:   [3.3582 ms 3.3748 ms 3.3913 ms]
block target estimation/memory/meq opcode 19753
                        time:   [4.0710 ms 4.0870 ms 4.1029 ms]
block target estimation/memory/meq opcode 29629
                        time:   [4.0880 ms 4.1121 ms 4.1450 ms]
block target estimation/memory/meq opcode 44444
                        time:   [4.0922 ms 4.1076 ms 4.1230 ms]
block target estimation/memory/meq opcode 66666
                        time:   [4.1181 ms 4.1365 ms 4.1550 ms]
block target estimation/memory/meq opcode 100000
                        time:   [4.0834 ms 4.1013 ms 4.1201 ms]
block target estimation/memory/poph opcode
                        time:   [1.5574 ms 1.5661 ms 1.5745 ms]
block target estimation/memory/popl opcode
                        time:   [1.4805 ms 1.4882 ms 1.4964 ms]
block target estimation/memory/pshh opcode
                        time:   [3.6456 ms 3.6765 ms 3.7107 ms]
block target estimation/memory/pshl opcode
                        time:   [3.5495 ms 3.5675 ms 3.5862 ms]
block target estimation/memory/sb opcode
                        time:   [1.8727 ms 1.8832 ms 1.8946 ms]
block target estimation/memory/sw opcode
                        time:   [1.8648 ms 1.8746 ms 1.8846 ms]",2,1
1447,2023-10-25T01:49:17Z,2023-10-25T05:15:08Z,2023-10-25T05:15:08Z,2,2,0,prevent e2e jobs from running for more than 4 minutes,2,0
1449,2023-10-25T06:12:07Z,2023-10-25T14:32:52Z,2023-10-25T14:32:52Z,3,13,6,"There was an issue with the e2e tests causing them to fail once wallet_b had more than 100 coins due to improper pagination over coins.
This also updates the e2e tests targeting beta4 by using a docker image sha generated from this branch: #1448",2,0
1452,2023-10-25T14:30:25Z,2023-11-01T18:42:59Z,2023-11-01T18:42:59Z,7,100,15,"Related issues:

FuelLabs/fuel-vm#599

This PR adds a benchmark to determine the gas price of calculating contract roots.",2,2
1453,2023-10-25T22:33:39Z,2023-11-15T22:29:42Z,2023-11-15T22:29:42Z,11,1160,63,"#1386
block target estimation/contract/bal contract
                        time:   [1.4691 ms 1.4723 ms 1.4758 ms]
block target estimation/contract/bal script
                        time:   [22.914 ms 22.954 ms 22.997 ms]
block target estimation/contract/bhei
                        time:   [2.5669 ms 2.5785 ms 2.5903 ms]
block target estimation/contract/bhsh
                        time:   [3.1837 ms 3.1990 ms 3.2147 ms]
block target estimation/contract/burn
                        time:   [108.90 ms 109.19 ms 109.48 ms]
block target estimation/contract/call 1
                        time:   [71.952 ms 72.085 ms 72.225 ms]
block target estimation/contract/call 10
                        time:   [69.186 ms 69.357 ms 69.526 ms]
block target estimation/contract/call 100
                        time:   [44.121 ms 44.225 ms 44.335 ms]
block target estimation/contract/call 1000
                        time:   [11.294 ms 11.318 ms 11.343 ms]
block target estimation/contract/call 10000
                        time:   [2.8902 ms 2.8962 ms 2.9024 ms]
block target estimation/contract/call 19753
                        time:   [2.4352 ms 2.4473 ms 2.4673 ms]
block target estimation/contract/call 29629
                        time:   [2.1797 ms 2.1898 ms 2.2043 ms]
block target estimation/contract/call 44444
                        time:   [2.1112 ms 2.1173 ms 2.1237 ms]
block target estimation/contract/call 66666
                        time:   [2.0530 ms 2.0610 ms 2.0691 ms]
block target estimation/contract/call 100000
                        time:   [1.9275 ms 1.9322 ms 1.9387 ms]
block target estimation/contract/cb
                        time:   [2.8728 ms 2.8836 ms 2.8946 ms]
block target estimation/contract/ccp 1
                        time:   [3.9833 ms 4.0033 ms 4.0309 ms]
block target estimation/contract/ccp 10
                        time:   [4.2070 ms 4.2235 ms 4.2427 ms]
block target estimation/contract/ccp 100
                        time:   [4.4203 ms 4.4391 ms 4.4574 ms]
block target estimation/contract/ccp 1000
                        time:   [3.7655 ms 3.7747 ms 3.7840 ms]
block target estimation/contract/ccp 10000
                        time:   [4.0406 ms 4.0589 ms 4.0775 ms]
block target estimation/contract/ccp 19753
                        time:   [3.5811 ms 3.5896 ms 3.5981 ms]
block target estimation/contract/ccp 29629
                        time:   [3.4583 ms 3.4839 ms 3.5158 ms]
block target estimation/contract/ccp 44444
                        time:   [3.4880 ms 3.4981 ms 3.5081 ms]
block target estimation/contract/ccp 66666
                        time:   [3.5190 ms 3.5329 ms 3.5514 ms]
block target estimation/contract/ccp 100000
                        time:   [3.4854 ms 3.4964 ms 3.5076 ms]
block target estimation/contract/croo
                        time:   [67.070 ms 67.253 ms 67.441 ms]
block target estimation/contract/csiz 1
                        time:   [3.1927 ms 3.2046 ms 3.2171 ms]
block target estimation/contract/csiz 10
                        time:   [3.3017 ms 3.3142 ms 3.3277 ms]
block target estimation/contract/csiz 100
                        time:   [3.4821 ms 3.4920 ms 3.5020 ms]
block target estimation/contract/csiz 1000
                        time:   [3.0014 ms 3.0087 ms 3.0167 ms]
block target estimation/contract/csiz 10000
                        time:   [3.2728 ms 3.2823 ms 3.2926 ms]
block target estimation/contract/csiz 19753
                        time:   [2.7656 ms 2.7722 ms 2.7794 ms]
block target estimation/contract/csiz 29629
                        time:   [2.6209 ms 2.6371 ms 2.6585 ms]
block target estimation/contract/csiz 44444
                        time:   [2.4669 ms 2.4798 ms 2.4940 ms]
block target estimation/contract/csiz 66666
                        time:   [2.4630 ms 2.4692 ms 2.4758 ms]
block target estimation/contract/csiz 100000
                        time:   [2.4514 ms 2.4616 ms 2.4762 ms]
block target estimation/contract/ldc 1
                        time:   [4.2252 ms 4.2377 ms 4.2506 ms]
block target estimation/contract/ldc 10
                        time:   [4.4222 ms 4.4362 ms 4.4503 ms]
block target estimation/contract/ldc 100
                        time:   [4.4831 ms 4.4936 ms 4.5046 ms]
block target estimation/contract/ldc 1000
                        time:   [4.2607 ms 4.2739 ms 4.2881 ms]
block target estimation/contract/ldc 10000
                        time:   [4.7586 ms 4.7841 ms 4.8157 ms]
block target estimation/contract/ldc 19753
                        time:   [4.6346 ms 4.6492 ms 4.6643 ms]
block target estimation/contract/ldc 29629
                        time:   [4.4694 ms 4.4880 ms 4.5071 ms]
block target estimation/contract/ldc 44444
                        time:   [4.4017 ms 4.4225 ms 4.4500 ms]
block target estimation/contract/ldc 66666
                        time:   [4.3336 ms 4.3425 ms 4.3516 ms]
block target estimation/contract/ldc 100000
                        time:   [4.4381 ms 4.4566 ms 4.4749 ms]
block target estimation/contract/log
                        time:   [10.256 ms 10.303 ms 10.350 ms]
block target estimation/contract/logd 1
                        time:   [4.1894 ms 4.2067 ms 4.2251 ms]
block target estimation/contract/logd 10
                        time:   [4.4084 ms 4.4381 ms 4.4722 ms]
block target estimation/contract/logd 100
                        time:   [5.3502 ms 5.4004 ms 5.4666 ms]
block target estimation/contract/logd 1000
                        time:   [13.050 ms 13.135 ms 13.223 ms]
block target estimation/contract/logd 10000
                        time:   [27.383 ms 27.628 ms 27.887 ms]
block target estimation/contract/logd 19753
                        time:   [29.407 ms 29.729 ms 30.055 ms]
block target estimation/contract/logd 29629
                        time:   [33.715 ms 44.027 ms 57.000 ms]
block target estimation/contract/logd 44444
                        time:   [33.105 ms 42.521 ms 54.599 ms]
block target estimation/contract/logd 66666
                        time:   [30.631 ms 30.949 ms 31.279 ms]
block target estimation/contract/logd 100000
                        time:   [30.155 ms 40.772 ms 54.713 ms]
block target estimation/contract/mint
                        time:   [98.285 ms 99.414 ms 100.69 ms]
block target estimation/contract/ret contract
                        time:   [73.189 ms 73.373 ms 73.580 ms]
block target estimation/contract/retd contract 1
                        time:   [65.356 ms 65.477 ms 65.600 ms]
block target estimation/contract/retd contract 10
                        time:   [66.407 ms 66.503 ms 66.604 ms]
block target estimation/contract/retd contract 100
                        time:   [66.665 ms 66.843 ms 67.024 ms]
block target estimation/contract/retd contract 1000
                        time:   [61.910 ms 62.100 ms 62.305 ms]
block target estimation/contract/retd contract 10000
                        time:   [49.114 ms 49.293 ms 49.474 ms]
block target estimation/contract/retd contract 19753
                        time:   [41.567 ms 41.799 ms 42.039 ms]
block target estimation/contract/retd contract 29629
                        time:   [40.203 ms 45.726 ms 56.567 ms]
block target estimation/contract/retd contract 44444
                        time:   [43.955 ms 58.338 ms 75.298 ms]
block target estimation/contract/retd contract 66666
                        time:   [36.076 ms 36.297 ms 36.520 ms]
block target estimation/contract/retd contract 100000
                        time:   [33.281 ms 33.629 ms 34.039 ms]
block target estimation/contract/smo 1
                        time:   [65.119 ms 65.588 ms 66.177 ms]
block target estimation/contract/smo 10
                        time:   [63.433 ms 63.720 ms 64.141 ms]
block target estimation/contract/smo 100
                        time:   [61.177 ms 61.465 ms 61.839 ms]
block target estimation/contract/smo 1000
                        time:   [59.890 ms 60.007 ms 60.134 ms]
block target estimation/contract/smo 10000
                        time:   [51.135 ms 51.444 ms 51.793 ms]
block target estimation/contract/smo 19753
                        time:   [45.648 ms 45.967 ms 46.336 ms]
block target estimation/contract/smo 29629
                        time:   [55.496 ms 69.138 ms 84.636 ms]
block target estimation/contract/smo 44444
                        time:   [50.462 ms 65.771 ms 83.605 ms]
block target estimation/contract/smo 66666
                        time:   [37.880 ms 38.247 ms 38.722 ms]
block target estimation/contract/smo 100000
                        time:   [33.433 ms 33.628 ms 33.823 ms]
block target estimation/contract/srw
                        time:   [73.681 ms 73.943 ms 74.347 ms]
block target estimation/contract/sww
                        time:   [111.88 ms 112.64 ms 113.41 ms]
block target estimation/contract/time
                        time:   [64.179 ms 64.539 ms 64.899 ms]
block target estimation/contract/tr
                        time:   [128.13 ms 128.49 ms 128.94 ms]",5,1
1454,2023-10-26T17:44:56Z,2023-11-20T17:41:24Z,2023-11-20T17:41:24Z,5,82,20,"Closes #1414. Also does some upgrades for latest fuel-vm version. Targets FuelLabs/fuel-vm#625 currently, needs new fuel-vm release after that is merged.
This also mostly reverts #1457 which was not working correctly, especially with regards to call instruction.",2,2
1456,2023-10-26T18:33:41Z,2023-10-27T13:49:00Z,2023-10-27T13:49:00Z,9,53,7,"Closes #1428
Call the flush function during the end of the FuelService to move the processing of WAL and SST fiels from the node's launching to the node's shutdown.
Added additional logs to track the performance of the starting/shutdown process.",3,0
1457,2023-10-26T19:46:45Z,2023-10-26T22:33:29Z,2023-10-26T22:33:30Z,2,36,13,"Closes #1431
In the case of super-fast opcodes(< than 1 µs), the elapse method is not accurate enough, which leads to unstable results from benchmarks.
The change aims to stabilize the results from measurements by subtracting the time required to reset the VM from the total time of the benchmark.",2,0
1458,2023-10-27T00:10:28Z,,2023-11-06T23:35:02Z,122,702,505,,5,3
1459,2023-10-27T21:15:25Z,2023-12-20T15:23:43Z,2023-12-20T15:23:43Z,47,1692,1035,"Closes #1450
Separates the loading of the initial chain state from loading ChainConfig.
The parameters to the run command have been renamed to chain_params and chain_state. Should we  rename the corresponding structs ChainConfig and StateConfig accordingly?
The block height is moved to the ChainConfig to be available instantly because the StateConfig will be streamed in a later PR.",7,1
1460,2023-10-28T04:38:43Z,2023-10-28T11:06:34Z,2023-10-28T11:06:34Z,2,2,1,"As it can be seen from FuelLabs/fuels-rs#1174 releasy only worked for self commits. This is because we were tracking the wrong branch. This PR fixes the tracking branch for this repo, from main to master.",2,0
1461,2023-10-29T00:15:22Z,2023-10-29T20:15:27Z,2023-10-29T20:15:27Z,1,174,160,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[31m    Removing�[0m ahash v0.7.6
�[0m�[0m�[1m�[31m    Removing�[0m ahash v0.8.3
�[0m�[0m�[1m�[36m      Adding�[0m ahash v0.7.7
�[0m�[0m�[1m�[36m      Adding�[0m ahash v0.8.6
�[0m�[0m�[1m�[32m    Updating�[0m base64 v0.21.4 -> v0.21.5
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.6 -> v4.4.7
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.6 -> v4.4.7
�[0m�[0m�[1m�[32m    Updating�[0m clap_derive v4.4.2 -> v4.4.7
�[0m�[0m�[1m�[32m    Updating�[0m clap_lex v0.5.1 -> v0.6.0
�[0m�[0m�[1m�[32m    Updating�[0m const-hex v1.9.1 -> v1.10.0
�[0m�[0m�[1m�[32m    Updating�[0m cpufeatures v0.2.10 -> v0.2.11
�[0m�[0m�[1m�[32m    Updating�[0m ethnum v1.4.0 -> v1.5.0
�[0m�[0m�[1m�[32m    Updating�[0m fiat-crypto v0.2.1 -> v0.2.2
�[0m�[0m�[1m�[32m    Updating�[0m futures v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-channel v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-core v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-executor v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-io v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-macro v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-sink v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-task v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m futures-util v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m hyper-rustls v0.24.1 -> v0.24.2
�[0m�[0m�[1m�[32m    Updating�[0m ipnet v2.8.0 -> v2.9.0
�[0m�[0m�[1m�[32m    Updating�[0m memmap2 v0.5.10 -> v0.8.0
�[0m�[0m�[1m�[32m    Updating�[0m mio v0.8.8 -> v0.8.9
�[0m�[0m�[1m�[32m    Updating�[0m num_enum v0.7.0 -> v0.7.1
�[0m�[0m�[1m�[32m    Updating�[0m num_enum_derive v0.7.0 -> v0.7.1
�[0m�[0m�[1m�[32m    Updating�[0m pest v2.7.4 -> v2.7.5
�[0m�[0m�[1m�[36m      Adding�[0m proc-macro-crate v2.0.0
�[0m�[0m�[1m�[31m    Removing�[0m redox_syscall v0.3.5
�[0m�[0m�[1m�[31m    Removing�[0m rustix v0.37.26
�[0m�[0m�[1m�[31m    Removing�[0m rustix v0.38.20
�[0m�[0m�[1m�[36m      Adding�[0m rustix v0.37.27
�[0m�[0m�[1m�[36m      Adding�[0m rustix v0.38.21
�[0m�[0m�[1m�[32m    Updating�[0m rustls v0.21.7 -> v0.21.8
�[0m�[0m�[1m�[31m    Removing�[0m rustls-webpki v0.100.3
�[0m�[0m�[1m�[31m    Removing�[0m rustls-webpki v0.101.6
�[0m�[0m�[1m�[36m      Adding�[0m rustls-webpki v0.101.7
�[0m�[0m�[1m�[32m    Updating�[0m sct v0.7.0 -> v0.7.1
�[0m�[0m�[1m�[32m    Updating�[0m serde v1.0.189 -> v1.0.190
�[0m�[0m�[1m�[32m    Updating�[0m serde_derive v1.0.189 -> v1.0.190
�[0m�[0m�[1m�[32m    Updating�[0m serde_spanned v0.6.3 -> v0.6.4
�[0m�[0m�[1m�[32m    Updating�[0m serde_yaml v0.9.25 -> v0.9.27
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-common v12.4.1 -> v12.5.0
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-demangle v12.4.1 -> v12.5.0
�[0m�[0m�[1m�[32m    Updating�[0m tempfile v3.8.0 -> v3.8.1
�[0m�[0m�[1m�[32m    Updating�[0m tokio-util v0.7.9 -> v0.7.10
�[0m�[0m�[1m�[32m    Updating�[0m toml_datetime v0.6.3 -> v0.6.5
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.20.7
�[0m�[0m�[1m�[32m    Updating�[0m tracing-log v0.1.3 -> v0.1.4
�[0m�[0m�[1m�[31m    Removing�[0m webpki-roots v0.23.1
�[0m�[0m�[1m�[36m      Adding�[0m zerocopy v0.7.18
�[0m�[0m�[1m�[36m      Adding�[0m zerocopy-derive v0.7.18",1,0
1462,2023-10-30T17:12:17Z,2023-11-01T20:07:05Z,2023-11-01T20:07:05Z,3,32,3,"Related issues:

FuelLabs/fuel-vm#599",2,1
1464,2023-10-30T23:52:19Z,2023-10-31T18:01:25Z,2023-10-31T18:01:25Z,64,166,186,"Closes #1261
Awaits reelasing of the FuelLabs/fuel-vm#619.",4,0
1466,2023-10-31T16:38:39Z,2023-11-01T15:56:08Z,2023-11-01T15:56:08Z,55,166,82,"Closes #1335
Handling overflows during arithmetic operations by denying clippy::arithmetic_side_effects.
Also, it is the last issue that we plan to fix right now in the scope of the ToB audit report. So this PR closes FuelLabs/fuel-vm#513.",2,0
1468,2023-10-31T20:00:00Z,2023-11-01T00:55:18Z,2023-11-01T00:55:18Z,24,194,55,"The new version of fuel-vm:

Adds a new max_size into TxParameters and breaks the old API.
max_inputs and max_outputs are u8 now.
max_witnesses is u32 now.
Add two new fields into `GasCosts.
Charges additional min_fee for each Signed/Predicate input and for Create transaction.",3,1
1469,2023-11-02T01:57:43Z,2023-11-02T20:43:15Z,2023-11-02T20:43:15Z,7,142,68,"Closes #1441

Disabled cache for blocks in the table
Removed usage of in memory transaction in benchmarks and replaced it with checkpoint
Added bloom filter
Added customization of the block cache",3,0
1471,2023-11-05T00:15:47Z,2023-11-06T23:47:59Z,2023-11-06T23:47:59Z,1,70,51,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m crc-catalog v2.2.0 -> v2.4.0
�[0m�[0m�[1m�[32m    Updating�[0m curve25519-dalek-derive v0.1.0 -> v0.1.1
�[0m�[0m�[1m�[32m    Updating�[0m indexmap v2.0.2 -> v2.1.0
�[0m�[0m�[1m�[32m    Updating�[0m js-sys v0.3.64 -> v0.3.65
�[0m�[0m�[1m�[36m      Adding�[0m libredox v0.0.1
�[0m�[0m�[1m�[36m      Adding�[0m libredox v0.0.2
�[0m�[0m�[1m�[32m    Updating�[0m platforms v3.1.2 -> v3.2.0
�[0m�[0m�[1m�[32m    Updating�[0m primeorder v0.13.2 -> v0.13.3
�[0m�[0m�[1m�[32m    Updating�[0m redox_termios v0.1.2 -> v0.1.3
�[0m�[0m�[1m�[32m    Updating�[0m redox_users v0.4.3 -> v0.4.4
�[0m�[0m�[1m�[32m    Updating�[0m serde_json v1.0.107 -> v1.0.108
�[0m�[0m�[1m�[32m    Updating�[0m svm-rs v0.3.0 -> v0.3.2
�[0m�[0m�[1m�[32m    Updating�[0m termion v2.0.1 -> v2.0.3
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen v0.2.87 -> v0.2.88
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-backend v0.2.87 -> v0.2.88
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-futures v0.4.37 -> v0.4.38
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro v0.2.87 -> v0.2.88
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro-support v0.2.87 -> v0.2.88
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-shared v0.2.87 -> v0.2.88
�[0m�[0m�[1m�[32m    Updating�[0m web-sys v0.3.64 -> v0.3.65
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.17 -> v0.5.19
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy v0.7.18 -> v0.7.25
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy-derive v0.7.18 -> v0.7.25",1,0
1472,2023-11-07T01:36:48Z,2023-11-14T20:57:50Z,2023-11-14T20:57:50Z,66,683,514,Imports FuelLabs/fuel-vm#623,4,0
1474,2023-11-08T08:18:26Z,2024-01-26T01:02:51Z,2024-01-26T01:02:51Z,47,3831,958,"Snapshots are now generated along with a metadata file describing the encoding used. The metadata file contains encoding details as well as the location of additional files inside the snapshot directory containing the actual data.
Snapshot generation is streamed so that memory usage is kept to a minimum.
The CLI was expanded to allow for customization of the snapshot encoding used.
JSON encoding was kept human friendly (Option::None not encoded, all state in one file).
Parquet is used for compression and indexing while the actual data is encoded using Postcard.",5,3
1476,2023-11-08T09:04:54Z,2023-11-16T12:28:37Z,2023-11-16T12:28:37Z,4,62,16,"#1386
block target estimation/other/flag
                        time:   [27.326 ms 27.458 ms 27.603 ms]
block target estimation/other/gm
                        time:   [7.7485 ms 7.7831 ms 7.8231 ms]",2,0
1478,2023-11-09T14:36:15Z,2023-11-15T21:58:24Z,2023-11-15T21:58:24Z,3,67,2,Closes #1404,2,0
1480,2023-11-10T08:57:28Z,2023-11-10T10:17:12Z,2023-11-10T10:17:12Z,1,7,4,,2,0
1483,2023-11-13T07:38:52Z,2023-11-14T19:20:59Z,2023-11-14T19:20:59Z,20,1212,551,"This PR is a subset of #1470. It contains only the changes required for fuel-core crates and chainspec, including upgrading to fuel-vm v0.41.",3,2
1484,2023-11-13T16:26:36Z,2023-11-14T20:28:24Z,2023-11-14T20:28:24Z,3,6,25,,2,0
1485,2023-11-14T21:05:02Z,2023-11-15T00:13:43Z,2023-11-15T00:13:43Z,4,242,221,Prepare v0.21 of Fuel Core for release. We are experimenting with an rc approach this time to prevent users from pulling in this version before the rest of the stack is ready.,2,0
1488,2023-11-15T13:57:29Z,2023-11-15T16:31:31Z,2023-11-15T16:31:31Z,2,14,0,"After moving away from gha cache for docker images, I missed adding a docker login step for the binary publish job.",2,0
1490,2023-11-16T18:15:50Z,2023-11-16T19:49:20Z,2023-11-16T19:49:20Z,2,33,0,"#1446
poph/poph               time:   [72.373 ns 72.690 ns 73.018 ns]
popl/popl               time:   [66.444 ns 66.724 ns 67.006 ns]
pshh/pshh               time:   [76.584 ns 76.862 ns 77.133 ns]
pshl/pshl               time:   [80.093 ns 80.410 ns 80.774 ns]",2,0
1491,2023-11-16T18:24:30Z,2023-11-16T20:37:48Z,2023-11-16T20:37:48Z,8,6,237,"Related issues:

Closes #1376

This PR removes unused gossipsub request and repsonse items NewBlock and ConsensusVote. This includes implementation details, such as structs and constants, as well as tests.",2,0
1492,2023-11-16T21:30:15Z,2023-11-20T19:16:48Z,2023-11-20T19:16:48Z,9,121,57,Reverting the change #1004 and adds support for reverse prefix iteration in the RocksDB.,3,0
1494,2023-11-17T13:27:24Z,2023-11-20T15:57:28Z,2023-11-20T15:57:28Z,9,258,217,"After running sanity check benchmarks, we've got inconsistent results for some opcodes. Part of that is because of the wrong configuration of the price benchmarks, some of them because of the wrong configuration of the sanity check benchmarks.
This PR addresses them and produces more consistent results.",4,0
1498,2023-11-19T00:16:20Z,2023-11-20T16:16:50Z,2023-11-20T16:16:50Z,1,97,95,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m cargo-platform v0.1.4 -> v0.1.5
�[0m�[0m�[1m�[32m    Updating�[0m cargo_metadata v0.17.0 -> v0.18.1
�[0m�[0m�[1m�[32m    Updating�[0m crypto-bigint v0.5.4 -> v0.5.5
�[0m�[0m�[1m�[32m    Updating�[0m ecdsa v0.16.8 -> v0.16.9
�[0m�[0m�[1m�[32m    Updating�[0m ed25519-dalek v2.0.0 -> v2.1.0
�[0m�[0m�[1m�[32m    Updating�[0m elliptic-curve v0.13.6 -> v0.13.7
�[0m�[0m�[1m�[32m    Updating�[0m errno v0.3.6 -> v0.3.7
�[0m�[0m�[1m�[32m    Updating�[0m ethers v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-addressbook v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-abigen v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-derive v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-core v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-etherscan v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-middleware v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-providers v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-signers v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m ethers-solc v2.0.10 -> v2.0.11
�[0m�[0m�[1m�[32m    Updating�[0m eyre v0.6.8 -> v0.6.9
�[0m�[0m�[1m�[32m    Updating�[0m fiat-crypto v0.2.4 -> v0.2.5
�[0m�[0m�[1m�[32m    Updating�[0m h2 v0.3.21 -> v0.3.22
�[0m�[0m�[1m�[32m    Updating�[0m k256 v0.13.1 -> v0.13.2
�[0m�[0m�[1m�[32m    Updating�[0m primeorder v0.13.3 -> v0.13.6
�[0m�[0m�[1m�[32m    Updating�[0m rustix v0.38.23 -> v0.38.24
�[0m�[0m�[1m�[32m    Updating�[0m rustls v0.21.8 -> v0.21.9
�[0m�[0m�[1m�[32m    Updating�[0m signature v2.1.0 -> v2.2.0
�[0m�[0m�[1m�[32m    Updating�[0m solang-parser v0.3.2 -> v0.3.3
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-common v12.6.0 -> v12.7.0
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-demangle v12.6.0 -> v12.7.0
�[0m�[0m�[1m�[32m    Updating�[0m toml v0.7.8 -> v0.8.8
�[0m�[0m�[1m�[32m    Updating�[0m toml_edit v0.19.15 -> v0.21.0
�[0m�[0m�[1m�[32m    Updating�[0m zeroize v1.6.0 -> v1.7.0",1,0
1501,2023-11-20T18:56:58Z,2023-11-22T23:13:25Z,2023-11-22T23:13:25Z,8,448,0,"Closes #1409
Handing off to @Dentosal
The tests contain example of how to withdraw tokens.",3,0
1502,2023-11-20T21:38:14Z,2023-11-22T13:46:37Z,2023-11-22T13:46:37Z,23,222,36,Closes #1442,4,2
1503,2023-11-21T03:55:11Z,2023-11-22T14:46:28Z,2023-11-22T14:46:28Z,5,175,135,"#1499
vm benches:
gtf/gtf                
time:   [208.43 ns 208.99 ns 209.60 ns]

sanity benches:
block target estimation/other/gtf
time:   [65.877 ms 66.094 ms 66.323 ms]",2,1
1504,2023-11-21T20:29:39Z,2023-11-28T00:06:09Z,2023-11-28T00:06:09Z,13,476,16,"Related issues:

Closes #1364

This PR adds receipts to the transaction status objects returned by transaction-related GraphQL queries. When querying for the status of a transaction, a status of Failed or Success will now include the transaction receipts.
Note that this PR does not remove Receipts from OpaqueTransaction or other places that would constitute a breaking change, thus preserving existing behaviour. We can remove receipts from redundant areas in a follow up PR after the beta release.",3,0
1505,2023-11-21T20:31:22Z,2023-11-22T10:46:44Z,2023-11-22T10:46:44Z,20,149,72,"Updates #1502 to use dependent gas price for vm_initialization.
This PR:

Adapts the vm_initialization gas cost to a dependent cost
Modifies the VM initialization benchmark to use a variable size transaction
Updates fuel-vm to the newly created v0.42.2

This adds the following benchmarks to the suite:
vm_initialization/vm_initialization_with_tx_size_2191080                                                                            
                        time:   [385.44 µs 387.54 µs 389.67 µs]
                        thrpt:  [5.2368 GiB/s 5.2655 GiB/s 5.2942 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2322152                                                                            
                        time:   [407.82 µs 409.68 µs 411.57 µs]
                        thrpt:  [5.2547 GiB/s 5.2790 GiB/s 5.3030 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2453224                                                                            
                        time:   [424.74 µs 426.49 µs 428.23 µs]
                        thrpt:  [5.3354 GiB/s 5.3570 GiB/s 5.3791 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2584296                                                                            
                        time:   [445.98 µs 450.28 µs 456.29 µs]
                        thrpt:  [5.2748 GiB/s 5.3452 GiB/s 5.3966 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2715368                                                                            
                        time:   [468.75 µs 473.45 µs 479.25 µs]
                        thrpt:  [5.2767 GiB/s 5.3414 GiB/s 5.3949 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2846440                                                                            
                        time:   [490.47 µs 494.15 µs 498.82 µs]
                        thrpt:  [5.3145 GiB/s 5.3647 GiB/s 5.4049 GiB/s]
vm_initialization/vm_initialization_with_tx_size_2977512                                                                            
                        time:   [505.35 µs 509.33 µs 513.98 µs]
                        thrpt:  [5.3952 GiB/s 5.4445 GiB/s 5.4873 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3108584                                                                            
                        time:   [526.05 µs 529.11 µs 532.63 µs]
                        thrpt:  [5.4355 GiB/s 5.4717 GiB/s 5.5035 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3239656                                                                            
                        time:   [547.18 µs 550.45 µs 553.83 µs]
                        thrpt:  [5.4478 GiB/s 5.4813 GiB/s 5.5140 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3370728                                                                            
                        time:   [565.98 µs 568.75 µs 571.58 µs]
                        thrpt:  [5.4923 GiB/s 5.5195 GiB/s 5.5465 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3501800                                                                            
                        time:   [585.76 µs 588.62 µs 591.47 µs]
                        thrpt:  [5.5139 GiB/s 5.5406 GiB/s 5.5677 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3632872                                                                            
                        time:   [607.51 µs 610.83 µs 614.26 µs]
                        thrpt:  [5.5080 GiB/s 5.5390 GiB/s 5.5693 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3763944                                                                            
                        time:   [630.00 µs 635.47 µs 642.49 µs]
                        thrpt:  [5.4560 GiB/s 5.5163 GiB/s 5.5642 GiB/s]
vm_initialization/vm_initialization_with_tx_size_3895016                                                                            
                        time:   [652.06 µs 656.04 µs 660.74 µs]
                        thrpt:  [5.4901 GiB/s 5.5294 GiB/s 5.5632 GiB/s]
vm_initialization/vm_initialization_with_tx_size_4026088                                                                            
                        time:   [664.38 µs 667.29 µs 670.21 µs]
                        thrpt:  [5.5946 GiB/s 5.6191 GiB/s 5.6438 GiB/s]
vm_initialization/vm_initialization_with_tx_size_4157160                                                                            
                        time:   [712.86 µs 718.35 µs 724.60 µs]
                        thrpt:  [5.3431 GiB/s 5.3896 GiB/s 5.4311 GiB/s]

Locally, this produces the following dependent cost for VM initialization:
        vm_initialization: DependentCost::LightOperation {
             base: 55476,
             units_per_gas: 39,
         },",2,2
1506,2023-11-21T20:36:30Z,2023-11-22T11:19:39Z,2023-11-22T11:19:39Z,7,315,184,"Added validation of the coin's fields during block production and validation.
Moved field comparison to fuel-core-types crates from fuel-core-txpool. Reused it in the executor.
Added verification that contract exists. It helps to catch the error before hitting the VM.
Included Nonce, UtxoId, ContractId into error message.",2,0
1507,2023-11-23T00:53:04Z,2023-11-23T17:03:34Z,2023-11-23T17:03:34Z,22,616,390,"The block gas limit for 1 second of production remains 30M. Based on the result from the sanity check it is a good value to fit 1/3 from block production time. The noop opcode takes ~12ms for 1M -> for 30M it should be around ~360ms. Most opcodes have the same execution time, or maybe less(only several have higher execution time in worst scenarios).
The max gas per script and predicate was increased from 10M to 30M because all transactions became more expensive. With the 63 gas per byte, the 30M limit allows the deployment of contracts up to 465 KB. The max_storage_slots was increased because we've started to charge separately for the state of the contract, and the limit is defined mainly by the gas limit. The new_storage_per_byte is manually set to be the same as gas_per_byte for now.
The default coinbase contract has ContractId ""0x7777777777777777777777777777777777777777777777777777777777777777"". The contract is created with command:
fuel-core generate-fee-contract 94318e6e453f30e85bf6088f7161d44e57b86a6af0c955d22b353f91b2465f5e
Where 94318e6e453f30e85bf6088f7161d44e57b86a6af0c955d22b353f91b2465f5e is 7th address generated from the beta 5 seed phrase by forc-wallet account new command.
The size of the transaction and opcodes that modify storage are the most expensive.
Sanity check results for 1M block gas limit:
block target estimation/alu/add opcode
                        time:   [9.6945 ms 9.6991 ms 9.7036 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) low mild
block target estimation/alu/addi opcode
                        time:   [9.2619 ms 9.2654 ms 9.2688 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/alu/and opcode
                        time:   [9.6389 ms 9.6469 ms 9.6558 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/alu/andi opcode
                        time:   [9.6831 ms 9.6876 ms 9.6922 ms]
block target estimation/alu/div opcode
                        time:   [10.389 ms 10.406 ms 10.423 ms]
block target estimation/alu/divi opcode
                        time:   [10.077 ms 10.083 ms 10.090 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/alu/eq opcode
                        time:   [9.4103 ms 9.4166 ms 9.4230 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/exp opcode
                        time:   [10.847 ms 10.855 ms 10.863 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/alu/expi opcode
                        time:   [10.491 ms 10.505 ms 10.519 ms]
block target estimation/alu/gt opcode
                        time:   [9.3366 ms 9.3413 ms 9.3460 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) low mild
block target estimation/alu/lt opcode
                        time:   [9.5865 ms 9.5916 ms 9.5967 ms]
block target estimation/alu/mlog opcode
                        time:   [11.258 ms 11.266 ms 11.274 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/mod opcode
                        time:   [10.231 ms 10.235 ms 10.240 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high severe
block target estimation/alu/modi opcode
                        time:   [9.9911 ms 9.9950 ms 9.9990 ms]
block target estimation/alu/move opcode
                        time:   [8.9027 ms 8.9063 ms 8.9100 ms]
Found 3 outliers among 100 measurements (3.00%)
  1 (1.00%) low mild
  2 (2.00%) high mild
block target estimation/alu/movi opcode
                        time:   [9.1850 ms 9.1891 ms 9.1933 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/mroo opcode
                        time:   [11.194 ms 11.198 ms 11.202 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/alu/mul opcode
                        time:   [9.6178 ms 9.6262 ms 9.6346 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/muli opcode
                        time:   [9.3876 ms 9.3920 ms 9.3964 ms]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) low mild
  1 (1.00%) high mild
block target estimation/alu/mldv opcode
                        time:   [7.8830 ms 7.8859 ms 7.8889 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/noop opcode
                        time:   [11.567 ms 11.571 ms 11.575 ms]
block target estimation/alu/not opcode
                        time:   [9.0525 ms 9.0575 ms 9.0626 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/or opcode
                        time:   [9.3047 ms 9.3099 ms 9.3151 ms]
block target estimation/alu/ori opcode
                        time:   [9.3479 ms 9.3529 ms 9.3579 ms]
Found 3 outliers among 100 measurements (3.00%)
  3 (3.00%) high mild
block target estimation/alu/sll opcode
                        time:   [9.4795 ms 9.4855 ms 9.4915 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/slli opcode
                        time:   [9.3000 ms 9.3066 ms 9.3131 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) low mild
block target estimation/alu/srl opcode
                        time:   [9.5507 ms 9.5572 ms 9.5636 ms]
block target estimation/alu/srli opcode
                        time:   [9.6669 ms 9.6724 ms 9.6778 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low mild
  3 (3.00%) high mild
block target estimation/alu/sub opcode
                        time:   [9.4321 ms 9.4363 ms 9.4412 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/alu/subi opcode
                        time:   [9.4125 ms 9.4158 ms 9.4191 ms]
block target estimation/alu/xor opcode
                        time:   [9.6297 ms 9.6351 ms 9.6406 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/alu/xori opcode
                        time:   [9.2958 ms 9.3020 ms 9.3081 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) low mild
block target estimation/alu/wdcm opcode
                        time:   [9.8170 ms 9.8212 ms 9.8254 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) low mild
  1 (1.00%) high mild
block target estimation/alu/wdop opcode
                        time:   [11.550 ms 11.559 ms 11.569 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/wdml opcode
                        time:   [11.453 ms 11.464 ms 11.475 ms]
block target estimation/alu/wddv opcode
                        time:   [11.902 ms 11.906 ms 11.910 ms]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
block target estimation/alu/wdmd opcode
                        time:   [12.972 ms 12.974 ms 12.978 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/wdam opcode
                        time:   [13.101 ms 13.106 ms 13.111 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/wdmm opcode
                        time:   [12.809 ms 12.812 ms 12.816 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) low mild
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/alu/wqcm opcode
                        time:   [10.604 ms 10.614 ms 10.624 ms]
block target estimation/alu/wqop opcode
                        time:   [11.614 ms 11.621 ms 11.627 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/alu/wqml opcode
                        time:   [11.319 ms 11.328 ms 11.337 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low mild
  3 (3.00%) high mild
block target estimation/alu/wqdv opcode
                        time:   [11.409 ms 11.414 ms 11.420 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/wqmd opcode
                        time:   [12.758 ms 12.760 ms 12.762 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/wdmm opcode
                        time:   [12.809 ms 12.812 ms 12.816 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) low mild
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/alu/wqcm opcode
                        time:   [10.604 ms 10.614 ms 10.624 ms]
block target estimation/alu/wqop opcode
                        time:   [11.614 ms 11.621 ms 11.627 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/alu/wqml opcode
                        time:   [11.319 ms 11.328 ms 11.337 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low mild
  3 (3.00%) high mild
block target estimation/alu/wqdv opcode
                        time:   [11.409 ms 11.414 ms 11.420 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/alu/wqmd opcode
                        time:   [12.758 ms 12.760 ms 12.762 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/wqam opcode
                        time:   [12.641 ms 12.648 ms 12.656 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/alu/wqmm opcode
                        time:   [19.251 ms 19.257 ms 19.263 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/contract/bal contract
                        time:   [14.725 ms 14.733 ms 14.740 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/contract/bal script
                        time:   [14.612 ms 14.624 ms 14.637 ms]
block target estimation/contract/bhei
                        time:   [9.3087 ms 9.3283 ms 9.3565 ms]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/bhsh
                        time:   [11.444 ms 11.466 ms 11.496 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/burn
                        time:   [11.051 ms 11.054 ms 11.058 ms]
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) low mild
  4 (4.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/call 1
                        time:   [10.877 ms 10.882 ms 10.887 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/contract/call 10
                        time:   [10.866 ms 10.873 ms 10.881 ms]
Found 1 outliers among 100 measurements (1.00%)
block target estimation/contract/call 1000
                        time:   [10.524 ms 10.528 ms 10.532 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/call 10000
                        time:   [9.9281 ms 9.9310 ms 9.9341 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/contract/call 19753
                        time:   [9.3603 ms 9.3626 ms 9.3648 ms]
block target estimation/contract/call 29629
                        time:   [9.4653 ms 9.4672 ms 9.4690 ms]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) low mild
  3 (3.00%) high mild
block target estimation/contract/call 44444
                        time:   [9.3232 ms 9.3262 ms 9.3301 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/call 66666
                        time:   [9.0877 ms 9.0896 ms 9.0916 ms]
Found 4 outliers among 100 measurements (4.00%)
  4 (4.00%) high mild
block target estimation/contract/call 100000
                        time:   [9.2118 ms 9.2141 ms 9.2166 ms]
Found 10 outliers among 100 measurements (10.00%)
  8 (8.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/cb
                        time:   [11.252 ms 11.266 ms 11.280 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) low mild
block target estimation/contract/ccp 1
                        time:   [9.4254 ms 9.4299 ms 9.4343 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/contract/ccp 10
                        time:   [9.6353 ms 9.6391 ms 9.6428 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/contract/ccp 100
                        time:   [7.9365 ms 7.9431 ms 7.9493 ms]
Found 7 outliers among 100 measurements (7.00%)
  2 (2.00%) low severe
  4 (4.00%) low mild
  1 (1.00%) high mild
block target estimation/contract/ccp 1000
                        time:   [3.5176 ms 3.5186 ms 3.5195 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/contract/ccp 10000
                        time:   [2.8955 ms 2.9051 ms 2.9144 ms]
block target estimation/contract/ccp 19753
                        time:   [2.5702 ms 2.5768 ms 2.5833 ms]
block target estimation/contract/ccp 29629
                        time:   [2.4370 ms 2.4416 ms 2.4462 ms]
block target estimation/contract/ccp 44444
                        time:   [2.3448 ms 2.3482 ms 2.3517 ms]
block target estimation/contract/ccp 66666
                        time:   [2.4630 ms 2.4655 ms 2.4681 ms]
Found 6 outliers among 100 measurements (6.00%)
  6 (6.00%) high mild
block target estimation/contract/ccp 100000
                        time:   [2.9114 ms 2.9153 ms 2.9191 ms]
block target estimation/contract/croo
                        time:   [10.958 ms 10.963 ms 10.967 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/contract/csiz 1
                        time:   [8.8856 ms 8.8929 ms 8.9005 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/contract/csiz 10
                        time:   [9.2256 ms 9.2309 ms 9.2363 ms]
block target estimation/contract/csiz 100
                        time:   [9.0832 ms 9.0890 ms 9.0949 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/contract/csiz 1000
                        time:   [7.6927 ms 7.7003 ms 7.7081 ms]
block target estimation/contract/csiz 10000
                        time:   [10.468 ms 10.507 ms 10.551 ms]
Found 15 outliers among 100 measurements (15.00%)
  1 (1.00%) low mild
  14 (14.00%) high severe
block target estimation/contract/csiz 19753
                        time:   [9.5810 ms 9.6128 ms 9.6463 ms]
block target estimation/contract/csiz 29629
                        time:   [9.2937 ms 9.3124 ms 9.3325 ms]
Found 21 outliers among 100 measurements (21.00%)
  1 (1.00%) high mild
  20 (20.00%) high severe
block target estimation/contract/csiz 44444
                        time:   [9.1104 ms 9.1239 ms 9.1380 ms]
block target estimation/contract/csiz 66666
                        time:   [9.0073 ms 9.0163 ms 9.0260 ms]
Found 23 outliers among 100 measurements (23.00%)
  2 (2.00%) low mild
  1 (1.00%) high mild
  20 (20.00%) high severe
block target estimation/contract/csiz 100000
                        time:   [8.9444 ms 8.9516 ms 8.9592 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/contract/ldc 1
                        time:   [12.500 ms 12.504 ms 12.508 ms]
Found 3 outliers among 100 measurements (3.00%)
  3 (3.00%) high mild
block target estimation/contract/ldc 10
                        time:   [13.152 ms 13.169 ms 13.187 ms]
block target estimation/contract/ldc 100
                        time:   [12.879 ms 12.900 ms 12.922 ms]
block target estimation/contract/ldc 1000
                        time:   [11.714 ms 11.768 ms 11.829 ms]
Found 17 outliers among 100 measurements (17.00%)
  4 (4.00%) high mild
  13 (13.00%) high severe
block target estimation/contract/ldc 10000
                        time:   [14.086 ms 14.127 ms 14.167 ms]
block target estimation/contract/ldc 19753
                        time:   [13.023 ms 13.062 ms 13.103 ms]
Found 1 outliers among 100 measurements (1.00%)
block target estimation/contract/ldc 29629
                        time:   [12.611 ms 12.640 ms 12.671 ms]
Found 23 outliers among 100 measurements (23.00%)
  15 (15.00%) low mild
  4 (4.00%) high mild
  4 (4.00%) high severe
block target estimation/contract/ldc 44444
                        time:   [12.535 ms 12.564 ms 12.596 ms]
Found 10 outliers among 100 measurements (10.00%)
  3 (3.00%) low mild
  4 (4.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/ldc 66666
                        time:   [12.854 ms 12.924 ms 13.003 ms]
Found 7 outliers among 100 measurements (7.00%)
  7 (7.00%) high severe
block target estimation/contract/ldc 100000
                        time:   [14.968 ms 15.027 ms 15.096 ms]
Found 9 outliers among 100 measurements (9.00%)
  4 (4.00%) high mild
  5 (5.00%) high severe
block target estimation/contract/log
                        time:   [5.8421 ms 5.8447 ms 5.8478 ms]
Found 12 outliers among 100 measurements (12.00%)
  5 (5.00%) low mild
  5 (5.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/logd 1
^[                        time:   [4.6927 ms 4.6959 ms 4.6995 ms]
Found 21 outliers among 100 measurements (21.00%)
  1 (1.00%) high mild
  20 (20.00%) high severe
block target estimation/contract/logd 10
                        time:   [4.7148 ms 4.7380 ms 4.7810 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/logd 100
                        time:   [4.9908 ms 4.9969 ms 5.0034 ms]
Found 4 outliers among 100 measurements (4.00%)
  4 (4.00%) high mild
block target estimation/contract/logd 1000
                        time:   [7.9364 ms 7.9498 ms 7.9644 ms]
Found 10 outliers among 100 measurements (10.00%)
  8 (8.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/logd 10000
                        time:   [13.200 ms 13.262 ms 13.327 ms]
Found 9 outliers among 100 measurements (9.00%)
  8 (8.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/logd 19753
                        time:   [14.013 ms 14.080 ms 14.155 ms]
Found 9 outliers among 100 measurements (9.00%)
  6 (6.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/logd 29629
                        time:   [14.407 ms 14.466 ms 14.532 ms]
Found 14 outliers among 100 measurements (14.00%)
block target estimation/contract/logd 44444
                        time:   [14.551 ms 14.618 ms 14.693 ms]
Found 8 outliers among 100 measurements (8.00%)
  5 (5.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/logd 66666
                        time:   [14.929 ms 15.015 ms 15.106 ms]
Found 8 outliers among 100 measurements (8.00%)
  7 (7.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/logd 100000
                        time:   [14.578 ms 14.664 ms 14.755 ms]
Found 13 outliers among 100 measurements (13.00%)
  12 (12.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/mint
                        time:   [10.663 ms 10.711 ms 10.767 ms]
Found 19 outliers among 100 measurements (19.00%)
  7 (7.00%) high mild
  12 (12.00%) high severe
block target estimation/contract/ret contract
                        time:   [10.880 ms 10.885 ms 10.891 ms]
Found 5 outliers among 100 measurements (5.00%)
  2 (2.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/retd contract 1
                        time:   [10.695 ms 10.701 ms 10.707 ms]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/retd contract 10
                        time:   [10.914 ms 10.921 ms 10.930 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/retd contract 100
                        time:   [10.942 ms 10.947 ms 10.953 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/retd contract 1000
                        time:   [10.800 ms 10.806 ms 10.813 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/retd contract 10000
                        time:   [11.573 ms 11.580 ms 11.587 ms]
Found 3 outliers among 100 measurements (3.00%)
  3 (3.00%) high mild
block target estimation/contract/retd contract 19753
                        time:   [12.039 ms 12.060 ms 12.084 ms]
Found 14 outliers among 100 measurements (14.00%)
  5 (5.00%) high mild
  9 (9.00%) high severe
block target estimation/contract/retd contract 29629
                        time:   [12.412 ms 12.426 ms 12.441 ms]
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) high mild
  5 (5.00%) high severe
block target estimation/contract/retd contract 44444
                        time:   [12.774 ms 12.795 ms 12.821 ms]
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) high mild
  5 (5.00%) high severe
block target estimation/contract/retd contract 66666
                        time:   [13.540 ms 13.578 ms 13.620 ms]
Found 14 outliers among 100 measurements (14.00%)
  14 (14.00%) high severe
block target estimation/contract/retd contract 100000
                        time:   [13.845 ms 13.928 ms 14.064 ms]
Found 12 outliers among 100 measurements (12.00%)
  3 (3.00%) high mild
  9 (9.00%) high severe
block target estimation/contract/smo 1
                        time:   [4.0557 ms 4.0588 ms 4.0622 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/smo 10
                        time:   [4.0559 ms 4.0577 ms 4.0600 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/contract/smo 100
                        time:   [4.0820 ms 4.0846 ms 4.0878 ms]
Found 5 outliers among 100 measurements (5.00%)
  3 (3.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/smo 1000
                        time:   [4.2952 ms 4.2985 ms 4.3022 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/smo 10000
                        time:   [5.4749 ms 5.4791 ms 5.4838 ms]
Found 11 outliers among 100 measurements (11.00%)
  7 (7.00%) high mild
  4 (4.00%) high severe
block target estimation/contract/smo 19753
                        time:   [6.7946 ms 6.8023 ms 6.8104 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/contract/smo 29629
                        time:   [7.8377 ms 7.8477 ms 7.8587 ms]
Found 10 outliers among 100 measurements (10.00%)
  5 (5.00%) high mild
  5 (5.00%) high severe
block target estimation/contract/smo 44444
                        time:   [9.3712 ms 9.3769 ms 9.3832 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/smo 66666
                        time:   [10.317 ms 10.330 ms 10.344 ms]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) high mild
  3 (3.00%) high severe
block target estimation/contract/smo 100000
                        time:   [12.632 ms 12.656 ms 12.683 ms]
Found 14 outliers among 100 measurements (14.00%)
  6 (6.00%) high mild
  8 (8.00%) high severe
block target estimation/contract/scwq
                        time:   [9.6125 ms 9.6174 ms 9.6225 ms]
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/srw
                        time:   [14.407 ms 14.419 ms 14.432 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/contract/srwq
                        time:   [10.444 ms 10.459 ms 10.474 ms]
block target estimation/contract/sww
                        time:   [14.331 ms 14.350 ms 14.371 ms]
Found 7 outliers among 100 measurements (7.00%)
  5 (5.00%) high mild
  2 (2.00%) high severe
block target estimation/contract/swwq
                        time:   [9.9269 ms 9.9506 ms 9.9751 ms]
block target estimation/contract/time
                        time:   [18.068 ms 18.139 ms 18.211 ms]
block target estimation/contract/tr
                        time:   [11.496 ms 11.504 ms 11.514 ms]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
block target estimation/crypto/eck1 opcode valid
                        time:   [13.152 ms 13.174 ms 13.217 ms]
Found 6 outliers among 100 measurements (6.00%)
  5 (5.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/eck1 opcode invalid
                        time:   [12.769 ms 12.771 ms 12.773 ms]
block target estimation/crypto/ecr1 opcode
                        time:   [12.824 ms 12.828 ms 12.831 ms]
Found 10 outliers among 100 measurements (10.00%)
  6 (6.00%) high mild
  4 (4.00%) high severe
block target estimation/crypto/ed19 opcode
                        time:   [12.547 ms 12.557 ms 12.567 ms]
block target estimation/crypto/s256 opcode 1
                        time:   [8.4254 ms 8.4271 ms 8.4289 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/s256 opcode 10
                        time:   [8.0225 ms 8.0236 ms 8.0246 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) low mild
block target estimation/crypto/s256 opcode 100
                        time:   [8.9452 ms 8.9465 ms 8.9477 ms]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low mild
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/s256 opcode 1000
                        time:   [13.293 ms 13.294 ms 13.296 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe
block target estimation/crypto/s256 opcode 10000
                        time:   [14.147 ms 14.148 ms 14.150 ms]
Found 6 outliers among 100 measurements (6.00%)
  6 (6.00%) high mild
block target estimation/crypto/s256 opcode 19753
                        time:   [14.330 ms 14.332 ms 14.333 ms]
block target estimation/crypto/s256 opcode 29629
                        time:   [14.301 ms 14.310 ms 14.319 ms]
block target estimation/crypto/s256 opcode 44444
                        time:   [14.075 ms 14.084 ms 14.094 ms]
Found 15 outliers among 100 measurements (15.00%)
  5 (5.00%) high mild
  10 (10.00%) high severe
block target estimation/crypto/s256 opcode 66666
                        time:   [14.058 ms 14.059 ms 14.061 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/crypto/s256 opcode 100000
                        time:   [13.725 ms 13.726 ms 13.727 ms]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/k256 opcode 1
                        time:   [2.5765 ms 2.5773 ms 2.5781 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/crypto/k256 opcode 10
                        time:   [2.5023 ms 2.5035 ms 2.5049 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/crypto/k256 opcode 100
                        time:   [2.3500 ms 2.3509 ms 2.3519 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/crypto/k256 opcode 1000
                        time:   [7.1711 ms 7.1719 ms 7.1727 ms]
block target estimation/crypto/k256 opcode 10000
                        time:   [10.831 ms 10.832 ms 10.833 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/k256 opcode 19753
                        time:   [11.256 ms 11.259 ms 11.263 ms]
Found 12 outliers among 100 measurements (12.00%)
  9 (9.00%) high mild
  3 (3.00%) high severe
block target estimation/crypto/k256 opcode 29629
                        time:   [11.439 ms 11.446 ms 11.454 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/crypto/k256 opcode 44444
                        time:   [11.339 ms 11.342 ms 11.349 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/crypto/k256 opcode 66666
                        time:   [11.263 ms 11.264 ms 11.265 ms]
Found 5 outliers among 100 measurements (5.00%)
  3 (3.00%) high mild
  2 (2.00%) high severe
block target estimation/crypto/k256 opcode 100000
                        time:   [11.267 ms 11.269 ms 11.270 ms]
block target estimation/flow/jmp opcode
                        time:   [8.9692 ms 8.9732 ms 8.9776 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high severe
block target estimation/flow/ji opcode
                        time:   [9.1226 ms 9.1274 ms 9.1322 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/flow/jne opcode
                        time:   [9.7172 ms 9.7191 ms 9.7210 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/flow/jnei opcode
                        time:   [10.104 ms 10.107 ms 10.112 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/flow/jnzi opcode
                        time:   [9.6479 ms 9.6538 ms 9.6595 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) low mild
block target estimation/flow/jmpb opcode
                        time:   [11.934 ms 11.936 ms 11.938 ms]
block target estimation/flow/jmpf opcode
                        time:   [9.7299 ms 9.7346 ms 9.7392 ms]
block target estimation/flow/jnzb opcode true
                        time:   [11.848 ms 11.856 ms 11.864 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/flow/jnzb opcode false
                        time:   [9.3918 ms 9.3952 ms 9.3987 ms]
Found 3 outliers among 100 measurements (3.00%)
  3 (3.00%) high mild
block target estimation/flow/jnzf opcode true
                        time:   [9.9209 ms 9.9265 ms 9.9325 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/flow/jnzf opcode false
                        time:   [9.5127 ms 9.5160 ms 9.5193 ms]
block target estimation/flow/jneb opcode not equal
                        time:   [12.017 ms 12.019 ms 12.022 ms]
block target estimation/flow/jneb opcode equal
                        time:   [9.5211 ms 9.5248 ms 9.5287 ms]
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
block target estimation/flow/jnef opcode not equal
                        time:   [10.129 ms 10.140 ms 10.151 ms]
block target estimation/flow/jnef opcode equal
                        time:   [9.8118 ms 9.8208 ms 9.8304 ms]
Found 3 outliers among 100 measurements (3.00%)
  2 (2.00%) high mild
  1 (1.00%) high severe
block target estimation/memory/aloc opcode
                        time:   [11.770 ms 11.774 ms 11.777 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/cfe opcode
                        time:   [9.1840 ms 9.1864 ms 9.1891 ms]
Found 7 outliers among 100 measurements (7.00%)
  1 (1.00%) high mild
  6 (6.00%) high severe
block target estimation/memory/cfei opcode
                        time:   [9.3726 ms 9.3772 ms 9.3817 ms]
block target estimation/memory/cfs opcode
                        time:   [9.0976 ms 9.1015 ms 9.1056 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/memory/cfsi opcode
                        time:   [9.2230 ms 9.2273 ms 9.2315 ms]
block target estimation/memory/lb opcode
                        time:   [9.8459 ms 9.8505 ms 9.8551 ms]
block target estimation/memory/lw opcode
                        time:   [9.6474 ms 9.6530 ms 9.6586 ms]
block target estimation/memory/mcl opcode 1
                        time:   [9.3634 ms 9.3697 ms 9.3760 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/mcl opcode 10
                        time:   [9.3658 ms 9.3717 ms 9.3781 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/memory/mcl opcode 100
                        time:   [9.5097 ms 9.5158 ms 9.5220 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/mcl opcode 1000
                        time:   [8.8797 ms 8.8867 ms 8.8937 ms]
block target estimation/memory/mcl opcode 10000
                        time:   [4.4818 ms 4.4983 ms 4.5168 ms]
Found 14 outliers among 100 measurements (14.00%)
  14 (14.00%) high severe
block target estimation/memory/mcl opcode 19753
                        time:   [3.8409 ms 3.8494 ms 3.8587 ms]
Found 21 outliers among 100 measurements (21.00%)
  21 (21.00%) high severe
block target estimation/memory/mcl opcode 29629
                        time:   [4.1930 ms 4.2085 ms 4.2242 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) low mild
  2 (2.00%) high mild
block target estimation/memory/mcl opcode 44444
                        time:   [16.682 ms 16.710 ms 16.736 ms]
Found 7 outliers among 100 measurements (7.00%)
  2 (2.00%) low severe
  4 (4.00%) low mild
  1 (1.00%) high mild
block target estimation/memory/mcl opcode 66666
                        time:   [17.236 ms 17.254 ms 17.272 ms]
block target estimation/memory/mcl opcode 100000
                        time:   [17.302 ms 17.317 ms 17.332 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) low mild
block target estimation/memory/mcli opcode 1
                        time:   [9.7608 ms 9.7680 ms 9.7755 ms]
Found 7 outliers among 100 measurements (7.00%)
  7 (7.00%) high mild
block target estimation/memory/mcli opcode 10
                        time:   [9.7623 ms 9.7687 ms 9.7750 ms]
block target estimation/memory/mcli opcode 100
                        time:   [9.9050 ms 9.9104 ms 9.9158 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) low mild
block target estimation/memory/mcli opcode 1000
                        time:   [9.1599 ms 9.1643 ms 9.1687 ms]
Found 2 outliers among 100 measurements (2.00%)
block target estimation/memory/mcli opcode 10000
                        time:   [4.5411 ms 4.5592 ms 4.5793 ms]
Found 19 outliers among 100 measurements (19.00%)
  19 (19.00%) high severe
block target estimation/memory/mcli opcode 19753
                        time:   [3.8650 ms 3.8722 ms 3.8804 ms]
Found 13 outliers among 100 measurements (13.00%)
  13 (13.00%) high severe
block target estimation/memory/mcli opcode 29629
                        time:   [4.2024 ms 4.2190 ms 4.2360 ms]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) low mild
  3 (3.00%) high mild
block target estimation/memory/mcli opcode 44444
                        time:   [16.658 ms 16.682 ms 16.706 ms]
Found 5 outliers among 100 measurements (5.00%)
  5 (5.00%) low mild
block target estimation/memory/mcli opcode 66666
                        time:   [17.086 ms 17.109 ms 17.131 ms]
block target estimation/memory/mcli opcode 100000
                        time:   [17.161 ms 17.184 ms 17.204 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low severe
  1 (1.00%) low mild
block target estimation/memory/mcp opcode 1
                        time:   [10.747 ms 10.753 ms 10.759 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
block target estimation/memory/mcp opcode 10
                        time:   [13.700 ms 13.796 ms 13.888 ms]
block target estimation/memory/mcp opcode 100
                        time:   [10.823 ms 10.827 ms 10.831 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/mcp opcode 1000
                        time:   [9.3348 ms 9.3424 ms 9.3496 ms]
Found 20 outliers among 100 measurements (20.00%)
  7 (7.00%) low severe
  13 (13.00%) low mild
block target estimation/memory/mcp opcode 10000
                        time:   [4.8455 ms 4.8584 ms 4.8724 ms]
Found 19 outliers among 100 measurements (19.00%)
  1 (1.00%) high mild
  18 (18.00%) high severe
block target estimation/memory/mcp opcode 19753
                        time:   [7.9587 ms 8.0265 ms 8.0958 ms]
block target estimation/memory/mcp opcode 29629
                        time:   [12.008 ms 12.062 ms 12.117 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/mcp opcode 44444
                        time:   [13.496 ms 13.530 ms 13.565 ms]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) low mild
  2 (2.00%) high mild
block target estimation/memory/mcp opcode 66666
                        time:   [13.804 ms 13.832 ms 13.862 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/mcp opcode 100000
                        time:   [14.387 ms 14.403 ms 14.418 ms]
block target estimation/memory/mcpi opcode 1
                        time:   [6.1408 ms 6.1435 ms 6.1461 ms]
block target estimation/memory/mcpi opcode 10
                        time:   [6.0755 ms 6.0782 ms 6.0809 ms]
block target estimation/memory/mcpi opcode 100
                        time:   [6.1801 ms 6.1830 ms 6.1858 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/memory/mcpi opcode 1000
                        time:   [6.5631 ms 6.5680 ms 6.5730 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/memory/meq opcode 1
                        time:   [3.8795 ms 3.8817 ms 3.8840 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/meq opcode 10
                        time:   [3.8807 ms 3.8826 ms 3.8847 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
block target estimation/memory/meq opcode 100
                        time:   [4.0896 ms 4.0973 ms 4.1053 ms]
block target estimation/memory/meq opcode 1000
                        time:   [4.6467 ms 4.6492 ms 4.6518 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/meq opcode 10000
                        time:   [6.6958 ms 6.6987 ms 6.7017 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/meq opcode 19753
                        time:   [8.0908 ms 8.0932 ms 8.0959 ms]
Found 3 outliers among 100 measurements (3.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/memory/meq opcode 29629
                        time:   [8.6435 ms 8.6452 ms 8.6469 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/meq opcode 44444
                        time:   [9.2329 ms 9.2343 ms 9.2356 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/memory/meq opcode 66666
                        time:   [9.8002 ms 9.8039 ms 9.8079 ms]
Found 6 outliers among 100 measurements (6.00%)
  5 (5.00%) high mild
  1 (1.00%) high severe
block target estimation/memory/meq opcode 100000
                        time:   [9.8857 ms 9.8873 ms 9.8889 ms]
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
block target estimation/memory/poph opcode
                        time:   [11.540 ms 11.544 ms 11.548 ms]
Found 1 outliers among 100 measurements (1.00%)
block target estimation/memory/popl opcode
                        time:   [11.421 ms 11.427 ms 11.432 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/memory/pshh opcode
                        time:   [23.152 ms 23.207 ms 23.265 ms]
Found 5 outliers among 100 measurements (5.00%)
  5 (5.00%) high mild
block target estimation/memory/pshl opcode
                        time:   [23.349 ms 23.420 ms 23.495 ms]
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
block target estimation/memory/sb opcode
                        time:   [10.116 ms 10.121 ms 10.125 ms]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
block target estimation/memory/sw opcode
                        time:   [9.8993 ms 9.9080 ms 9.9194 ms]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
block target estimation/other/flag
                        time:   [11.780 ms 11.786 ms 11.791 ms]
block target estimation/other/gm
                        time:   [3.6017 ms 3.6035 ms 3.6053 ms]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
block target estimation/other/gtf
                        time:   [26.514 ms 26.558 ms 26.613 ms]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) low mild
  3 (3.00%) high severe",3,0
1508,2023-11-23T09:33:20Z,,2023-12-04T17:54:17Z,22,3,21,Closes #1493,3,3
1512,2023-11-23T19:35:17Z,2023-11-23T21:28:09Z,2023-11-23T21:28:09Z,6,17,49,Closes #1510,2,0
1513,2023-11-23T21:31:47Z,2023-11-24T01:51:11Z,2023-11-24T01:51:11Z,8,505,517,"Version 0.21.0
This release focuses on preparing fuel-core for the mainnet environment:

Most of the changes improved the security and stability of the node.
The gas model was reworked to cover all aspects of execution.
The benchmarking system was significantly enhanced, covering worst scenarios.
A new set of benchmarks was added to track the accuracy of gas prices.
Optimized heavy operations and removed/replaced exploitable functionality.

Besides that, there are more concrete changes:

Unified naming conventions for all CLI arguments. Added dependencies between related fields to avoid misconfiguration in case of missing arguments. Added --debug flag that enables additional functionality like a debugger.
Improved telemetry to cover the internal work of services and added support for the Pyroscope, allowing it to generate real-time flamegraphs to track performance.
Improved stability of the P2P layer and adjusted the updating of reputation. The speed of block synchronization was significantly increased.
The node is more stable and resilient. Improved DoS resistance and resource management. Fixed critical bugs during state transition.
Reworked the Mint transaction to accumulate the fee from block production inside the contract defined by the block producer.

FuelVM received a lot of safety and stability improvements:

The audit helped identify some bugs and errors that have been successfully fixed.
Updated the gas price model to charge for resources used during the transaction lifecycle.
Added no_std and 32 bit system support. This opens doors for fraud proving in the future.
Removed the ChainId from the PredicateId calculation, allowing the use of predicates cross-chain.
Improvements in the performance of some storage-related opcodes.
Support the ECAL instruction that allows adding custom functionality to the VM. It can be used to create unique rollups or advanced indexers in the future.
Support of transaction policies provides additional safety for the user.
It also allows the implementation of a multi-dimensional price model in the future, making the transaction execution cheaper and allowing more transactions that don't affect storage.
Refactored errors, returning more detailed errors to the user, simplifying debugging.

Added

#1503: Add gtf opcode sanity check.
#1502: Added price benchmark for vm_initialization.
#1501: Add a CLI command for generating a fee collection contract.
#1492: Support backward iteration in the RocksDB. It allows backward queries that were not allowed before.
#1490: Add push and pop benchmarks.
#1485: Prepare rc release of fuel core v0.21
#1476: Add the majority of the ""other"" benchmarks for contract opcodes.
#1473: Expose fuel-core version as a constant
#1469: Added support of bloom filter for RocksDB tables and increased the block cache.
#1465: Improvements for keygen cli and crates
#1642: Added benchmark to measure the performance of contract state and contract ID calculation; use for gas costing.
#1457: Fixing incorrect measurement for fast(µs) opcodes.
#1456: Added flushing of the RocksDB during a graceful shutdown.
#1456: Added more logs to track the service lifecycle.
#1453: Add the majority of the ""sanity"" benchmarks for contract opcodes.
#1452: Added benchmark to measure the performance of contract root calculation when utilizing the maximum contract size; used for gas costing of contract root during predicate owner validation.
#1449: Fix coin pagination in e2e test client.
#1447: Add timeout for continuous e2e tests
#1444: Add ""sanity"" benchmarks for memory opcodes.
#1437: Add some transaction throughput tests for basic transfers.
#1436: Add a github action to continuously test beta-4.
#1433: Add ""sanity"" benchmarks for flow opcodes.
#1432: Add a new --api-request-timeout argument to control TTL for GraphQL requests.
#1430: Add ""sanity"" benchmarks for crypto opcodes.
#1426 Split keygen into a create and a binary.
#1419: Add additional ""sanity"" benchmarks for arithmetic op code instructions.
#1411: Added WASM and no_std compatibility.
#1405: Use correct names for service metrics.
#1400: Add releasy beta to fuel-core so that new commits to fuel-core master triggers fuels-rs.
#1371: Add new client function for querying the MessageStatus for a specific message (by Nonce).
#1356: Add peer reputation reporting to heartbeat code.
#1355: Added new metrics related to block importing, such as tps, sync delays etc.
#1339: Adds baseAssetId to FeeParameters in the GraphQL API.
#1331: Add peer reputation reporting to block import code.
#1324: Added pyroscope profiling to fuel-core, intended to be used by a secondary docker image that has debug symbols enabled.
#1309: Add documentation for running debug builds with CLion and Visual Studio Code.
#1308: Add support for loading .env files when compiling with the env feature. This allows users to conveniently supply CLI arguments in a secure and IDE-agnostic way.
#1304: Implemented submit_and_await_commit_with_receipts method for FuelClient.
#1286: Include readable names for test cases where missing.
#1274: Added tests to benchmark block synchronization.
#1263: Add gas benchmarks for ED19 and ECR1 instructions.

Changed

#1512: Internally simplify merkle_contract_state_range.
#1507: Updated chain configuration to be ready for beta 5 network. It includes opcode prices from the latest benchmark and contract for the block producer.
#1477: Upgraded the Rust version used in CI and containers to 1.73.0. Also includes associated Clippy changes.
#1469: Replaced usage of MemoryTransactionView by Checkpoint database in the benchmarks.
#1468: Bumped version of the fuel-vm to v0.40.0. It brings some breaking changes into consensus parameters API because of changes in the underlying types.
#1466: Handling overflows during arithmetic operations.
#1460: Change tracking branch from main to master for releasy tests.
#1454: Update gas benchmarks for opcodes that append receipts.
#1440: Don't report reserved nodes that send invalid transactions.
#1439: Reduced memory BMT consumption during creation of the header.
#1434: Continue gossiping transactions to reserved peers regardless of gossiping reputation score.
#1408: Update gas benchmarks for storage opcodes to use a pre-populated database to get more accurate worst-case costs.
#1399: The Relayer now queries Ethereum for its latest finalized block instead of using a configurable ""finalization period"" to presume finality.
#1397: Improved keygen. Created a crate to be included from forc plugins and upgraded internal library to drop requirement of protoc to build
#1395: Add DependentCost benchmarks for k256, s256 and mcpi instructions.
#1393: Increase heartbeat timeout from 2 to 60 seconds, as suggested in this issue.
#1392: Fixed an overflow in message_proof.
#1390: Up the ethers version to 2 to fix an issue with tungstenite.
#1383: Disallow usage of log crate internally in favor of tracing crate.
#1380: Add preliminary, hard-coded config values for heartbeat peer reputation, removing todo.
#1377: Remove DiscoveryEvent and use KademliaEvent directly in DiscoveryBehavior.
#1366: Improve caching during docker builds in CI by replacing gha
#1358: Upgraded the Rust version used in CI to 1.72.0. Also includes associated Clippy changes.
#1349: Updated peer-to-peer transactions API to support multiple blocks in a single request, and updated block synchronization to request multiple blocks based on the configured range of headers.
#1342: Add error handling for P2P requests to return None to requester and log error.
#1318: Modified block synchronization to use asynchronous task execution when retrieving block headers.
#1314: Removed types::ConsensusParameters in favour of fuel_tx:ConsensusParameters.
#1302: Removed the usage of flake and building of the bridge contract ABI.
It simplifies the maintenance and updating of the events, requiring only putting the event definition into the codebase of the relayer.
#1293: Parallelized the estimate_predicates endpoint to utilize all available threads.
#1270: Modify the way block headers are retrieved from peers to be done in batches.

Breaking

#1506: Added validation of the coin's fields during block production and validation. Before, it was possible to submit a transaction that didn't match the coin's values in the database, allowing printing/using unavailable assets.
#1491: Removed unused request and response variants from the Gossipsub implementation, as well as related definitions and tests. Specifically, this removes gossiping of ConsensusVote and NewBlock events.
#1472: Upgraded fuel-vm to v0.42.0. It introduces transaction policies that changes layout of the transaction. FOr more information check the v0.42.0 release.
#1470: Divide DependentCost into ""light"" and ""heavy"" operations.
#1464: Avoid possible truncation of higher bits. It may invalidate the code that truncated higher bits causing different behavior on 32-bit vs. 64-bit systems. The change affects some endpoints that now require lesser integers.
#1432: All subscriptions and requests have a TTL now. So each subscription lifecycle is limited in time. If the subscription is closed because of TTL, it means that you subscribed after your transaction had been dropped by the network.
#1407: The recipient is a ContractId instead of Address. The block producer should deploy its contract to receive the transaction fee. The collected fee is zero until the recipient contract is set.
#1407: The Mint transaction is reworked with new fields to support the account-base model. It affects serialization and deserialization of the transaction and also affects GraphQL schema.
#1407: The Mint transaction is the last transaction in the block instead of the first.
#1374: Renamed base_chain_height to da_height and return current relayer height instead of latest Fuel block height.
#1367: Update to the latest version of fuel-vm.
#1363: Change message_proof api to take nonce instead of message_id
#1355: Removed the metrics feature flag from the fuel-core crate, and metrics are now included by default.
#1339: Added a new required field called base_asset_id to the FeeParameters definition in ConsensusParameters, as well as default values for base_asset_id in the beta and dev chain specifications.
#1322:
The debug flag is added to the CLI. The flag should be used for local development only. Enabling debug mode:
- Allows GraphQL Endpoints to arbitrarily advance blocks.
- Enables debugger GraphQL Endpoints.
- Allows setting utxo_validation to false.
#1318: Removed the --sync-max-header-batch-requests CLI argument, and renamed --sync-max-get-txns to --sync-block-stream-buffer-size to better represent the current behavior in the import.
#1290: Standardize CLI args to use - instead of _.
#1279: Added a new CLI flag to enable the Relayer service --enable-relayer, and disabled the Relayer service by default. When supplying the --enable-relayer flag, the --relayer argument becomes mandatory, and omitting it is an error. Similarly, providing a --relayer argument without the --enable-relayer flag is an error. Lastly, providing the --keypair or --network arguments will also produce an error if the --enable-p2p flag is not set.
#1262: The ConsensusParameters aggregates all configuration data related to the consensus. It contains many fields that are segregated by the usage. The API of some functions was affected to use lesser types instead the whole ConsensusParameters. It is a huge breaking change requiring repetitively monotonically updating all places that use the ConsensusParameters. But during updating, consider that maybe you can use lesser types. Usage of them may simplify signatures of methods and make them more user-friendly and transparent.

Removed
Breaking

#1484: Removed --network CLI argument. Now the name of the network is fetched form chain configuration.
#1399: Removed relayer-da-finalization parameter from the relayer CLI.
#1338: Updated GraphQL client to use DependentCost for k256, mcpi, s256, scwq, swwq opcodes.
#1322: The manual_blocks_enabled flag is removed from the CLI. The analog is a debug flag.

What's Changed

Added changelog in the same way as we did for fuel-vm by @xgreenx in #1287
Decompose consensus params struct by @MitchTurner in #1262
Replace all instances of _ in CLI long arguments with - by @MitchTurner in #1290
[rpc] Parallelise estimate_predicates endpoint by @YusongWang in #1293
Add readable test names to test cases by @MitchTurner in #1286
ED19 and ECR1 benchmarks by @Dentosal in #1263
feat: Add enable-relayer flag to fuel-core CLI by @bvrooman in #1279
Small nits found during deploying and benchmarking by @xgreenx in #1303
Implemented submit_and_await_commit_with_receipts method by @xgreenx in #1304
Removed the usage of flake and building of the bridge contract ABI by @xgreenx in #1302
Download range of headers during syncing by @MitchTurner in #1270
feat: Enable .env file loading using env feature by @bvrooman in #1308
chore: Remove types::ConsensusParameters by @bvrooman in #1314
docs: Debugging instructions using IDEs by @bvrooman in #1309
test: Block Import benchmarks and test helpers by @bvrooman in #1274
Fix audit CI for webpki by @xgreenx in #1319
chore: Single buffer block sync by @bvrooman in #1318
Run unit tests without default features only for specific crates by @xgreenx in #1321
Added support for debug CLI flag. by @xgreenx in #1322
Report Peers that give bad Block Info by @MitchTurner in #1331
Pyroscope profiling by @Voxelot in #1324
Add error handling for P2P requests to return None to requester and log error by @MitchTurner in #1342
Importer Metrics by @Voxelot in #1355
chore: Upgrade to Rust 1.72.0 in CI by @bvrooman in #1358
chore: Upgrade fuel-vm to 0.37.0 by @bvrooman in #1338
docs: remove stale schema by @calldelegation in #1362
Replace message_id with nonce in MessageProof query by @MitchTurner in #1363
feat: Configurable base asset by @bvrooman in #1339
avoid gha caching for docker builds by @Voxelot in #1366
Add tracking for peer heartbeats by @MitchTurner in #1356
docs: fix broken link in README by @PaulRBerg in #1357
Use right level of error for .env file and duplicated service by @xgreenx in #1372
Add query and handling for MessageStatus by @MitchTurner in #1371
Renamed base_chain_height to da_height and return current relayer height instead of latest Fuel block height by @xgreenx in #1374
Remove DiscoveryEvent and use KademliaEvent instead by @MitchTurner in #1377
Remove todo from code and provide some preliminary peer review config values by @MitchTurner in #1380
Clippy lint to disallow logging crate macros in favor of tracing by @Dentosal in #1383
fuel-vm nostd update by @Dentosal in #1367
Up the ethers version to 2 to fix an issue with tungstenite by @xgreenx in #1390
Increase heartbeat timeout to one minute by @Dentosal in #1393
feat: batch transactions import by @bvrooman in #1349
Fix an interger overflow in message_proof when looking beyond genesis by @Dentosal in #1392
Improve keygen by @cr-fuel in #1397
Benchmark {k256, s256, mcpi} opcodes using DependentCost by @Dentosal in #1395
Use correct names for service metrics by @xgreenx in #1405
feat: Retrieve finalized blocks from Ethereum by @bvrooman in #1399
Updated CI to run cargo update weekly by @xgreenx in #1415
CI cargo update weekly by @xgreenx in #1416
Weekly cargo update by @github-actions in #1417
Fix typos by @GoodDaisy in #1424
feat: Support no_std and WASM compilation for fuel-core crates by @bvrooman in #1411
Create sanity benchmark checks for all the arithmetic op codes by @MitchTurner in #1419
Update benchmarking and collecting for scwq, swwq and srwq opcodes by @xgreenx in #1427
Account-base fee collection by @xgreenx in #1407
Rollback modification of the chain specification by @xgreenx in #1429
Tx subscription cleanup (#1422) by @xgreenx in #1432
Mark reserved peers as explicit for gossipsub to avoid reputation decreasing (#1423) by @xgreenx in #1434
Weekly cargo update by @github-actions in #1438
ci: add beta releasy to fuel-core by @kayagokalp in #1400
setup a cron job to test beta-4 continuously by @Voxelot in #1436
chore: Use MerkleRootCalculator when only BMT root is needed by @bvrooman in #1439
Crypto op code sanity checks by @MitchTurner in #1430
Update gas benchmarks for some storage opcodes by @Dentosal in #1408
Split keygen into a create and a binary by @cr-fuel in #1426
Basic Transfer TPS Benchmarking by @Voxelot in #1437
""flow"" op code sanity benchmarks by @MitchTurner in #1433
Applying #1435 to master by @xgreenx in #1440
""memory"" opcode sanity checks by @MitchTurner in #1444
Add timeout to E2E test by @Voxelot in #1447
fix owns_coins to properly paginate by @Voxelot in #1449
Fixing incorrect measurement for fast(µs) opcodes by @xgreenx in #1457
Call flush during end of the FuelService by @xgreenx in #1456
chore: fix releasy test tracking branch from main to master by @kayagokalp in #1460
Weekly cargo update by @github-actions in #1461
DB::repair breaks the table for checkpoints by @xgreenx in #1463
Avoid possible truncation of higher bits by @xgreenx in #1464
Bumping fuel-vm to v0.40.0 by @xgreenx in #1468
Improvements for keygen cli and crates by @cr-fuel in #1465
Handling overflows during arithmetic operations by @xgreenx in #1466
test: Add contract code root benchmark by @bvrooman in #1452
test: Add state root and contract id benchmarks by @bvrooman in #1462
Avoid storage caching in benchmarks by @xgreenx in #1469
Weekly cargo update by @github-actions in #1471
Expose fuel-core version as a constant by @Br1ght0ne in #1473
Upgrade ed25519_dalek 1.0.1 -> 2.0.0 by @Dentosal in #1475
chore: Upgrade Rust 1.73 by @bvrooman in #1477
Decrease number of iterations for sequential benchmarks by @xgreenx in #1480
Add mldv bench by @Dentosal in #1481
feat: Separate light and heavy gas costs (core) by @bvrooman in #1483
chore: Remove network parameter from CLI by @bvrooman in #1484
Transaction policies support by @xgreenx in #1472
stage release candidate for beta-5 by @Voxelot in #1485
setup docker auth for binary publishing by @Voxelot in #1488
Fix macos binary publishing by @xgreenx in #1489
Add documentation for our calculation of a reasonable gas fee for storage by @MitchTurner in #1478
""contract"" op code sanity checks by @MitchTurner in #1453
""other"" op code sanity check by @MitchTurner in #1476
Add push and pop benches by @MitchTurner in #1490
chore: Remove unused gossipsub items by @bvrooman in #1491
Adjusting of the prices benchmarks after sanity check benchmarks by @xgreenx in #1494
Weekly cargo update by @github-actions in #1498
Update benches that are affected by receipts by @Dentosal in #1454
Support backward iteration in the RocksDB by @xgreenx in #1492
Added validation of the coin's fields during block production and validation by @xgreenx in #1506
Added price benchmark for vm_initialization by @xgreenx in #1502
Sanity-check gtf opcode by @MitchTurner in #1503
Tool for generating fee collection contract by @Voxelot in #1501
Chain config for beta 5 network by @xgreenx in #1507
Remove usage of iter_all_filtered from merkle_contract_state_range by @Dentosal in #1512

New Contributors

@YusongWang made their first contribution in #1293
@calldelegation made their first contribution in #1362
@PaulRBerg made their first contribution in #1357
@cr-fuel made their first contribution in #1397
@github-actions made their first contribution in #1417
@GoodDaisy made their first contribution in #1424

Full Changelog: v0.20.8...v0.21.0",2,0
1516,2023-11-24T17:16:16Z,2023-12-01T14:43:33Z,2023-12-01T14:43:33Z,20,705,527,"The snapshot command will now iterate over the chain state and write it in batches to parquet files or JSON, depending on the CLI parameter passed.
The state and balances are still present in ContractConfig. They will be removed when we finish the snapshot reading part.",3,1
1517,2023-11-25T00:41:01Z,2023-11-28T10:58:16Z,2023-11-28T10:58:16Z,2,9,4,"Related issues:

Closes #1455",2,1
1518,2023-11-26T00:16:09Z,2023-11-27T17:08:20Z,2023-11-27T17:08:20Z,1,80,21,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m async-io v2.2.0 -> v2.2.1
�[0m�[0m�[1m�[32m    Updating�[0m async-lock v3.1.1 -> v3.1.2
�[0m�[0m�[1m�[32m    Updating�[0m event-listener v3.1.0 -> v4.0.0
�[0m�[0m�[1m�[32m    Updating�[0m event-listener-strategy v0.3.0 -> v0.4.0
�[0m�[0m�[1m�[32m    Updating�[0m gimli v0.28.0 -> v0.28.1
�[0m�[0m�[1m�[32m    Updating�[0m polling v3.3.0 -> v3.3.1
�[0m�[0m�[1m�[31m    Removing�[0m waker-fn v1.1.1
�[0m�[0m�[1m�[36m      Adding�[0m windows-sys v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows-targets v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_aarch64_gnullvm v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_aarch64_msvc v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_i686_gnu v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_i686_msvc v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_x86_64_gnu v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_x86_64_gnullvm v0.52.0
�[0m�[0m�[1m�[36m      Adding�[0m windows_x86_64_msvc v0.52.0",1,0
1519,2023-11-27T15:29:53Z,2024-02-21T13:32:16Z,2024-02-21T13:32:16Z,110,152812,119751,"Relevant issue: #1209
Relevant previous PRs: #1474
This PR builds upon the previous work by introducing a resumable, parallelized (re)genesis process.
Starting with the run command, users provide a snapshot metadata file containing paths to the chain config file and files containing chain state items (such as coins, messages, contracts, contract states, and balances), which are loaded via streaming.
Each item group in the genesis process is handled by a separate worker, allowing for parallel loading. Workers stream file contents in batches, with the batch size adaptable for future performance optimization.
A database transaction is committed every time an item group is succesfully loaded. Resumability is achieved by recording the last loaded group index within the same db tx. If loading is aborted, the remaining workers are shutdown. Upon restart, workers resume from the last processed group.
Database tables used for the genesis process are cleared once it's finalized.
Contract States and Balances
The use of uniform-sized batches may result in batches containing items from multiple contracts. We expect that best performance is achieved by selecting a batch size that typically encompasses an entire contract's state or balance, allowing for immediate initialization of relevant Merkle trees through nodes_from_set.
Note:

The significant diff count primarily arises from configuring and updating the test contract with a large state.
The most significant changes start from the genesis.rs, so it might be a good entry point for the review. Analysing how workers process the batches will guide you through the majority of the changes. Coin and message configs are simply loaded into the db, contract configs are loaded but the contracts tree root cannot be calculated until the contract states and balances workers are finished.
When inserting contract states and balances, we also have to init/update the corresponding trees.",4,1
1520,2023-11-27T16:45:34Z,2023-12-04T17:57:17Z,2023-12-04T17:57:17Z,29,2845,2548,This PR moves the existing executor module into this separate crate.,3,1
1524,2023-12-01T23:16:45Z,2023-12-11T19:46:02Z,2023-12-11T19:46:02Z,17,348,14,"closes: #649
Show information about connected peers that may be useful for debugging purposes via the gql api.
Note: in the future it may make sense to protect this API with a special authentication token.",2,1
1525,2023-12-03T00:16:07Z,2023-12-03T11:23:48Z,2023-12-03T11:23:48Z,1,98,98,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m async-lock v3.1.2 -> v3.2.0
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.8 -> v4.4.10
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.8 -> v4.4.9
�[0m�[0m�[1m�[32m    Updating�[0m concurrent-queue v2.3.0 -> v2.4.0
�[0m�[0m�[1m�[32m    Updating�[0m core-foundation v0.9.3 -> v0.9.4
�[0m�[0m�[1m�[32m    Updating�[0m core-foundation-sys v0.8.4 -> v0.8.6
�[0m�[0m�[1m�[32m    Updating�[0m deranged v0.3.9 -> v0.3.10
�[0m�[0m�[1m�[32m    Updating�[0m errno v0.3.7 -> v0.3.8
�[0m�[0m�[1m�[32m    Updating�[0m fuel-asm v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-crypto v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-derive v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-merkle v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-storage v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-tx v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-types v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-vm v0.43.0 -> v0.43.1
�[0m�[0m�[1m�[32m    Updating�[0m futures-lite v2.0.1 -> v2.1.0
�[0m�[0m�[1m�[32m    Updating�[0m hashbrown v0.14.2 -> v0.14.3
�[0m�[0m�[1m�[32m    Updating�[0m js-sys v0.3.65 -> v0.3.66
�[0m�[0m�[1m�[32m    Updating�[0m linux-raw-sys v0.4.11 -> v0.4.12
�[0m�[0m�[1m�[32m    Updating�[0m memmap2 v0.8.0 -> v0.9.0
�[0m�[0m�[1m�[32m    Updating�[0m parity-scale-codec v3.6.5 -> v3.6.9
�[0m�[0m�[1m�[32m    Updating�[0m parity-scale-codec-derive v3.6.5 -> v3.6.9
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro2 v1.0.69 -> v1.0.70
�[0m�[0m�[1m�[32m    Updating�[0m ring v0.17.5 -> v0.17.6
�[0m�[0m�[1m�[32m    Updating�[0m rustix v0.38.25 -> v0.38.26
�[0m�[0m�[1m�[32m    Updating�[0m spki v0.7.2 -> v0.7.3
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-common v12.7.0 -> v12.8.0
�[0m�[0m�[1m�[32m    Updating�[0m symbolic-demangle v12.7.0 -> v12.8.0
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen v0.2.88 -> v0.2.89
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-backend v0.2.88 -> v0.2.89
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-futures v0.4.38 -> v0.4.39
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro v0.2.88 -> v0.2.89
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro-support v0.2.88 -> v0.2.89
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-shared v0.2.88 -> v0.2.89
�[0m�[0m�[1m�[32m    Updating�[0m web-sys v0.3.65 -> v0.3.66
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy v0.7.26 -> v0.7.28
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy-derive v0.7.26 -> v0.7.28",1,0
1526,2023-12-03T04:22:35Z,2023-12-04T10:38:57Z,2023-12-04T10:38:57Z,4,8,8,,4,6
1528,2023-12-03T23:25:00Z,2023-12-04T05:25:28Z,2023-12-04T05:25:28Z,1,1,1,"After the introduction of the limit to the number of requests, CI started to fail sometimes. Increasing the time between runs to avoid spamming.",2,0
1532,2023-12-06T13:33:14Z,2023-12-11T14:58:48Z,2023-12-11T14:58:48Z,8,18,8,Closes #1531,2,0
1534,2023-12-10T00:16:44Z,2023-12-11T14:33:19Z,2023-12-11T14:33:19Z,1,81,91,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anstream v0.6.4 -> v0.6.5
�[0m�[0m�[1m�[32m    Updating�[0m anstyle-parse v0.2.2 -> v0.2.3
�[0m�[0m�[1m�[32m    Updating�[0m anstyle-query v1.0.0 -> v1.0.2
�[0m�[0m�[1m�[32m    Updating�[0m anstyle-wincon v3.0.1 -> v3.0.2
�[0m�[0m�[1m�[32m    Updating�[0m atomic-polyfill v0.1.11 -> v1.0.3
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.10 -> v4.4.11
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.9 -> v4.4.11
�[0m�[0m�[1m�[32m    Updating�[0m eyre v0.6.9 -> v0.6.10
�[0m�[0m�[1m�[32m    Updating�[0m heapless v0.7.16 -> v0.7.17
�[0m�[0m�[1m�[32m    Updating�[0m http-body v0.4.5 -> v0.4.6
�[0m�[0m�[1m�[32m    Updating�[0m itoa v1.0.9 -> v1.0.10
�[0m�[0m�[1m�[32m    Updating�[0m mio v0.8.9 -> v0.8.10
�[0m�[0m�[1m�[32m    Updating�[0m once_cell v1.18.0 -> v1.19.0
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro-crate v2.0.0 -> v2.0.1
�[0m�[0m�[1m�[32m    Updating�[0m ring v0.17.6 -> v0.17.7
�[0m�[0m�[1m�[32m    Updating�[0m rustix v0.38.26 -> v0.38.28
�[0m�[0m�[1m�[32m    Updating�[0m rustls v0.21.9 -> v0.21.10
�[0m�[0m�[1m�[32m    Updating�[0m ryu v1.0.15 -> v1.0.16
�[0m�[0m�[1m�[32m    Updating�[0m tokio v1.34.0 -> v1.35.0
�[0m�[0m�[1m�[33m Downgrading�[0m toml v0.8.8 -> v0.8.2
�[0m�[0m�[1m�[33m Downgrading�[0m toml_datetime v0.6.5 -> v0.6.3
�[0m�[0m�[1m�[31m    Removing�[0m toml_edit v0.20.7
�[0m�[0m�[1m�[31m    Removing�[0m toml_edit v0.21.0
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.20.2
�[0m�[0m�[1m�[32m    Updating�[0m try-lock v0.2.4 -> v0.2.5
�[0m�[0m�[1m�[32m    Updating�[0m unicode-bidi v0.3.13 -> v0.3.14
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.19 -> v0.5.26
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy v0.7.28 -> v0.7.30
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy-derive v0.7.28 -> v0.7.30",1,0
1536,2023-12-11T13:15:33Z,2023-12-11T19:08:04Z,2023-12-11T19:08:04Z,3,100,27,"It was possible to remove the SMT nodes in the foreign contract because it was not prefixed with the ContractId. The caller could use the same storage key/asset ID with exactly the same values to delete the SMT nodes in another contract.
Fixes #1535",3,0
1557,2023-12-17T00:16:38Z,2023-12-17T19:30:57Z,2023-12-17T19:30:57Z,1,61,62,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m const-oid v0.9.5 -> v0.9.6
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-channel v0.5.8 -> v0.5.9
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-deque v0.8.3 -> v0.8.4
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-epoch v0.9.15 -> v0.9.16
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-utils v0.8.16 -> v0.8.17
�[0m�[0m�[1m�[32m    Updating�[0m eyre v0.6.10 -> v0.6.11
�[0m�[0m�[1m�[32m    Updating�[0m hkdf v0.12.3 -> v0.12.4
�[0m�[0m�[1m�[32m    Updating�[0m home v0.5.5 -> v0.5.9
�[0m�[0m�[1m�[32m    Updating�[0m memmap2 v0.9.0 -> v0.9.1
�[0m�[0m�[1m�[32m    Updating�[0m syn v2.0.40 -> v2.0.41
�[0m�[0m�[1m�[32m    Updating�[0m thiserror v1.0.50 -> v1.0.51
�[0m�[0m�[1m�[32m    Updating�[0m thiserror-impl v1.0.50 -> v1.0.51
�[0m�[0m�[1m�[32m    Updating�[0m unsafe-libyaml v0.2.9 -> v0.2.10
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy v0.7.30 -> v0.7.31
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy-derive v0.7.30 -> v0.7.31",1,0
1559,2023-12-18T16:03:56Z,2023-12-19T14:15:33Z,2023-12-19T14:15:33Z,13,285,474,"Preparation before start work on #1548.
The KeyValueStore trait has some duplicated logic. This PR removes it, minimizing the number of methods that we need to implement. Also I applied the original ordering of the method as in the trait.",3,0
1566,2023-12-19T15:41:16Z,2023-12-20T01:26:00Z,2023-12-20T01:26:00Z,19,293,252,"Related work to the #1548.
The changes move KeyValueStore to the fuel-core-storage crate. It requires updating the trait to use StorageResult instead of DatabaseResult, causing according to changes in the downstream crates.
Also extracted iter_all functionality into a separate trait, because it is not used by the state transition logic and more fancy stuff for API.",2,0
1573,2023-12-22T12:44:45Z,2024-01-06T02:28:22Z,2024-01-06T02:28:22Z,7,115,286,"For some reason we had a two layers of serialization for request/response messages. This doesn't seem useful at all, and complicates e.g. error handling. This PR removes the extra layer, substantially simplifying that logic. One major upside of this is that  #1345 and #1350 can now be solved in a single follow-up PR.
Hopefully this doesn't conflict too much with the ongoing libp2p update PR #1379.",3,0
1574,2023-12-23T01:03:57Z,2024-02-05T02:04:14Z,2024-02-05T02:04:14Z,5,221,81,"Closes #1345. Closes #1346 Closes #1350.
This PR stops discarding request errors from libp2p, and instead returns them to the sender of the request. Also penalizes peers for sending invalid responses or for not replying at all.
Making penalty configurable should be a follow-up PR, as there are other penalties that should be configurable as well
TODO:

 Make timeout configutable: Already seems to be case on master branch
 Add tests
 Fix current tests that for some reason don't terminate",3,2
1575,2023-12-24T00:16:18Z,2023-12-26T15:40:59Z,2023-12-26T15:40:59Z,1,114,103,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anyhow v1.0.75 -> v1.0.76
�[0m�[0m�[1m�[32m    Updating�[0m async-task v4.5.0 -> v4.6.0
�[0m�[0m�[1m�[32m    Updating�[0m async-trait v0.1.74 -> v0.1.75
�[0m�[0m�[1m�[32m    Updating�[0m ctrlc v3.4.1 -> v3.4.2
�[0m�[0m�[1m�[32m    Updating�[0m event-listener v4.0.0 -> v4.0.1
�[0m�[0m�[1m�[32m    Updating�[0m fuel-asm v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-crypto v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-derive v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-merkle v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-storage v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-tx v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-types v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m fuel-vm v0.43.1 -> v0.43.2
�[0m�[0m�[1m�[32m    Updating�[0m hyper v0.14.27 -> v0.14.28
�[0m�[0m�[1m�[32m    Updating�[0m mach2 v0.4.1 -> v0.4.2
�[0m�[0m�[1m�[32m    Updating�[0m memmap2 v0.9.1 -> v0.9.3
�[0m�[0m�[1m�[32m    Updating�[0m pkg-config v0.3.27 -> v0.3.28
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro-crate v1.1.3 -> v1.3.1
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro2 v1.0.70 -> v1.0.71
�[0m�[0m�[1m�[32m    Updating�[0m reqwest v0.11.22 -> v0.11.23
�[0m�[0m�[1m�[32m    Updating�[0m serde_spanned v0.6.4 -> v0.6.5
�[0m�[0m�[1m�[32m    Updating�[0m serde_yaml v0.9.27 -> v0.9.29
�[0m�[0m�[1m�[32m    Updating�[0m subtle v2.4.1 -> v2.5.0
�[0m�[0m�[1m�[32m    Updating�[0m syn v2.0.41 -> v2.0.42
�[0m�[0m�[1m�[32m    Updating�[0m time v0.3.30 -> v0.3.31
�[0m�[0m�[1m�[32m    Updating�[0m time-macros v0.2.15 -> v0.2.16
�[0m�[0m�[1m�[32m    Updating�[0m tokio v1.35.0 -> v1.35.1
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.19.15
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.28 -> v0.5.30
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy v0.7.31 -> v0.7.32
�[0m�[0m�[1m�[32m    Updating�[0m zerocopy-derive v0.7.31 -> v0.7.32",1,0
1576,2023-12-24T03:08:52Z,2024-01-19T04:17:17Z,2024-01-19T04:17:17Z,58,3467,2146,"Overview
Closes #1548
Closes #430
The change moves the implementation of the storage traits for required tables from fuel-core to fuel-core-storage crate. The change also adds a more flexible configuration of the encoding/decoding per the table and allows the implementation of specific behaviors for the table in a much easier way. It unifies the encoding between database, SMTs, and iteration, preventing mismatching bytes representation on the Rust type system level. Plus, it increases the re-usage of the code by applying the same structure to other tables.
It is a breaking PR because it changes database encoding/decoding for some tables.
StructuredStorage
The change adds a new type StructuredStorage. It is a wrapper around the key-value storage that implements the storage traits(StorageInspect, StorageMutate, StorageRead, etc) for the tables with structure. This structure works in tandem with the TableWithStructure trait. The table may implement TableWithStructure specifying the structure, as an example:
impl TableWithStructure for ContractsRawCode {
    type Structure = Plain<Raw, Raw>;

    fn column() -> Column {
        Column::ContractsRawCode
    }
}
It is a definition of the structure for the ContractsRawCode table. It has a plain structure meaning it simply encodes/decodes bytes and stores/loads them into/from the storage. As a key codec and value codec, it uses a Raw encoding/decoding that simplifies writing bytes and loads them back into the memory without applying any serialization or deserialization algorithm.
If the table implements TableWithStructure and the selected codec satisfies all structure requirements, the corresponding storage traits for that table are implemented on the StructuredStorage type.
Codecs
Each structure allows customizing the key and value codecs. It allows the use of different codecs for different tables, taking into account the complexity and weight of the data and providing a way of more optimal implementation.
That property may be very useful to perform migration in a more easier way. Plus, it also can be a no_std migration potentially allowing its fraud proving.
An example of migration:
/// Define the table for V1 value encoding/decoding.
impl TableWithStructure for ContractsRawCodeV1 {
    type Structure = Plain<Raw, Raw>;

    fn column() -> Column {
        Column::ContractsRawCode
    }
}

/// Define the table for V2 value encoding/decoding.
/// It uses `Postcard` codec for the value instead of `Raw` codec.
///
/// # Dev-note: The columns is the same.
impl TableWithStructure for ContractsRawCodeV2 {
    type Structure = Plain<Raw, Postcard>;

    fn column() -> Column {
        Column::ContractsRawCode
    }
}

fn migration(storage: &mut Database) {
    let mut iter = storage.iter_all::<ContractsRawCodeV1>(None);
    while let Ok((key, value)) = iter.next() {
        // Insert into the same table but with another codec.
        storage.storage::<ContractsRawCodeV2>().insert(key, value);
    }
}
Structures
The structure of the table defines its behavior. As an example, a Plain structure simply encodes/decodes bytes and stores/loads them into/from the storage. The SMT structure builds a sparse merkle tree on top of the key-value pairs.
Implementing a structure one time, we can apply it to any table satisfying the requirements of this structure. It increases the re-usage of the code and minimizes duplication.
It can be useful if we decide to create global roots for all required tables that are used in fraud proving.
impl TableWithStructure for SpentMessages {
    type Structure = Plain<Raw, Postcard>;

    fn column() -> Column {
        Column::SpentMessages
    }
}
                 |
                 |
                \|/

impl TableWithStructure for SpentMessages {
    type Structure =
        Sparse<Raw, Postcard, SpentMessagesMerkleMetadata, SpentMessagesMerkleNodes>;

    fn column() -> Column {
        Column::SpentMessages
    }
}
Side changes
iter_all
The iter_all functionality now accepts the table instead of K and V generics. It is done to use the correct codec during deserialization. Also, the table definition provides the column.

Duplicated unit tests
The fuel-core-storage crate provides macros that generate unit tests. Almost all tables had the same test like get, insert, remove, exist. All duplicated tests were moved to macros. The unique one still stays at the same place where it was before.

StorageBatchMutate
Added a new StorageBatchMutate trait that we can move to fuel-storage crate later. It allows batch operations on the storage. It may be more performant in some cases.
/// The traits allow work with the storage in batches.
/// Some implementations can perform batch operations faster than one by one.
pub trait StorageBatchMutate<Type: Mappable>: StorageMutate<Type> {
    /// Initialize the storage with batch insertion. This method is more performant than
    /// [`Self::insert_batch`] in some case.
    ///
    /// # Errors
    ///
    /// Returns an error if the storage is already initialized.
    fn init_storage(
        &mut self,
        set: &mut dyn Iterator<Item = (&Type::Key, &Type::Value)>,
    ) -> Result<()>;

    /// Inserts the key-value pair into the storage in batch.
    fn insert_batch(
        &mut self,
        set: &mut dyn Iterator<Item = (&Type::Key, &Type::Value)>,
    ) -> Result<()>;

    /// Removes the key-value pairs from the storage in batch.
    fn remove_batch(&mut self, set: &mut dyn Iterator<Item = &Type::Key>) -> Result<()>;
}
Follow-up
It is one of the changes in the direction of the forkless upgrades for state transition functions and fraud proofs. The idea behind this is that the fuel_core_executor::Executor will work directly with the StructuredStorage instead of the Database. It will perform only state transition-related modifications to the storage, while all outside modifications like updating of receipts, transition status, block insertions, messages removing, and transaction storing will be a part of another service/process.",4,0
1577,2023-12-29T17:43:10Z,2024-01-05T21:54:31Z,2024-01-05T21:54:31Z,32,450,345,"Related to #1549
We don't need to insert the block in the executor because it is the block importer's responsibility. It verifies the block's validity and decides whether we want to insert a new block or not. Plus, storing blocks and transactions is not part of the state transition.
This change also adds the ability to produce the block with a defined order of the transactions. It may be useful in the tests.",3,3
1578,2023-12-31T00:16:28Z,2024-01-02T01:40:44Z,2024-01-02T01:40:44Z,1,106,116,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m ahash v0.8.6 -> v0.8.7
�[0m�[0m�[1m�[32m    Updating�[0m anyhow v1.0.76 -> v1.0.78
�[0m�[0m�[1m�[32m    Updating�[0m async-trait v0.1.75 -> v0.1.76
�[0m�[0m�[1m�[32m    Updating�[0m bstr v1.8.0 -> v1.9.0
�[0m�[0m�[1m�[32m    Updating�[0m cargo-platform v0.1.5 -> v0.1.6
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.11 -> v4.4.12
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.11 -> v4.4.12
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-channel v0.5.9 -> v0.5.10
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-epoch v0.9.16 -> v0.9.17
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-utils v0.8.17 -> v0.8.18
�[0m�[0m�[1m�[32m    Updating�[0m deranged v0.3.10 -> v0.3.11
�[0m�[0m�[1m�[32m    Updating�[0m futures v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-channel v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-core v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-executor v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-io v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-macro v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-sink v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-task v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m futures-util v0.3.29 -> v0.3.30
�[0m�[0m�[1m�[32m    Updating�[0m is-terminal v0.4.9 -> v0.4.10
�[0m�[0m�[1m�[32m    Updating�[0m memchr v2.6.4 -> v2.7.1
�[0m�[0m�[1m�[31m    Removing�[0m memoffset v0.9.0
�[0m�[0m�[1m�[32m    Updating�[0m object v0.32.1 -> v0.32.2
�[0m�[0m�[1m�[32m    Updating�[0m platforms v3.2.0 -> v3.3.0
�[0m�[0m�[1m�[32m    Updating�[0m schannel v0.1.22 -> v0.1.23
�[0m�[0m�[1m�[32m    Updating�[0m similar v2.3.0 -> v2.4.0
�[0m�[0m�[1m�[32m    Updating�[0m syn v2.0.42 -> v2.0.43
�[0m�[0m�[1m�[32m    Updating�[0m tempfile v3.8.1 -> v3.9.0
�[0m�[0m�[1m�[32m    Updating�[0m thiserror v1.0.51 -> v1.0.53
�[0m�[0m�[1m�[32m    Updating�[0m thiserror-impl v1.0.51 -> v1.0.53
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.30 -> v0.5.31",1,0
1579,2024-01-04T14:29:40Z,2024-01-19T17:26:37Z,2024-01-19T17:26:37Z,56,1449,767,"Closes #1549
Overview
The change extracts the off-chain-related logic from the executor and moves it to the GraphQL off-chain worker. It creates two new concepts - Off-chain and On-chain databases where the GraphQL worker has exclusive ownership of the database and may modify it without intersecting with the On-chain database.
Challenges caused by the change
Delegating updating of the state to something other than BlockImporter causes several new problems:

The commitment to the on-chain and off-chain databases is done in different places. The off-chain database may be out of sync with the on-chain database due to race conditions.
The result of the block execution(receipts, statuses) is not stored anywhere and may be lost due to emergency shutdown.

We don't want to duplicate on-chain data inside of the off-chain database, so the GraphQL service works with two sources of data, which leads to two problems:

The off-chain database may be out of sync with the on-chain database due to race conditions causing failing requests.
The view of the databases during the GraphQL request may change, causing invalid responses with a mix of old and new data. We had this problem before, but now it is more critical.

Solutions to the challenges
Out of sync
The change applies two steps to solve this issue. The main one is a new trait for the database:
/// Provides a view of the storage at the given height.
/// It guarantees to be atomic, meaning the view is immutable to outside modifications.
pub trait AtomicView<View>: Send + Sync {
    /// Returns the view of the storage at the given `height`.
    fn view_at(&self, height: BlockHeight) -> StorageResult<View>;

    /// Returns the view of the storage for the latest block height.
    fn latest_view(&self) -> View;
}
Another one to await on the BlockCommiter side finishing processing the ImportResult by all listeners.
The goal of the trait is to provide an immutable read-only view of the database at a specific time. However, this trait has not yet been implemented properly during this PR and will be implemented in the following PRs. The view_at requires functionality from #451. We already can implement the latest_view method via RocksDB::Transaction, but it is better to do it after merging #1576.
Waiting on the BlockImporter side is a temporary solution to not escalate the problem. But maybe we can keep it later to guarantee the consistent state of the blockchain.
Losing result of execution
The AtomicView trait also solves the issue of losing the state of the execution because it is possible to get a view of the database at a specific block height and execute the block again receiving the same execution result.
Waiting inside the BlockImporter guarantees that we will not lose more than one ImportResult.
Inconsistent database view within GraphQL requests
The GraphQL now has ReadDatabase:
pub type OnChainView = Arc<dyn OnChainDatabase>;
pub type OffChainView = Arc<dyn OffChainDatabase>;

pub struct ReadDatabase {
    on_chain: Box<dyn AtomicView<OnChainView>>,
    off_chain: Box<dyn AtomicView<OffChainView>>,
}
It implements the view method that returns the ReadView type. The ReadView implements all required methods by using internal on-chain view and off-chain view.
The AtomicView allows us to get the last_view of the off-chain database and get the view_at(off_chain_view.last_height()) of the on-chain database creating a consistent view for both databases at a specific height.
The change also adds a ViewExtension to the GraphQL that creates a ReadView for each request.
/// The extension that adds the `ReadView` to the request context.
/// It guarantees that the request works with the one view of the database,
/// and external database modification cannot affect the result.
struct ViewExtension;

#[async_trait::async_trait]
impl Extension for ViewExtension {
    async fn prepare_request(
        &self,
        ctx: &ExtensionContext<'_>,
        request: Request,
        next: NextPrepareRequest<'_>,
    ) -> ServerResult<Request> {
        let database: &ReadDatabase = ctx.data_unchecked();
        let view = database.view();
        let request = request.data(view);
        next.run(ctx, request).await
    }
}
Implementation details

The ExecutionResult now also has receipts for the transaction along with its status. The off-chain worker will insert them later into the database, while the dry_run can fetch them immediately.
All API requests now work with the ReadView instead of the Database type. The ReadDatabase is only used in one place in the ViewExtension.
The BlockImpoerter::comit_result now is async and awaits for the previous block to be processed by all listeners. The execution of the execute_and_commit now runs verify_and_execute_block in the spawned task in the tokio_rayon.

Follow up

#1580
#1581
#1582
#1583
#1584",4,0
1586,2024-01-05T23:24:06Z,2024-01-06T02:03:39Z,2024-01-06T02:03:39Z,1,1,1,Closes #1298,2,0
1587,2024-01-06T22:37:08Z,2024-01-19T18:14:14Z,2024-01-19T18:14:14Z,27,265,260,Closes #1580,3,0
1590,2024-01-08T01:17:06Z,2024-01-19T18:34:23Z,2024-01-19T18:34:23Z,20,711,576,"The change is related to #1589.
The idea of the change is to start using the AtomicView inside of the TxPool to generate consistent database representation during the insertion of the transactions.",3,0
1591,2024-01-08T22:22:04Z,2024-01-09T00:02:58Z,2024-01-09T00:02:58Z,15,125,127,Closes #1523,2,1
1593,2024-01-08T23:48:57Z,2024-01-09T17:52:55Z,2024-01-09T17:52:55Z,2,97,50,Part of #1544,3,0
1596,2024-01-10T23:14:57Z,2024-01-23T00:17:08Z,2024-01-23T00:17:08Z,8,46,28,Part of: #1544,3,0
1597,2024-01-11T00:22:48Z,2024-01-22T12:44:46Z,2024-01-22T12:44:46Z,18,142,152,Closes #1556,2,0
1599,2024-01-14T00:16:35Z,2024-01-17T07:13:50Z,2024-01-17T07:13:50Z,1,139,193,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anstream v0.6.5 -> v0.6.7
�[0m�[0m�[1m�[32m    Updating�[0m assert_cmd v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m async-lock v3.2.0 -> v3.3.0
�[0m�[0m�[1m�[32m    Updating�[0m base64 v0.21.5 -> v0.21.7
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.13 -> v4.4.16
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.12 -> v4.4.16
�[0m�[0m�[1m�[32m    Updating�[0m console v0.15.7 -> v0.15.8
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-channel v0.5.10 -> v0.5.11
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-deque v0.8.4 -> v0.8.5
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-epoch v0.9.17 -> v0.9.18
�[0m�[0m�[1m�[32m    Updating�[0m crossbeam-utils v0.8.18 -> v0.8.19
�[0m�[0m�[1m�[32m    Updating�[0m ethers-addressbook v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-abigen v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-derive v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m ethers-core v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m ethers-etherscan v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m ethers-solc v2.0.11 -> v2.0.12
�[0m�[0m�[1m�[32m    Updating�[0m getrandom v0.2.11 -> v0.2.12
�[0m�[0m�[1m�[32m    Updating�[0m h2 v0.3.22 -> v0.3.23
�[0m�[0m�[1m�[32m    Updating�[0m igd-next v0.14.2 -> v0.14.3
�[0m�[0m�[1m�[32m    Updating�[0m js-sys v0.3.66 -> v0.3.67
�[0m�[0m�[1m�[32m    Updating�[0m k256 v0.13.2 -> v0.13.3
�[0m�[0m�[1m�[32m    Updating�[0m keccak v0.1.4 -> v0.1.5
�[0m�[0m�[1m�[32m    Updating�[0m libc v0.2.151 -> v0.2.152
�[0m�[0m�[1m�[32m    Updating�[0m libz-sys v1.1.12 -> v1.1.14
�[0m�[0m�[1m�[32m    Updating�[0m num_enum v0.7.1 -> v0.7.2
�[0m�[0m�[1m�[32m    Updating�[0m num_enum_derive v0.7.1 -> v0.7.2
�[0m�[0m�[1m�[31m    Removing�[0m proc-macro-crate v2.0.1
�[0m�[0m�[1m�[36m      Adding�[0m proc-macro-crate v2.0.0
�[0m�[0m�[1m�[36m      Adding�[0m proc-macro-crate v3.0.0
�[0m�[0m�[1m�[32m    Updating�[0m rustix v0.38.28 -> v0.38.30
�[0m�[0m�[1m�[32m    Updating�[0m smallvec v1.11.2 -> v1.12.0
�[0m�[0m�[1m�[32m    Updating�[0m termcolor v1.4.0 -> v1.4.1
�[0m�[0m�[1m�[32m    Updating�[0m toml v0.8.2 -> v0.8.8
�[0m�[0m�[1m�[32m    Updating�[0m toml_datetime v0.6.3 -> v0.6.5
�[0m�[0m�[1m�[31m    Removing�[0m toml_edit v0.20.2
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.20.7
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.21.0
�[0m�[0m�[1m�[32m    Updating�[0m value-bag v1.4.3 -> v1.6.0
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen v0.2.89 -> v0.2.90
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-backend v0.2.89 -> v0.2.90
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-futures v0.4.39 -> v0.4.40
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro v0.2.89 -> v0.2.90
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro-support v0.2.89 -> v0.2.90
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-shared v0.2.89 -> v0.2.90
�[0m�[0m�[1m�[32m    Updating�[0m web-sys v0.3.66 -> v0.3.67
�[0m�[0m�[1m�[31m    Removing�[0m windows-sys v0.45.0
�[0m�[0m�[1m�[31m    Removing�[0m windows-targets v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_aarch64_gnullvm v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_aarch64_msvc v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_i686_gnu v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_i686_msvc v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_x86_64_gnu v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_x86_64_gnullvm v0.42.2
�[0m�[0m�[1m�[31m    Removing�[0m windows_x86_64_msvc v0.42.2
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.33 -> v0.5.34",3,0
1600,2024-01-15T19:59:40Z,2024-01-31T02:16:58Z,2024-01-31T02:16:58Z,12,80,64,"Closes #1544
Addresses breaking changes from FuelLabs/fuel-vm#654",3,2
1601,2024-01-15T20:01:03Z,2024-01-17T17:03:23Z,2024-01-17T17:03:23Z,17,23,21,,2,0
1610,2024-01-19T15:01:05Z,2024-01-19T17:53:32Z,2024-01-19T17:53:32Z,10,145,72,Applying comments from the #1576,2,0
1611,2024-01-21T00:16:51Z,2024-01-22T13:08:55Z,2024-01-22T13:08:55Z,1,70,71,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anstream v0.6.7 -> v0.6.11
�[0m�[0m�[1m�[32m    Updating�[0m async-io v2.2.2 -> v2.3.0
�[0m�[0m�[1m�[32m    Updating�[0m bitflags v2.4.1 -> v2.4.2
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.16 -> v4.4.18
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.16 -> v4.4.18
�[0m�[0m�[1m�[32m    Updating�[0m enum-iterator v1.4.1 -> v1.5.0
�[0m�[0m�[1m�[32m    Updating�[0m enum-iterator-derive v1.2.1 -> v1.3.0
�[0m�[0m�[1m�[32m    Updating�[0m h2 v0.3.23 -> v0.3.24
�[0m�[0m�[1m�[32m    Updating�[0m hermit-abi v0.3.3 -> v0.3.4
�[0m�[0m�[1m�[32m    Updating�[0m linux-raw-sys v0.4.12 -> v0.4.13
�[0m�[0m�[1m�[32m    Updating�[0m pkg-config v0.3.28 -> v0.3.29
�[0m�[0m�[1m�[32m    Updating�[0m polling v3.3.1 -> v3.3.2
�[0m�[0m�[1m�[32m    Updating�[0m predicates v3.0.4 -> v3.1.0
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro-crate v3.0.0 -> v3.1.0
�[0m�[0m�[1m�[32m    Updating�[0m rayon v1.8.0 -> v1.8.1
�[0m�[0m�[1m�[32m    Updating�[0m rayon-core v1.12.0 -> v1.12.1
�[0m�[0m�[1m�[32m    Updating�[0m smallvec v1.12.0 -> v1.13.1
�[0m�[0m�[1m�[32m    Updating�[0m unicode-bidi v0.3.14 -> v0.3.15
�[0m�[0m�[1m�[32m    Updating�[0m uuid v1.6.1 -> v1.7.0",1,0
1612,2024-01-21T11:43:05Z,2024-01-27T03:16:16Z,2024-01-27T03:16:16Z,41,641,629,"Related to #1589 and preparation for #1583.
All services that use the database for read-only purposes use AtomicView now instead of direct access to the database.

Removed Relayer from the Verifier because if it is not used for now, plus it may not be needed because of the shared sequencer and its consensus rules.
Added verification of the transactions root hash into Verifier.
Removed requesting of the one block from p2p, it is possible to use range request for that purposes.
Removed not used get_sealed_header and get_sealed_block method.
Added the latest_height method to AtomicView because the database always knows its latest height.
Added customisation of the Height used by the AtomicView. In the case of the relayer, we want to use DaBlockHeight as a primary key to create a snapshot, while in the case of the Fuel's databases, we want to use BockHeight as a primary key.
Renamed Executor into ExecutionInstance and changed it to be a one-time usable instance. It consumes the self to perform the execution of the block. The instance has a view of the database and execution options.",2,2
1613,2024-01-22T21:32:41Z,2024-01-23T00:27:35Z,2024-01-23T00:27:35Z,6,88,2,closes #1595,3,1
1614,2024-01-23T14:17:10Z,2024-01-24T23:11:58Z,2024-01-24T23:11:58Z,2,8,13,"This PR adds the following changes:

removes consensus_dev_key since the produce_blockfunctionality can now be controlled through thedebug` flag
uses the dev consensus key in the debug mode regardless of the trigger mode",2,0
1616,2024-01-24T00:28:03Z,2024-01-25T23:18:43Z,2024-01-25T23:18:43Z,14,164,56,Part of: #1544,3,0
1617,2024-01-24T07:42:13Z,2024-01-24T18:12:02Z,2024-01-24T18:12:02Z,1,4,0,"Flux needs sortable image tags. This commit creates an additional Docker image tag compatible with Flux. The format of the tag will be ""sha-{SHORT_SHA}-{TIMESTAMP}""
closes #1594",3,0
1625,2024-01-24T22:58:08Z,2024-01-30T18:15:34Z,2024-01-30T18:15:34Z,25,822,335,"It is preparation for the #1568.
The changes make relayer storage independent from the executor storage. Before, the relayer and executor shared write ownership to the Messages table. The relayer was inserting new messages, and the executor was removing them.
With this change, only the executor modifies the Messages table(inserts and removes messages). The relayer has its own new History table, that stores all events from the DA layer per each height.
This change also makes the insertion of upcoming events from DA as part of the state transition, allowing in the future handle force transaction inclusion.
The change:

Adds blanket implementation for the VmStorageRequirements since the executor requires access to the FuelBlocks table, and we can inherit this implementation.
Adds new tests for the executor that verifies fetching data from the relayer.
Introduces a new general Event type for messages and forced transactions (in the future).",2,1
1628,2024-01-25T02:54:20Z,2024-01-26T18:23:06Z,2024-01-26T18:23:06Z,9,209,141,"Related issues:

#1552",3,0
1629,2024-01-25T12:48:43Z,2024-02-02T14:56:33Z,2024-02-02T14:56:33Z,74,1745,1086,"Closes #1568
The change splits the Database into 3 databases:

Database<OnChain> - Stores only data required for normal work of the blockchain.
Database<OffChain> - Stores only data used by the off-chain services like GraphQL.
Database<Relayer> - Stores relayer-related data like events(messages or transactions) from L1.

The Database<Description> type has a generic Description that implements the DatabaseDescription trait:
/// The description of the database that makes it unique.
pub trait DatabaseDescription: 'static + Clone + Debug + Send + Sync {
    /// The type of the column used by the database.
    type Column: StorageColumn + strum::EnumCount + enum_iterator::Sequence;
    /// The type of the height of the database used to track commits.
    type Height: Copy;

    /// Returns the expected version of the database.
    fn version() -> u32;

    /// Returns the name of the database.
    fn name() -> &'static str;

    /// Returns the column used to store the metadata.
    fn metadata_column() -> Self::Column;

    /// Returns the prefix for the column.
    fn prefix(column: &Self::Column) -> Option<usize>;
}
Each database has its folder, defined by the DatabaseDescription::name, where actual data is stored.

Each database has its own Column type that describes all columns, avoiding overlaps with other tables. The change updates a little bit StrucutredStorage implementation and TableWithBlueprint to be more flexible and use the Column defined by the table, instead of hardcoded fuel_core_storage::column::Column.
Other small changes:

Unified the logic of storing the database's metadata. It will be useful for #1589 to implement a unified commit_chagnes function.
The latest_height function now uses the height from the metadata table.
Removed relayers-related tables and columns from the fuel-core-storage crate.
Removed part of GraphQL tables and columns from the fuel-core-storage. The last part will be removed during #1583.
Moved tx_count metrics from BlockImporter to GraphQL off-chain worker. Any statistic that requires a persistent state in the database may be done outside of the blockchain.
Remove chain_name from the database. The ConsensusParameters already contains this information.
Removed the checkpoint function from the RocksDB since it is not used. Later it will be added again back but with another implementation during #1589.
Removed Column::ForeignColumn, since each database has its own Column type. Removed the macro rules added to handle ForeignColumn.",2,0
1631,2024-01-26T21:56:40Z,2024-02-02T17:15:21Z,2024-02-02T17:15:21Z,19,415,144,closes #1533,3,0
1632,2024-01-27T00:46:43Z,2024-01-29T17:10:57Z,2024-01-29T17:10:57Z,17,227,91,"Related issues:

#1552

This PR converts the Message struct to an enum that can house multiple variants for versioning. Version variants contain an instance of a versioned struct, e.g., MessageV1. The Message enum exposes getters to the underlying data and abstracts the version. Setters are exposed only in test environments to allow tests to set up Messages in specific ways for the test.",3,0
1633,2024-01-27T22:07:01Z,2024-01-29T09:38:48Z,2024-01-29T09:38:48Z,12,243,149,"Part of the #1583.
The change moves the genesis block execution and commitment from the FuelService::new to the FuelService::Task::into_task.
It allows us to notify other services about the genesis block because all services are already subscribed to the block importer(it is what we need for #1583 to process new messages inside the off-chain worker). Plus, it adds support for the async syntax(it will be used by the parallel regenesis process from #1519).
Moving genesis block initialization from the constructor to the starting level breaks p2p because P2PService requires knowing the Genesis type to create FuelP2PService(It is used to filter connections with peers). Because of that, I moved the creation of the FuelP2PService to UninitializedTask::into_task where the genesis block is already available.",2,0
1634,2024-01-28T00:16:02Z,2024-01-29T10:05:13Z,2024-01-29T10:05:13Z,1,49,45,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m auto_impl v1.1.0 -> v1.1.1
�[0m�[0m�[1m�[32m    Updating�[0m chrono v0.4.31 -> v0.4.33
�[0m�[0m�[1m�[32m    Updating�[0m ciborium v0.2.1 -> v0.2.2
�[0m�[0m�[1m�[32m    Updating�[0m ciborium-io v0.2.1 -> v0.2.2
�[0m�[0m�[1m�[32m    Updating�[0m ciborium-ll v0.2.1 -> v0.2.2
�[0m�[0m�[1m�[32m    Updating�[0m half v1.8.2 -> v2.3.1
�[0m�[0m�[1m�[32m    Updating�[0m libp2p-upnp v0.2.0 -> v0.2.1
�[0m�[0m�[1m�[32m    Updating�[0m libz-sys v1.1.14 -> v1.1.15
�[0m�[0m�[1m�[32m    Updating�[0m memmap2 v0.9.3 -> v0.9.4
�[0m�[0m�[1m�[32m    Updating�[0m pin-project v1.1.3 -> v1.1.4
�[0m�[0m�[1m�[32m    Updating�[0m pin-project-internal v1.1.3 -> v1.1.4
�[0m�[0m�[1m�[32m    Updating�[0m proc-macro2 v1.0.76 -> v1.0.78
�[0m�[0m�[1m�[32m    Updating�[0m regex v1.10.2 -> v1.10.3
�[0m�[0m�[1m�[32m    Updating�[0m regex-automata v0.4.3 -> v0.4.5
�[0m�[0m�[1m�[32m    Updating�[0m serde v1.0.195 -> v1.0.196
�[0m�[0m�[1m�[32m    Updating�[0m serde_derive v1.0.195 -> v1.0.196
�[0m�[0m�[1m�[32m    Updating�[0m serde_json v1.0.111 -> v1.0.112
�[0m�[0m�[1m�[32m    Updating�[0m shlex v1.2.0 -> v1.3.0
�[0m�[0m�[1m�[32m    Updating�[0m snow v0.9.4 -> v0.9.6
�[0m�[0m�[1m�[32m    Updating�[0m svm-rs v0.3.3 -> v0.3.5
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.34 -> v0.5.35",1,0
1635,2024-01-29T10:14:50Z,2024-02-17T02:53:29Z,2024-02-17T02:53:29Z,35,666,504,"Almost closes #1583
The change moves the OwnedCoins and OwnedMessageIds tables and their implementation to the GraphQL module. Now, the off-chain worker is responsible for tracking owners of coins and messages. For that purpose, Executor generates execution events to track which messages/coins are consumed and created during execution. The worker uses these events and updates corresponding tables.
It is not required to produce these events from the executor's perspective since anyone can calculate them based on the imported block and events from the relayer(knowing the execution rules of the state transition). However, I decided to embed that logic into the executor to simplify support for it. In the future, if we decide to change how coins and messages are created/spent, we don't need to update a bunch of places.
Events from the ExecutionResult are insufficient to complete the change since we also need to support coins and messages from the genesis block. I added a new function into the genesis module to perform an update of the OwnedCoins and OwnedMessageIds tables from the StateConfig(in the future, it will be done by an off-chain regenesis process). The initial idea was to emit events, but after reviewing the #1519 I realized that we can have so many events that it will be hard to fit them into the memory. So, I decided to implement a separate function that later can work with batches and be parallelizable.",4,0
1636,2024-01-29T14:59:16Z,2024-02-02T14:45:50Z,2024-02-02T14:45:50Z,3,56,1,"Note that the DAP GraphQL API needs updates after #1600, as some new things (like clearing breakpoints) are available. That will be a follow-up.",2,0
1639,2024-01-30T21:41:09Z,2024-01-31T19:58:53Z,2024-01-31T19:58:53Z,4,98,20,"Related issues:

#1552",3,0
1640,2024-01-31T16:46:00Z,2024-01-31T18:53:58Z,2024-01-31T18:53:58Z,13,66,81,,2,0
1644,2024-02-04T00:15:52Z,2024-02-04T22:33:51Z,2024-02-04T22:33:51Z,1,99,109,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anstyle v1.0.4 -> v1.0.5
�[0m�[0m�[1m�[32m    Updating�[0m async-io v2.3.0 -> v2.3.1
�[0m�[0m�[1m�[32m    Updating�[0m auto_impl v1.1.1 -> v1.1.2
�[0m�[0m�[1m�[32m    Updating�[0m cookie v0.16.2 -> v0.17.0
�[0m�[0m�[1m�[32m    Updating�[0m cookie_store v0.16.2 -> v0.20.0
�[0m�[0m�[1m�[32m    Updating�[0m ethers v2.0.11 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-addressbook v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract v2.0.11 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-abigen v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-contract-derive v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-core v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-etherscan v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-middleware v2.0.11 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-providers v2.0.11 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-signers v2.0.11 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m ethers-solc v2.0.12 -> v2.0.13
�[0m�[0m�[1m�[32m    Updating�[0m eyre v0.6.11 -> v0.6.12
�[0m�[0m�[1m�[31m    Removing�[0m idna v0.2.3
�[0m�[0m�[1m�[32m    Updating�[0m indexmap v2.1.0 -> v2.2.2
�[0m�[0m�[1m�[32m    Updating�[0m libc v0.2.152 -> v0.2.153
�[0m�[0m�[1m�[32m    Updating�[0m lru v0.12.1 -> v0.12.2
�[0m�[0m�[1m�[31m    Removing�[0m matches v0.1.10
�[0m�[0m�[1m�[32m    Updating�[0m miniz_oxide v0.7.1 -> v0.7.2
�[0m�[0m�[1m�[36m      Adding�[0m num-conv v0.1.0
�[0m�[0m�[1m�[32m    Updating�[0m prometheus-client v0.22.0 -> v0.22.1
�[0m�[0m�[1m�[32m    Updating�[0m reqwest v0.11.23 -> v0.11.24
�[0m�[0m�[1m�[32m    Updating�[0m rustix v0.38.30 -> v0.38.31
�[0m�[0m�[1m�[32m    Updating�[0m serde_json v1.0.112 -> v1.0.113
�[0m�[0m�[1m�[32m    Updating�[0m serde_yaml v0.9.30 -> v0.9.31
�[0m�[0m�[1m�[32m    Updating�[0m synstructure v0.13.0 -> v0.13.1
�[0m�[0m�[1m�[32m    Updating�[0m time v0.3.31 -> v0.3.34
�[0m�[0m�[1m�[32m    Updating�[0m time-macros v0.2.16 -> v0.2.17
�[0m�[0m�[1m�[32m    Updating�[0m tokio v1.35.1 -> v1.36.0
�[0m�[0m�[1m�[32m    Updating�[0m toml v0.8.8 -> v0.8.9
�[0m�[0m�[1m�[32m    Updating�[0m toml_edit v0.21.0 -> v0.21.1
�[0m�[0m�[1m�[32m    Updating�[0m value-bag v1.6.0 -> v1.7.0
�[0m�[0m�[1m�[32m    Updating�[0m webpki-roots v0.25.3 -> v0.25.4
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.35 -> v0.5.37",1,0
1646,2024-02-04T22:54:44Z,2024-02-05T17:03:06Z,2024-02-05T17:03:06Z,8,36,154,closes #1521,2,0
1649,2024-02-06T00:30:14Z,2024-02-08T23:38:09Z,2024-02-08T23:38:09Z,12,152,0,Closes: #1647,2,0
1650,2024-02-06T20:44:18Z,2024-02-09T23:17:08Z,2024-02-09T23:17:08Z,10,127,1,Closes: #1648,2,0
1655,2024-02-11T00:16:06Z,2024-02-12T21:26:38Z,2024-02-12T21:26:38Z,1,128,92,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[0m�[0m�[1m�[32m    Updating�[0m anstyle v1.0.5 -> v1.0.6
�[0m�[0m�[1m�[32m    Updating�[0m async-channel v2.1.1 -> v2.2.0
�[0m�[0m�[1m�[32m    Updating�[0m cargo-platform v0.1.6 -> v0.1.7
�[0m�[0m�[1m�[32m    Updating�[0m clap v4.4.18 -> v4.5.0
�[0m�[0m�[1m�[32m    Updating�[0m clap_builder v4.4.18 -> v4.5.0
�[0m�[0m�[1m�[32m    Updating�[0m clap_derive v4.4.7 -> v4.5.0
�[0m�[0m�[1m�[32m    Updating�[0m clap_lex v0.6.0 -> v0.7.0
�[0m�[0m�[1m�[32m    Updating�[0m const-hex v1.10.0 -> v1.11.0
�[0m�[0m�[1m�[32m    Updating�[0m curve25519-dalek v4.1.1 -> v4.1.2
�[0m�[0m�[1m�[32m    Updating�[0m ed25519-dalek v2.1.0 -> v2.1.1
�[0m�[0m�[1m�[32m    Updating�[0m either v1.9.0 -> v1.10.0
�[0m�[0m�[1m�[36m      Adding�[0m event-listener v5.0.0
�[0m�[0m�[1m�[36m      Adding�[0m event-listener-strategy v0.5.0
�[0m�[0m�[1m�[32m    Updating�[0m fiat-crypto v0.2.5 -> v0.2.6
�[0m�[0m�[1m�[32m    Updating�[0m hermit-abi v0.3.4 -> v0.3.5
�[0m�[0m�[1m�[32m    Updating�[0m is-terminal v0.4.10 -> v0.4.12
�[0m�[0m�[1m�[32m    Updating�[0m jobserver v0.1.27 -> v0.1.28
�[0m�[0m�[1m�[32m    Updating�[0m js-sys v0.3.67 -> v0.3.68
�[0m�[0m�[1m�[32m    Updating�[0m num-integer v0.1.45 -> v0.1.46
�[0m�[0m�[1m�[32m    Updating�[0m num-traits v0.2.17 -> v0.2.18
�[0m�[0m�[1m�[32m    Updating�[0m pest v2.7.6 -> v2.7.7
�[0m�[0m�[1m�[32m    Updating�[0m polling v3.3.2 -> v3.4.0
�[0m�[0m�[1m�[36m      Adding�[0m strsim v0.11.0
�[0m�[0m�[1m�[32m    Updating�[0m tempfile v3.9.0 -> v3.10.0
�[0m�[0m�[1m�[32m    Updating�[0m toml v0.8.9 -> v0.8.10
�[0m�[0m�[1m�[36m      Adding�[0m toml_edit v0.22.4
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen v0.2.90 -> v0.2.91
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-backend v0.2.90 -> v0.2.91
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-futures v0.4.40 -> v0.4.41
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro v0.2.90 -> v0.2.91
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-macro-support v0.2.90 -> v0.2.91
�[0m�[0m�[1m�[32m    Updating�[0m wasm-bindgen-shared v0.2.90 -> v0.2.91
�[0m�[0m�[1m�[32m    Updating�[0m web-sys v0.3.67 -> v0.3.68
�[0m�[0m�[1m�[32m    Updating�[0m winnow v0.5.37 -> v0.5.39
�[0m�[0m�[1m�[32m    Updating�[0m x25519-dalek v2.0.0 -> v2.0.1",2,0
1656,2024-02-11T23:09:21Z,2024-02-12T21:09:08Z,2024-02-12T21:09:08Z,5,5,5,"WE've got these broken deps:
error: package `clap_builder v4.5.0` cannot be built because it requires rustc 1.74 or newer, while the currently active rustc version is 1.73.0",2,0
1657,2024-02-12T03:44:20Z,2024-02-27T10:07:24Z,2024-02-27T10:07:24Z,35,212,77,"Related issues:

#1654",2,0
1658,2024-02-12T13:04:21Z,2024-02-12T20:21:11Z,2024-02-12T20:21:11Z,32,256,318,"Example of the failed CI https://github.com/FuelLabs/fuel-core/actions/runs/7865306004/job/21471566710?pr=1656
The change moves receipts into the TransationStatus to avoid requests to the database. The TxPool directly listens for blocks and transaction statuses to notify the user via subscription. But when it notifies the users, the off-chain database can still be outdated, leading to empty receipts.
This PR fixes the race condition for the receipts. However, the problem still exists for the end user if they want to fetch some updated information from the off-chain database. I created a separate issue to track it: #1659.
It is the fix for the #1656",3,2
1663,2024-02-13T05:27:18Z,2024-02-20T18:18:18Z,2024-02-20T18:18:18Z,10,324,174,"It is fairly common for gossipped transactions to fail due to transient reasons such as UTXO's being spent before the transaction is included. A transaction that was valid when broadcast could become invalid if its inputs were spent in a newly confirmed block. Penalizing nodes for this could unfairly punish nodes that are simply ""behind"" in their view of the blockchain state.
In bitcoin, only incorrectly formatted transactions (i.e. invalid signatures or corrupt data according to consensus rules) are considered immediately punishable, and all transient (ie. state dependent) failures are ignored but unpunished. https://github.com/bitcoin/bitcoin/blob/6ff0aa089c01ff3e610ecb47814ed739d685a14c/src/net_processing.cpp#L1849
However, bitcoin does implement rate limiting on peers to prevent spam of either valid or invalid transactions to work around this. That is not currently implemented in this PR (but noted in this issue: #1677)
https://github.com/bitcoin/bitcoin/blob/6ff0aa089c01ff3e610ecb47814ed739d685a14c/src/net_processing.cpp#L3842C23-L3842C37",3,1
1664,2024-02-13T23:57:34Z,2024-02-14T17:51:18Z,2024-02-14T17:51:18Z,12,77,67,"The change adds 64 MB limit for the WAL file. Previously, it was unlimited, causing long initialization of the database.
The change also bumps the fuel-core version to 0.22.1. Later, we need to duplicate the same change to the master branch.",2,1
1665,2024-02-14T00:11:57Z,2024-02-14T19:54:24Z,2024-02-14T19:54:24Z,6,64,50,It is a duplication of the #1664 for the master.,3,1
1671,2024-02-15T15:52:17Z,2024-02-22T00:33:58Z,2024-02-22T00:33:58Z,47,1423,789,"Closes #1583
The change moves the FuelBlockSecondaryKeyBlockHeights table and related logic to the off-chain worker. Along with this, the change adds a new Merklelized blueprint that maintains the binary Merkle tree over the storage data. It supports only the insertion of the objects without removing them. This blueprint replaces the logic that previously was defined in the Database.
Some side changes caused by the main change:

Now, each blueprint provides its own set of tests related to the logic of this blueprint.
The TransactionStatus uses block_height inside instead of the block_id.
The key for the dense merkle tree looks like:
pub enum DenseMetadataKey<PrimaryKey> {
    /// The primary key of the `DenseMerkleMetadata`.
    Primary(PrimaryKey),
    #[default]
    /// The latest `DenseMerkleMetadata` of the table.
    Latest,
}",4,0
1675,2024-02-17T01:38:45Z,2024-02-18T19:34:39Z,2024-02-18T19:34:39Z,13,89,142,"closes: #1652
Having the ability to fetch all data related to a contract is overkill and costly in most cases, and usually done by accident. This api change simplifies the GQL schema to simply return a contractId instead of a contract resolver for tx inputs, receipts, and more.
Note that the full contract details (such as the contract bytecode) can still be fetched directly via the contract query endpoint.",3,2
1682,2024-02-18T00:15:53Z,2024-02-18T18:45:41Z,2024-02-18T18:45:41Z,1,108,98,"Automation to keep dependencies in Cargo.lock current.
The following is the output from cargo update:
�[1m�[32m    Updating�[0m aes v0.8.3 -> v0.8.4
�[1m�[32m    Updating�[0m ahash v0.8.7 -> v0.8.8
�[1m�[32m    Updating�[0m bumpalo v3.14.0 -> v3.15.0
�[1m�[32m    Updating�[0m chrono v0.4.33 -> v0.4.34
�[1m�[32m    Updating�[0m clap v4.5.0 -> v4.5.1
�[1m�[32m    Updating�[0m clap_builder v4.5.0 -> v4.5.1
�[1m�[32m    Updating�[0m crc32fast v1.3.2 -> v1.4.0
�[1m�[32m    Updating�[0m hermit-abi v0.3.5 -> v0.3.6
�[1m�[32m    Updating�[0m indexmap v2.2.2 -> v2.2.3
�[1m�[32m    Updating�[0m pkg-config v0.3.29 -> v0.3.30
�[1m�[32m    Updating�[0m ring v0.17.7 -> v0.17.8
�[1m�[32m    Updating�[0m syn v2.0.48 -> v2.0.49
�[1m�[32m    Updating�[0m textwrap v0.16.0 -> v0.16.1
�[1m�[32m    Updating�[0m thiserror v1.0.56 -> v1.0.57
�[1m�[32m    Updating�[0m thiserror-impl v1.0.56 -> v1.0.57
�[1m�[32m    Updating�[0m toml_edit v0.22.4 -> v0.22.6
�[1m�[31m    Removing�[0m winnow v0.5.39
�[1m�[36m      Adding�[0m winnow v0.5.40
�[1m�[36m      Adding�[0m winnow v0.6.1",1,0
1691,2024-02-19T19:14:50Z,2024-02-21T18:57:11Z,2024-02-21T18:57:11Z,26,168,99,Suggested by @xgreenx to be moved to a separate PR away from the regenesis work.,4,0
1692,2024-02-20T18:57:49Z,2024-02-21T14:01:20Z,2024-02-21T14:01:20Z,1,0,28,"We had a github action job to deploy the latest fuel-core master to a dev sandbox. However, that env has been decomissioned and this job no longer works. This should be reinstated once we have fluxci integrated.",2,0
1693,2024-02-21T13:33:02Z,2024-03-05T23:17:53Z,2024-03-05T23:17:53Z,106,156519,120062,"Closes #1209
The change separates the initial chain state from the chain config and stores them in separate files when generating a snapshot. The state snapshot can be generated in a new format where parquet is used for compression and indexing while postcard is used for encoding. This enables importing in a stream like fashion which reduces memory requirements. Json encoding is still supported to enable easy manual setup. However, parquet is prefered for large state files.
Snapshot command
The CLI was expanded to allow customizing the used encoding. Snapshots are now generated along with a metadata file describing the encoding used. The metadata file contains encoding details as well as the location of additional files inside the snapshot directory containing the actual data. The chain config is always generated in the JSON format.
The snapshot command now has the '--output-directory' for specifying where to save the snapshot.
Run command
The run command now includes the 'db_prune' flag which when provided will prune the existing db and start genesis from the provided snapshot metadata file or the local testnet configuration.
The snapshot metadata file contains paths to the chain config file and files containing chain state items (coins, messages, contracts, contract states, and balances), which are loaded via streaming.
Each item group in the genesis process is handled by a separate worker, allowing for parallel loading. Workers stream file contents in batches.
A database transaction is committed every time an item group is succesfully loaded. Resumability is achieved by recording the last loaded group index within the same db tx. If loading is aborted, the remaining workers are shutdown. Upon restart, workers resume from the last processed group.
Contract States and Balances
Using uniform-sized batches may result in batches containing items from multiple contracts. Optimal performance can presumably be achieved by selecting a batch size that typically encompasses an entire contract's state or balance, allowing for immediate initialization of relevant Merkle trees.",4,0
1694,2024-02-21T14:01:40Z,2024-03-13T19:36:13Z,2024-03-13T19:36:14Z,87,4291,3536,"Closes #1589
Overview
The change moves the database transaction logic from the fuel-core to the fuel-core-storage level. The corresponding issue described the reason behind it.
Technical details of implementation
The change splits the KeyValueStore into KeyValueInspect and KeyValueMutate, as well the Blueprint into BlueprintInspect and BlueprintMutate. It allows requiring less restricted constraints for any read-related operations.
One of the main ideas of the change is to allow for the actual storage only to implement KeyValueInspect and Modifiable without the KeyValueMutate. It simplifies work with the databases and provides a safe way of interacting with them (Modification into the database can only go through the Modifiable::commit_changes). This feature is used to track the height of each database during commits and even limit how commits are done, providing additional safety. This part of the change was done as a separate commit.
The StorageTransaction is a StructuredStorage that uses StorageTransactionInner inside to accumulate modifications. Only StorageStorageInner has a real implementation of the KeyValueMutate(Other types only implement it in tests).
The implementation of the Modifiable for the Database contains a business logic that provides additional safety but limits the usage of the database. The Database now tracks its height and is responsible for its updates. In the commit_changes function, it analyzes the changes that were done and tries to find a new height(For example, in the case of the OnChain database, we are looking for a new Block in the FuelBlocks table).
As was planned in the issue, now the executor has full control over how commits to the storage are done.
All mutation methods now require &mut self - exclusive ownership over the object to be able to write into it. It almost negates the chance of concurrent modification of the storage, but it is still possible since the Database implements the Clone trait. To be sure that we don't corrupt the state of the database, the commit_changes function implements additional safety checks to be sure that we commit updates per each height only once time.
Side changes:

The drop function was moved from Database to RocksDB as a preparation for the state rewind since the read view should also keep the drop function until it is destroyed.
The StatisticTable table lives in the off-chain worker.
Removed duplication of the Database from the dapp::ConcreteStorage since it is already available from the VM.
The executor return only produced Changes instead of the storage transaction, which simplifies the interaction between modules and port definition.
The logic related to the iteration over the storage is moved to the fuel-core-storage crate and is now reusable. It provides an interator method that duplicates the logic from MemoryStore on iterating over the BTreeMap and methods like iter_all, iter_all_by_prefix, etc. It was done in a separate revivable commit.
The MemoryTransactionView is fully replaced by the StorageTransactionInner.
Removed flush method from the Database since it is not needed after #1664 .",5,0
