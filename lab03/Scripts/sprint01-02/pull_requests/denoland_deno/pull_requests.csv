number,created_at,merged_at,closed_at,files,additions,deletions,body_text,participants,comments
3,2018-05-29T09:44:18Z,2018-05-30T12:33:56Z,2018-05-30T12:33:56Z,10,141,27,,3,3
5,2018-05-29T11:55:17Z,,2018-06-22T13:33:24Z,5,53,4,,5,5
6,2018-05-29T16:16:58Z,2018-06-01T20:20:34Z,2018-06-01T20:20:34Z,4,5,72,"Still WIP but comments are welcome
This change:

Removes hand written types for text-encoding module and uses @types/text-encoding
Updates the list script to enforce TypeScript type checking and Prettier code lint (must ran Prettier before)

TODO List:

 Resolve all tsc issues

 Fix duplicate declaration for global TextDecoder and TextEncoder. It already exist in dom.d.ts
 Figure out typing for *.pb (protobuf?) files. I need help with this. Should we have a declaration per file? Can we use something like Proto2TypeScript to automate it?",6,10
16,2018-05-30T13:28:50Z,,2018-06-01T15:06:42Z,2,26,0,My internet is too slow to pull all those images locally 😭 Trying in TravisCI :D,5,1
22,2018-05-30T18:29:36Z,2018-05-31T00:03:11Z,2018-05-31T00:03:11Z,1,1,1,This is printing too much!,3,0
24,2018-05-31T04:09:45Z,,2018-05-31T14:04:38Z,1,17,10,"Providing some updates to the README to make some pre-reqs clear as well as provide advice on building on macOS.
[ci skip]",4,2
54,2018-05-31T15:31:38Z,2018-05-31T21:39:45Z,2018-05-31T21:39:45Z,3,27,29,"Just remove the comments: TODO DRY with setTimeout. And BTW in MDN, as the parameter of delay:

If this parameter is less than 10, a value of 10 is used

So I just corrected the value in timers.go :)",5,6
57,2018-05-31T17:31:17Z,2018-05-31T21:17:33Z,2018-05-31T21:17:33Z,1,0,0,"Summary
This PR is to rename LICENSE.txt to LICENSE so that Github can identify and display it at the landing page.",4,2
58,2018-05-31T18:35:23Z,2018-05-31T21:32:03Z,2018-05-31T21:32:03Z,1,37,34,"Summary
This PR is to enhance the README with following two points:

Leverage correct language name bash so that Github can highlight it correctly.
Add some reference links so visitors can access to the source repos quickly.",4,1
63,2018-06-01T05:44:18Z,,2018-06-22T13:34:24Z,5,140,36,"$ DOCKER_DEV_IMAGE=aledbf/deno:dev-image-0.1 make docker-dev
This is the output of the build https://gist.github.com/aledbf/f39189a7e7ea3beff7aee676d85e5c51
After this running make run <makefile task> we can run any task inside a container:
$ make run deno
yarn
yarn install v1.7.0
[1/4] Resolving packages...
[2/4] Fetching packages...
info fsevents@1.2.3: The platform ""linux"" is incompatible with this module.
info ""fsevents@1.2.3"" is an optional dependency and failed compatibility check. Excluding it from installation.
[3/4] Linking dependencies...
[4/4] Building fresh packages...
Done in 21.97s.
./node_modules/.bin/pbjs -t static-module -w commonjs -o msg.pb.js msg.proto
./node_modules/.bin/pbts -o msg.pb.d.ts msg.pb.js
./node_modules/.bin/tsc --noEmit # Only for type checking.
./node_modules/.bin/parcel build --out-dir=dist/ --log-level=1 --no-minify main.ts
cp node_modules/typescript/lib/*d.ts dist/
cp deno.d.ts dist/
go-bindata -pkg deno -o assets.go dist/
go build -o deno ./cmd
make: 'deno' is up to date.
$ make run test
go test -v
=== RUN   TestLoadOutputCodeCache
--- PASS: TestLoadOutputCodeCache (0.00s)
=== RUN   TestIntegrationFiles
=== RUN   TestIntegrationFiles/001_hello.js.out
=== RUN   TestIntegrationFiles/002_hello.ts.out
=== RUN   TestIntegrationFiles/003_relative_import.ts.out
=== RUN   TestIntegrationFiles/004_set_timeout.ts.out
=== RUN   TestIntegrationFiles/005_more_imports.ts.out
=== RUN   TestIntegrationFiles/006_url_imports.ts.out
=== RUN   TestIntegrationFiles/009_pub_sub.ts.out
=== RUN   TestIntegrationFiles/010_set_interval.ts.out
=== RUN   TestIntegrationFiles/012_async.ts.out
=== RUN   TestIntegrationFiles/async_error.ts.out
=== RUN   TestIntegrationFiles/error.ts.out
=== RUN   TestIntegrationFiles/import_typescript.ts.out
--- FAIL: TestIntegrationFiles (15.70s)
    --- PASS: TestIntegrationFiles/001_hello.js.out (1.06s)
    --- PASS: TestIntegrationFiles/002_hello.ts.out (1.05s)
    --- PASS: TestIntegrationFiles/003_relative_import.ts.out (1.13s)
    --- PASS: TestIntegrationFiles/004_set_timeout.ts.out (1.06s)
    --- PASS: TestIntegrationFiles/005_more_imports.ts.out (1.26s)
    --- PASS: TestIntegrationFiles/006_url_imports.ts.out (1.12s)
    --- FAIL: TestIntegrationFiles/009_pub_sub.ts.out (2.03s)
    	integration_test.go:61: Expected success exit status 1
    --- PASS: TestIntegrationFiles/010_set_interval.ts.out (1.60s)
    --- PASS: TestIntegrationFiles/012_async.ts.out (1.21s)
    --- PASS: TestIntegrationFiles/async_error.ts.out (1.08s)
    --- PASS: TestIntegrationFiles/error.ts.out (2.00s)
    --- PASS: TestIntegrationFiles/import_typescript.ts.out (1.11s)
=== RUN   TestIntegrationUrlArgs
good cacheFn /tmp/TestIntegration387570343/src/localhost:4545/testdata/001_hello.js
bad cacheFn /tmp/TestIntegration271357914/src/localhost:4546/testdata/001_hello.js
--- PASS: TestIntegrationUrlArgs (2.41s)
=== RUN   TestTestsTs
1/4 +0 -0: tests_test
2/4 +1 -0: tests_fetch
3/4 +2 -0: tests_readFileSync
deno_1.readFileSync is not a function TypeError: deno_1.readFileSync is not a function
    at tests_readFileSync (/go/src/github.com/ry/deno/tests.ts:13:27)
    at Object.runTests [as cb] (/go/src/github.com/ry/deno/testing/testing.ts:62:23)
--- FAIL: TestTestsTs (0.60s)
	integration_test.go:146: exit status 1
=== RUN   TestResolveModule1
--- PASS: TestResolveModule1 (0.00s)
=== RUN   TestResolveModule2
--- PASS: TestResolveModule2 (0.00s)
=== RUN   TestResolveModule3
--- PASS: TestResolveModule3 (0.00s)
=== RUN   TestResolveModule4
--- PASS: TestResolveModule4 (0.00s)
=== RUN   TestResolveModuleExtensionsAintSpecial
--- PASS: TestResolveModuleExtensionsAintSpecial (0.00s)
=== RUN   TestPatternMatch
--- PASS: TestPatternMatch (0.00s)
=== RUN   TestPatternMatchStackTrace
--- PASS: TestPatternMatchStackTrace (0.00s)
FAIL
exit status 1
FAIL	github.com/ry/deno	18.705s
Makefile:79: recipe for target 'test' failed
make: *** [test] Error 1
Makefile:95: recipe for target 'run' failed
make: *** [run] Error 2
$ ldd deno
	linux-vdso.so.1 (0x00007ffcca0f9000)
	libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb3de490000)
	libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb3de102000)
	libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb3ddd64000)
	libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb3ddb4c000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb3dd75b000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fb3de6af000)
$ ./deno testdata/001_hello.js
Hello World
This is similar to https://github.com/ry/deno/pull/16",5,7
65,2018-06-01T06:15:38Z,,2018-06-01T18:36:05Z,1,1,0,add: git submodule update --init,4,8
72,2018-06-01T09:07:55Z,2018-06-04T06:56:58Z,2018-06-04T06:56:58Z,2,5,5,"Summary
This PR is to remove one TODO and leverage the spread operator to replace the apply which is not performance friendly.",4,1
73,2018-06-01T09:29:16Z,2018-06-01T18:33:17Z,2018-06-01T18:33:17Z,1,1,1,,4,2
83,2018-06-01T12:39:17Z,2018-06-04T06:59:02Z,2018-06-04T06:59:02Z,3,4,4,"Just made some insignificant changes to pass the tslint
Checklist


 make test  passes
 tests and/or benchmarks are included
 documentation is changed or added",3,0
90,2018-06-01T14:02:51Z,,2018-06-01T18:34:59Z,1,2,0,"I was thinking about adding coc in the issue template, when #79 being accepted. 😄",4,2
93,2018-06-01T16:24:44Z,,2018-06-04T07:03:43Z,2,2,0,"To avoid issues like https://github.com/ry/deno/pull/73
resolves #74",3,2
98,2018-06-02T00:49:10Z,,2018-06-22T13:35:46Z,7,68,4,,5,3
99,2018-06-02T05:21:51Z,2018-06-04T07:06:42Z,2018-06-04T07:06:42Z,1,2,2,[ts] Return type of exported function has or is using private name 'AmdDefine'.,5,3
100,2018-06-02T06:33:18Z,,2018-06-05T10:19:09Z,0,0,0,Signed-off-by: Cholerae Hu choleraehyq@gmail.com,4,2
102,2018-06-02T09:46:56Z,2018-06-05T07:58:51Z,2018-06-05T07:58:51Z,2,19,0,I'm not sure that if the assertion failed an error should be thrown.,6,10
110,2018-06-02T20:08:01Z,2018-06-04T07:41:51Z,2018-06-04T07:41:51Z,1,11,4,"Even though the readme told me there was going to be an error, I was still confused about this error, as it looked unrelated to fetching the sources.
To clarify this update the readme to spell out the expected error.
Fixes #109",6,3
111,2018-06-03T05:24:20Z,2018-06-04T08:03:49Z,2018-06-04T08:03:49Z,1,1,3,use check function to check and handle error,4,2
129,2018-06-04T09:41:09Z,,2018-06-05T08:16:07Z,1,13,14,"Summary
This PR is to enhance the README with following three points:

Fix typo.
Delete unnecessary blank lines.
Delete unnecessary spaces between ``` and the language name bash.
Add some blank lines. Fenced code blocks should be surrounded by blank lines.",4,3
130,2018-06-04T09:42:45Z,2018-06-05T08:43:01Z,2018-06-05T08:43:01Z,2,11,10,Use object destructing to reduce some redundant codes.,5,1
136,2018-06-05T03:36:06Z,2018-06-05T08:10:28Z,2018-06-05T08:10:28Z,4,14,15,"ATT
Checklist


 make test  passes
 tests and/or benchmarks are included
 documentation is changed or added",2,0
139,2018-06-05T06:45:46Z,2018-06-05T08:07:40Z,2018-06-05T08:07:40Z,3,8,21,,2,0
141,2018-06-05T07:31:06Z,,2018-06-11T10:00:50Z,4,197,33,"Moving console definition to own file console.ts and make it a class.
Replaced JSON.stringify() with custom stringify() to avoid crashing on circular objects and work with methods/functions by displaying [Function].
Add some aliases to already implemented console methods.",3,6
143,2018-06-05T09:05:13Z,2018-06-11T13:08:23Z,2018-06-11T13:08:23Z,3,5,4,"Checklist

 make test passes
 tests and/or benchmarks are included
 documentation is changed or added",6,3
144,2018-06-05T10:34:39Z,2018-06-09T09:36:56Z,2018-06-09T09:36:56Z,1,1,1,Change a little typo in comment,3,1
146,2018-06-05T14:23:57Z,,2018-06-07T16:38:44Z,4,12,1,"Add and handle the error thrown because of error module name.
Run normally when script file is empty.
Checklist


 make test  passes
 tests and/or benchmarks are included
 documentation is changed or added",3,3
148,2018-06-05T16:46:23Z,,2018-06-23T07:54:46Z,1,77,0,"Compliant with the definition of 'Headers' .
[https://developer.mozilla.org/en-US/docs/Web/API/Headers(url)
[https://fetch.spec.whatwg.org/#headers-class(url)",4,4
151,2018-06-05T19:47:45Z,,2018-06-23T07:56:21Z,8,132,4,"Implement async version for readFile. Simulated fetch in its handling
May have problem with overflowing ids (to be fixed along with that of fetch in the future)",3,1
153,2018-06-06T04:07:08Z,,2018-06-23T07:58:18Z,4,62,44,"I found the V8Worker2.recv was called redundantly when I import dispach.ts. In fact, what we want is calling recv just once when deno init, so I modify the code.
I also add an util function named once, because I find other cases where function just be called once, such as sub(""start"").
Checklist


 make test  passes
 tests and/or benchmarks are included
 documentation is changed or added",3,3
155,2018-06-06T04:34:07Z,2018-06-11T09:29:14Z,2018-06-11T09:29:14Z,1,8,3,"[fetch.ts] avoid duplicate import about util.
checklist

 make test passes
 tests and/or benchmarks are included
 documentation is changed or added",4,2
163,2018-06-06T14:20:39Z,,2018-06-08T08:36:39Z,1,35,10,"Format README.md
Add some compile instructions",4,1
167,2018-06-06T16:31:13Z,,2018-06-08T08:37:30Z,1,6,0,"Maybe we can remind them to use ccache,if we can not use and add pkg-config tool on Mac.",5,2
176,2018-06-07T01:37:45Z,2018-06-10T23:31:25Z,2018-06-10T23:31:25Z,4,8,8,I rewrote a number of lines where traditional string concatenation was used in favor of the contemporary template literal syntax.,10,11
182,2018-06-07T07:58:16Z,,2018-06-07T14:57:46Z,2,12,12,,2,1
187,2018-06-07T09:26:09Z,,2018-06-27T15:24:50Z,7,49,1,,4,13
191,2018-06-07T14:08:49Z,,2018-06-28T19:31:10Z,3,129,13,"I'm just hacking around, might benefit from #148.
Also this approach passes an encoded JSON (which requires unmarshaling on the Go side).
Now it's possible to do stuff like:
async function tests_fetch() {
    let req = new Request(""http://httpbin.org/headers"", {method: ""GET""});
    const response = await fetch(req);
    const json = await response.json();
    console.log(json)
}
Feedback/ideas appreciated 👍",4,1
193,2018-06-07T15:20:04Z,2018-06-09T18:51:18Z,2018-06-09T18:51:18Z,1,32,9,"I've found that with the current implementation the main loop isn't tracked. With this tweak we could inspect Fetch and any other internal calls:

We could get more useful information if we extend this, I've also added memory profiling and modified the flags in order to allow both. Previously:
% deno -goprof cpu -allow-net hello.ts

After this tweak:
% deno -cpuprof cpu.out -memprof mem.out -allow-net hello.ts",2,2
209,2018-06-08T06:39:40Z,,2018-06-23T08:00:35Z,12,374,1,"Felt inspired by the last thing @ry mentioned in his talk: a ⭐️ for the first who implement a web server?
This is very experimental!
Sample server:
% deno -allow-net samples/server.ts 

Sample endpoints:
% curl http://localhost:5000/hello
Hello from Deno
% curl http://localhost:5000/echo -X POST --data '{""echo"":""jsontest""}'
jsontest


Any other endpoint will throw HTTP 400.
It will try to parse request body as JSON by default (and this will be accessible from the server request callback). If this fails you will get a string representation of the body.
You can res.Write strings and Uint8Array.
Headers are still missing, think there's another PR that may help with this.
Have added a bunch of PB stuff.
The rps are pretty decent.
No tests yet

Screen recording: https://youtu.be/vbFr29wMzSA",5,13
214,2018-06-08T19:49:12Z,2018-06-09T09:10:22Z,2018-06-09T09:10:22Z,1,2,2,Also fix typo on comment,5,1
215,2018-06-08T21:11:40Z,2018-06-09T09:08:24Z,2018-06-09T09:08:24Z,1,1,0,delete timer in the Map(timers) when call clearTimer,3,1
222,2018-06-09T09:54:10Z,,2018-06-28T19:30:07Z,2,7,8,"This PR is intend to address the following issue:

Use strict check and avoid duplicate null and empty check
Remove unwanted else statement",4,1
229,2018-06-10T03:43:41Z,,2018-06-22T19:18:41Z,10,454,1,"Similar to #209
I've added tests and also a sample echo server in samples/echoserver.ts.",5,5
247,2018-06-11T22:00:49Z,,2018-06-22T12:25:27Z,5,148,1,"This is a naive implementation that needs a proper solution.
Opened PR for discussion and show there's WIP (i.e. avoiding duplicates like #228).",4,5
251,2018-06-12T20:31:04Z,2018-06-12T23:48:57Z,2018-06-12T23:48:57Z,8,53,10,,3,2
252,2018-06-13T01:42:32Z,,2018-06-13T13:08:36Z,2,4,4,"This PR is more advisory.  Once you get to dealing with throwing errors in TypeScript, you will encounter a bug in TypeScript 2.9.1 (and in theory 2.9.3 when it is released) that will throw an exception (See: microsoft/TypeScript#24638).
This is now fixed in master and the daily builds of TypeScript, but hasn't been back ported.  Therefore migrating to typescript@next will utilise the daily builds of TypeScript and avoid the issue.",3,1
255,2018-06-13T18:59:06Z,2018-06-14T12:19:18Z,2018-06-14T12:19:18Z,22,435,356,,2,1
257,2018-06-14T12:33:12Z,2018-06-14T15:24:02Z,2018-06-14T15:24:02Z,6,49,26,,3,0
258,2018-06-14T14:57:54Z,,2018-06-22T13:32:58Z,3,35,0,"I hope I can do some parts. 😊😉
Feedback/ suggestion / ideas appreciated 😺😺",6,5
260,2018-06-15T15:50:10Z,2018-06-15T20:19:01Z,2018-06-15T20:19:01Z,5,34,13,,2,0
262,2018-06-16T00:09:50Z,2018-06-17T10:54:42Z,2018-06-17T10:54:42Z,10,272,64,,5,6
265,2018-06-17T15:14:14Z,2018-06-17T17:22:51Z,2018-06-17T17:22:51Z,1,52,53,,2,0
268,2018-06-18T14:01:57Z,2018-06-19T13:07:32Z,2018-06-19T13:07:32Z,10,72,96,"Don't call eval() in mock_runtime - not allowed - see js2c.py.
Don't use v8_use_external_startup_data
Move MakeSnapshot to snapshot_creator.cc",2,0
270,2018-06-19T11:04:42Z,2018-06-22T10:38:17Z,2018-06-22T10:38:17Z,8,257,67,"Plan:

Travis to only check deno2
Once that's working remove original deno and move deno2 to root
Leave original deno in a branch and link to it in a readme.",2,1
271,2018-06-19T13:02:28Z,2018-06-19T17:06:13Z,2018-06-19T17:06:13Z,1,0,1,Because yarn and npm reset the style every time they update the file.,2,0
273,2018-06-19T15:56:00Z,2018-06-19T17:09:48Z,2018-06-19T17:09:48Z,2,45,34,,2,0
274,2018-06-19T17:06:20Z,2018-06-19T18:11:02Z,2018-06-19T18:11:02Z,1,34,13,,2,0
275,2018-06-19T18:13:33Z,,2018-06-22T11:28:04Z,2,9,5,"cmd doesn't support semicolons, use && instead.
Run python explicitly.
Use quote escaping that works in both bash and cmd.
Set DEPOT_TOOLS_WIN_TOOLCHAIN=0 by default (to avoid non-googlers
being asked for credentials).
Pass shell=True to run .bat files.

See also: v8/node#60",4,9
276,2018-06-21T20:21:33Z,2018-06-22T12:23:42Z,2018-06-22T12:23:43Z,74,114,7988,"The old implementation will stay around at: https://github.com/ry/deno/tree/golang
I want to delete these files to reduce confusion
After this we will rename deno2 to src
#270 should be landed first",3,4
278,2018-06-22T12:59:50Z,2018-06-22T21:42:05Z,2018-06-22T21:42:05Z,3,32,3,,2,1
279,2018-06-22T13:42:14Z,2018-06-22T15:50:28Z,2018-06-22T15:50:28Z,1,12,7,Fixing continued travis problems: https://travis-ci.com/ry/deno/builds/77060862,2,0
280,2018-06-22T16:12:23Z,2018-06-22T17:22:39Z,2018-06-22T17:22:39Z,1,2,0,,2,0
281,2018-06-22T19:16:42Z,2018-06-22T21:19:56Z,2018-06-22T21:19:56Z,5,31,36,(also just checking that travis build cache is working),2,0
282,2018-06-22T21:20:54Z,2018-07-03T19:22:40Z,2018-07-03T19:22:40Z,12,149,393,,2,1
284,2018-06-23T07:41:42Z,2018-06-25T21:08:15Z,2018-06-25T21:08:15Z,3,7,7,,2,0
286,2018-06-23T09:52:30Z,2018-06-25T21:07:59Z,2018-06-25T21:07:59Z,2,5,6,,2,0
287,2018-06-23T16:01:46Z,,2018-07-02T23:55:35Z,30,3021,0,"This is still a work in progress and needs tests
Also, there are some todos in code which needs to be resolved before the merge
Parsers:

 declare
 namespace
 variable declaration
 export
 default export
 function
 enum
 type
 interface
 class
 CommonJs (non-TypeScript js files)

Tests:

 enum
 class
 type
 interface
 namespace
 variable declaration
 export
 default export
 document private type/interface used in exported type/interface or declaration
 removeWhiteSpaces (current implementation is broken!)
 One2ManyMap
 JavaScript files

etc:

 Add readme
 Run tests on travis
 async
 write docs.d.ts (will be addressed in a follow up pr)
 rename VISITOR to defineVisitor and run prettier
 get jsdoc of MethodSignature

current plan:

complete export
support default export
add ExportAssignment
add module.exports = ...
Rewrite compiler host
Add missing tests",2,3
292,2018-06-27T05:05:12Z,2018-06-27T09:39:29Z,2018-06-27T09:39:29Z,1,1,1,"If you follow the build instructions, gn gen fails because the yarn step changes the cwd.
To reproduce (tested on OS X and Linux):
$ cd js; yarn install
# This will run inside the js directory:
$ gn gen out/Debug --args='cc_wrapper=""ccache"" is_debug=true '
Output:
Traceback (most recent call last):
  File ""/Users/matias/dev/depot_tools/gn.py"", line 48, in <module>
    sys.exit(main(sys.argv))
  File ""/Users/matias/dev/depot_tools/gn.py"", line 26, in main
    'gn', 'gn' + gclient_utils.GetExeSuffix())
  File ""/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.py"", line 70, in join
    elif path == '' or path.endswith('/'):
Possible fix:
$ cd js; yarn install
# Go back to the src directory
$ cd -
$ gn gen out/Debug --args='cc_wrapper=""ccache"" is_debug=true '
Output:
Done. Made 151 targets from 81 files in 471ms

👍",3,0
294,2018-06-27T09:53:07Z,2018-06-28T19:56:54Z,2018-06-28T19:56:55Z,6,38,30,Ref #285,3,0
301,2018-06-28T14:51:58Z,,2018-06-28T18:44:17Z,1,167,0,,2,2
303,2018-06-28T17:59:50Z,2018-06-28T19:23:12Z,2018-06-28T19:23:12Z,1,4,2,,2,0
305,2018-06-29T12:18:25Z,2018-06-29T15:20:02Z,2018-06-29T15:20:02Z,1,134,18,,3,1
306,2018-06-29T17:14:48Z,,2018-07-01T14:08:19Z,4,56,0,"We can wrap the compile instructions in a docker compose environment for local development.
Usage:
docker-compose build        # build all images
docker-compose run prebuild # run bash in a prebuild container
docker-compose run build    # run bash in a build container",4,37
307,2018-06-29T22:09:37Z,,2018-07-01T15:44:01Z,7,83,328,"Attempt to make the Rust Deno API more rusty.
Depends on #282",5,4
309,2018-07-01T10:01:41Z,2018-07-01T11:47:29Z,2018-07-01T11:47:29Z,22,42,49,"I tried the step 2 of #285. I moved things like the below:
//src/BUILD.gn -> //BUILD.gn
//src/.gn -> //.gn
//src/.gclient -> //.gclient
//src/deno.gni -> //deno.gni
//src/v8 -> //v8
//src/build -> //build
//src/build_overrides -> //build_overrides
//src/buildtools -> //buildtools
//src/testing -> //testing
//src/tools/clang -> //tools/clang
//src/third_party/googletest -> //third_party/googletest
//src/third_party/jinja2 -> //third_party/jinja2
//src/third_party/llvm-build -> //third_party/llvm-build
//src/third_party/markupsafe -> //third_party/markupsafe

I updated the build instructions as well.
I was able to build out/Debug/deno with this change.",2,1
313,2018-07-01T12:20:36Z,2018-07-01T13:28:37Z,2018-07-01T13:28:37Z,3,11,1,ref #312,2,0
317,2018-07-01T16:21:41Z,2018-07-02T07:09:24Z,2018-07-02T07:09:24Z,2,5,2,,2,0
319,2018-07-02T09:09:20Z,2018-07-04T12:24:26Z,2018-07-04T12:24:26Z,5,139,139,,2,0
320,2018-07-02T09:23:07Z,2018-07-03T19:18:43Z,2018-07-03T19:18:43Z,1,15,13,,2,0
322,2018-07-03T05:49:11Z,2018-07-03T08:15:33Z,2018-07-03T08:15:33Z,23,45,36,"This is step4 of #285. I moved //v8 to //third_party/v8. I updated the symlinks and include paths to point the new places.

Note: I tried gclient flatten first but the generated DEPS file was huge and seemed unabled to maintain.
Then I tried to change name property of the v8 solution in .gclient from v8 to third_party/v8, but with that change, v8 was checked out in the 2 places //v8 and //third_party/v8 both partially and seemed unable to work with it.
Then I moved .gclient file under third_party/ directory and it seemed working. (And therefore we need to run gclient sync under third_party/ with this change.)",2,3
323,2018-07-03T14:08:39Z,,2018-07-05T19:09:19Z,7,95,0,,1,4
324,2018-07-03T22:25:49Z,2018-07-03T23:55:41Z,2018-07-03T23:55:41Z,2,3,29,,3,2
325,2018-07-03T22:58:13Z,2018-07-04T01:03:57Z,2018-07-04T01:03:57Z,3,4,4,"so it doesn't accidentally get run in root dir.
Ref #322
cc @kt3k",3,0
326,2018-07-04T00:27:15Z,2018-07-04T01:46:53Z,2018-07-04T01:46:53Z,1,0,2,,2,0
328,2018-07-04T05:08:54Z,2018-07-04T13:05:00Z,2018-07-04T13:05:00Z,6,41,8,"This PR tries to solve #312. I added tools/build_third_party.py, which runs gclient and yarn for updating gclient deps and npm deps.
I moved the place of node_modules from js/ to third_party/ (and made the symlink js/node_modules to point it) to enable separating third_party to a different repository and store all deps in it.",4,3
329,2018-07-04T17:07:27Z,2018-07-04T19:55:59Z,2018-07-04T19:56:00Z,1,1,1,,2,0
330,2018-07-04T18:54:25Z,2018-07-04T20:43:09Z,2018-07-04T20:43:09Z,26,872,1876,,2,0
331,2018-07-04T20:46:20Z,2018-07-05T16:41:29Z,2018-07-05T16:41:29Z,3,4,4,,2,0
334,2018-07-05T21:50:16Z,2018-07-06T21:33:08Z,2018-07-06T21:33:08Z,19,1888,192,depends on #337,2,1
337,2018-07-06T05:17:15Z,2018-07-06T14:46:31Z,2018-07-06T14:46:32Z,8,183,146,Setup for rust modules that get linked into C++.,2,1
341,2018-07-06T20:35:47Z,2018-07-06T22:25:10Z,2018-07-06T22:25:10Z,8,29,43,depends on #334,2,0
343,2018-07-07T10:20:03Z,2018-07-08T05:56:04Z,2018-07-08T05:56:04Z,3,31,12,Signed-off-by: Li Hao hao.x.li@intel.com,4,4
344,2018-07-07T14:54:50Z,2018-07-07T21:41:00Z,2018-07-07T21:41:00Z,11,218,435,"The flatbuffers gn build files are, unfortunately, maintained outside of the
Flatbuffer repository. In the Deno build, these files should be located in
//third_party/flatbuffers/. But because //third_party will be a separate git
submodule, the build files are maintained here in //build_extra/flatbuffers/ and
symlinks from //third_party/flatbuffers are created.
I opened a discussion in flatbuffers issues about gn build files: google/flatbuffers#4809
cc @kt3k",3,0
346,2018-07-08T05:14:19Z,2018-07-08T06:18:15Z,2018-07-08T06:18:15Z,9,41,18,"This PR is based on the comment of Ryan in #328.
The script now creates //third_party/ and sets up the symlinks in it, and then updates all gclient and npm deps.
I copied symlink function from //js/run_node.py for now. I'd like to leave the task of creating common utilities for later work because the layout of scripts seems incovenient to do it.
If this PR is merged, everyone needs to run ./tools/build_third_party.py again.",3,0
347,2018-07-08T08:02:34Z,2018-07-08T17:40:19Z,2018-07-08T17:40:19Z,14,130,150,"Factor out tools/util.py
Move js/*.py to tools.
Rewrite tools/format.sh in python.
Run lint first in travis.

cc @kt3k",3,0
348,2018-07-08T09:18:37Z,2018-07-09T20:50:34Z,2018-07-09T20:50:34Z,4,85,33,,2,2
349,2018-07-08T10:31:06Z,2018-07-08T17:42:14Z,2018-07-08T17:42:14Z,5,96,13,,2,0
350,2018-07-08T19:01:52Z,2018-07-08T21:26:47Z,2018-07-08T21:26:47Z,5,31,13,"This allows for correlating response messages to the command message that
caused them.",2,1
351,2018-07-09T02:05:12Z,2018-07-12T21:14:08Z,2018-07-12T21:14:08Z,12,441,77,"Remove channel argument from Rust message callback;
this makes deno not crash any more.


send()/recv() now operate on TypedArrays rather than ArrayBuffers.


Remove a copy (through ArrayBuffer.slice()) from the send path.


Remove a copy (through v8::ArrayBuffer::New()) from the return path.


After moving a buffer from JS to native, the ArrayBuffer object and
it's views are made inaccessible ('neutered').


struct deno_buf now holds two [ptr, length] tuples, one for the actual
memory allocation, and one for the logical data contained therein.
This is necessary because flatbuffers fills it's buffer bottom-up, so
the serialized blob doesn't start at beginning of the buffer, but
somewhere in the middle.",2,0
353,2018-07-09T07:32:43Z,2018-07-09T15:05:03Z,2018-07-09T15:05:03Z,6,19,15,"Added prettier dependency in package.json
Changed to use local version of prettier in format.py.
Changed to use .prettierignore for ignoring certain files.",2,3
355,2018-07-10T16:25:13Z,2018-07-10T18:56:13Z,2018-07-10T18:56:13Z,5,109,18,,2,0
356,2018-07-10T16:52:40Z,2018-07-10T23:18:30Z,2018-07-10T23:18:30Z,1,7,1,,2,0
359,2018-07-11T21:43:22Z,2018-07-12T19:06:36Z,2018-07-12T19:06:37Z,3,98,8,"This PR attempts to solve #311.
I wouldn't expect for this PR to be merged right away, but this is a proof of concept I've been experimenting with after taking a stab at it.
This PR introduces a new src/from_filesystem.cc that is akin to src/from_snapshot.cc except that instead of initializing the v8 context with StartupBlob_snapshot(), it loads js from filesystem using the InitializeContext exposed in internal.h.
It doesn't introduce a new target as @ry suggested in the issue. Instead, a is_debug check in BUILD.gn will conditionally build libdeno_nosnapshot if it is true.
It does now!
Benchmarks when adding new deno.print to main.ts file:
master
ninja -v -C out/Debug deno  47.14s user 3.42s system 109% cpu 46.232 total

deno_nosnapshot
ninja -v -C out/Debug deno  9.82s user 1.27s system 139% cpu 7.947 total

master build log
ninja: Entering directory `out/Debug'
[1/1] ../../third_party/v8/buildtools/mac/gn --root=../.. -q gen .
[1/12] ccache ../../third_party/llvm-build/Release+Asserts/bin/clang++ -MMD -MF obj/deno_nosnapshot/binding.o.d -DV8_DEPRECATION_WARNINGS -DNO_TCMALLOC -DCHROMIUM_BUILD -DFIELDTRIAL_TESTING_ENABLED -D_LIBCPP_HAS_NO_ALIGNED_ALLOCATION -DCR_XCODE_VERSION=0941 -DCR_CLANG_REVISION=\""335864-1\"" -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORE=0 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1 -DDEBUG -DV8_ENABLE_CHECKS -DV8_EMBEDDER_STRING=\""-deno\"" -DENABLE_DISASSEMBLER -DV8_TYPED_ARRAY_MAX_SIZE_IN_HEAP=64 -DENABLE_MINOR_MC -DOBJECT_PRINT -DVERIFY_HEAP -DV8_TRACE_MAPS -DV8_ENABLE_ALLOCATION_TIMEOUT -DV8_ENABLE_FORCE_SLOW_PATH -DV8_ENABLE_CHECKS -DENABLE_HANDLE_ZAPPING -DV8_USE_SNAPSHOT -DV8_CONCURRENT_MARKING -DV8_CHECK_MICROTASKS_SCOPES_CONSISTENCY -DV8_EMBEDDED_BUILTINS -DV8_TARGET_ARCH_X64 -DDEBUG -DDISABLE_UNTRUSTED_CODE_MITIGATIONS -I../.. -Igen -I../../third_party/v8 -I../../third_party/v8/include -Igen/third_party/v8/include -fno-strict-aliasing -fstack-protector-strong -Wno-builtin-macro-redefined -D__DATE__= -D__TIME__= -D__TIMESTAMP__= -fcolor-diagnostics -fmerge-all-constants -Xclang -mllvm -Xclang -instcombine-lower-dbg-declare=0 -no-canonical-prefixes -arch x86_64 -Wall -Wextra -Wimplicit-fallthrough -Wthread-safety -Wunguarded-availability -Wno-missing-field-initializers -Wno-unused-parameter -Wno-c++11-narrowing -Wno-covered-switch-default -Wno-unneeded-internal-declaration -Wno-undefined-var-template -Wno-address-of-packed-member -Wno-nonportable-include-path -Wno-user-defined-warnings -Wno-unused-lambda-capture -Wno-null-pointer-arithmetic -Wno-enum-compare-switch -Wno-ignored-pragma-optimize -fno-omit-frame-pointer -g1 -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -Wheader-hygiene -Wstring-conversion -Wtautological-overlap-compare -Wmissing-field-initializers -Winconsistent-missing-override -Wunreachable-code -Wshorten-64-to-32 -O3 -fvisibility=default -Wno-undefined-bool-conversion -Wno-tautological-undefined-compare -std=c++14 -stdlib=libc++ -fno-exceptions -fno-rtti -c ../../src/binding.cc -o obj/deno_nosnapshot/binding.o
[2/12] touch obj/deno_nosnapshot.stamp
[3/12] TOOL_VERSION=1530535641 ../../build/toolchain/mac/linker_driver.py ../../third_party/llvm-build/Release+Asserts/bin/clang++  -stdlib=libc++ -arch x86_64 -segprot PROTECTED_MEMORY rw r -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -Wl,-ObjC -o ""./snapshot_creator"" -Wl,-filelist,""./snapshot_creator.rsp""
[4/12] python ../../tools/run_node.py ./node_modules/typescript/bin/tsc --project ../../tsconfig.json --outDir gen/tsc_dist/
node ./node_modules/typescript/bin/tsc --project ../../tsconfig.json --outDir gen/tsc_dist/
[5/12] touch obj/run_tsc.stamp
[6/12] python ../../tools/run_node.py ./node_modules/parcel-bundler/bin/cli.js build --no-minify --out-dir gen/bundle/ ../../js/main.ts

<REDACTED>
✨  Built in 4.12s.

gen/bundle/main.js     ⚠️  6.7 MB    5.77s
gen/bundle/main.map          0 B    6.45s
node ./node_modules/parcel-bundler/bin/cli.js build --no-minify --out-dir gen/bundle/ ../../js/main.ts
[7/12] touch obj/bundle.stamp
[8/12] python ../../third_party/v8/tools/run.py /Users/Faris/Forks/deno/out/Debug/snapshot_creator gen/bundle/main.js gen/snapshot_deno.cc
[9/12] touch obj/create_snapshot_deno.stamp
[10/12] ccache ../../third_party/llvm-build/Release+Asserts/bin/clang++ -MMD -MF obj/libdeno/from_snapshot.o.d -DV8_DEPRECATION_WARNINGS -DNO_TCMALLOC -DCHROMIUM_BUILD -DFIELDTRIAL_TESTING_ENABLED -D_LIBCPP_HAS_NO_ALIGNED_ALLOCATION -DCR_XCODE_VERSION=0941 -DCR_CLANG_REVISION=\""335864-1\"" -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORE=0 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1 -DDEBUG -DV8_ENABLE_CHECKS -I../.. -Igen -I../../third_party/v8 -I../../third_party/v8/include -Igen/third_party/v8/include -fno-strict-aliasing -fstack-protector-strong -Wno-builtin-macro-redefined -D__DATE__= -D__TIME__= -D__TIMESTAMP__= -fcolor-diagnostics -fmerge-all-constants -Xclang -mllvm -Xclang -instcombine-lower-dbg-declare=0 -no-canonical-prefixes -arch x86_64 -Wall -Wextra -Wimplicit-fallthrough -Wthread-safety -Wunguarded-availability -Wno-missing-field-initializers -Wno-unused-parameter -Wno-c++11-narrowing -Wno-covered-switch-default -Wno-unneeded-internal-declaration -Wno-undefined-var-template -Wno-address-of-packed-member -Wno-nonportable-include-path -Wno-user-defined-warnings -Wno-unused-lambda-capture -Wno-null-pointer-arithmetic -Wno-enum-compare-switch -Wno-ignored-pragma-optimize -O0 -fno-omit-frame-pointer -g1 -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -fvisibility=hidden -Wheader-hygiene -Wstring-conversion -Wtautological-overlap-compare -Wno-undefined-bool-conversion -Wno-tautological-undefined-compare -std=c++14 -stdlib=libc++ -fno-exceptions -fno-rtti -fvisibility-inlines-hidden -c ../../src/from_snapshot.cc -o obj/libdeno/from_snapshot.o
[11/12] rm -f obj/libdeno.a && TOOL_VERSION=1530535641 python ../../build/toolchain/mac/filter_libtool.py libtool -static  -o obj/libdeno.a -filelist obj/libdeno.a.rsp
[12/12] TOOL_VERSION=1530535641 ../../build/toolchain/mac/linker_driver.py ../../third_party/llvm-build/Release+Asserts/bin/clang++  -stdlib=libc++ -arch x86_64 -segprot PROTECTED_MEMORY rw r -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -Wl,-ObjC -o ""./deno"" -Wl,-filelist,""./deno.rsp""  obj/deno_bin.o -lresolv obj/build_extra/rust/stdlib.a obj/build_extra/rust/liblibc.rlib


deno_nosnapshot build log
ninja: Entering directory `out/Debug'
[1/1] ../../third_party/v8/buildtools/mac/gn --root=../.. -q gen .
[1/7] python ../../tools/run_node.py ./node_modules/typescript/bin/tsc --project ../../tsconfig.json --outDir gen/tsc_dist/
node ./node_modules/typescript/bin/tsc --project ../../tsconfig.json --outDir gen/tsc_dist/
[2/7] touch obj/run_tsc.stamp
[3/7] python ../../tools/run_node.py ./node_modules/parcel-bundler/bin/cli.js build --no-minify --out-dir gen/bundle/ ../../js/main.ts

<REDACTED>
✨  Built in 4.00s.

gen/bundle/main.js     ⚠️  6.7 MB    5.68s
gen/bundle/main.map          0 B    6.39s
node ./node_modules/parcel-bundler/bin/cli.js build --no-minify --out-dir gen/bundle/ ../../js/main.ts
[4/7] touch obj/bundle.stamp
[5/7] ccache ../../third_party/llvm-build/Release+Asserts/bin/clang++ -MMD -MF obj/libdeno_nosnapshot/from_filesystem.o.d -DV8_DEPRECATION_WARNINGS -DNO_TCMALLOC -DCHROMIUM_BUILD -DFIELDTRIAL_TESTING_ENABLED -D_LIBCPP_HAS_NO_ALIGNED_ALLOCATION -DCR_XCODE_VERSION=0941 -DCR_CLANG_REVISION=\""335864-1\"" -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORE=0 -D_DEBUG -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DWTF_USE_DYNAMIC_ANNOTATIONS=1 -DDEBUG -DV8_ENABLE_CHECKS -I../.. -Igen -I../../third_party/v8 -I../../third_party/v8/include -Igen/third_party/v8/include -fno-strict-aliasing -fstack-protector-strong -Wno-builtin-macro-redefined -D__DATE__= -D__TIME__= -D__TIMESTAMP__= -fcolor-diagnostics -fmerge-all-constants -Xclang -mllvm -Xclang -instcombine-lower-dbg-declare=0 -no-canonical-prefixes -arch x86_64 -Wall -Wextra -Wimplicit-fallthrough -Wthread-safety -Wunguarded-availability -Wno-missing-field-initializers -Wno-unused-parameter -Wno-c++11-narrowing -Wno-covered-switch-default -Wno-unneeded-internal-declaration -Wno-undefined-var-template -Wno-address-of-packed-member -Wno-nonportable-include-path -Wno-user-defined-warnings -Wno-unused-lambda-capture -Wno-null-pointer-arithmetic -Wno-enum-compare-switch -Wno-ignored-pragma-optimize -O0 -fno-omit-frame-pointer -g1 -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -fvisibility=hidden -Wheader-hygiene -Wstring-conversion -Wtautological-overlap-compare -Wno-undefined-bool-conversion -Wno-tautological-undefined-compare -std=c++14 -stdlib=libc++ -fno-exceptions -fno-rtti -fvisibility-inlines-hidden -c ../../src/from_filesystem.cc -o obj/libdeno_nosnapshot/from_filesystem.o
[6/7] touch obj/libdeno_nosnapshot.stamp
[7/7] TOOL_VERSION=1530535641 ../../build/toolchain/mac/linker_driver.py ../../third_party/llvm-build/Release+Asserts/bin/clang++  -stdlib=libc++ -arch x86_64 -segprot PROTECTED_MEMORY rw r -isysroot ../../../../../../Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk -mmacosx-version-min=10.9.0 -Wl,-ObjC -o ""./deno"" -Wl,-filelist,""./deno.rsp""  obj/deno_bin.o -lresolv obj/build_extra/rust/stdlib.a obj/build_extra/rust/liblibc.rlib


Footnote
Currently js_filename reference is hard coded to ./out/Debug/gen/bundle/main.js. I'm sure there is a smarter way of obtaining the bundle path.
I would gladly make the necessary changes to have this PR merged if the concept is sound, otherwise I hope this could be an inspiration for others to work on it!",2,1
361,2018-07-12T18:02:28Z,2018-07-12T21:38:53Z,2018-07-12T21:38:53Z,1,3,0,,2,0
364,2018-07-13T01:03:07Z,,2018-07-14T05:22:59Z,1,5,0,resolves #363,3,3
367,2018-07-13T07:06:03Z,2018-07-13T17:25:53Z,2018-07-13T17:25:54Z,1,5,0,Everything's in the title.,3,1
368,2018-07-13T21:50:34Z,,2018-07-21T23:22:41Z,9,615,3451,"This is ""most"" of the work I think that needs to be done to replace Parcel with Rollup, but I have run into an issue, which is likely obvious, and figured I would raise the PR to get any feedback.
When the bundle is being generated as part of the build, it issues the command:
node ./node_modules/rollup/bin/rollup -c ../../third_party/rollup.config.js -i ../../js/main.ts -o gen/bundle/main.js

Which will generate the following output:
../../js/main.ts → gen/bundle/main.js...
[!] Error: Unexpected token
../../js/main.ts (15:22)
13:
14: let cmdIdCounter = 0;
15: function assignCmdId(): number {
                          ^
16:   // TODO(piscisaureus) Safely re-use so they don't overflow.
17:   const cmdId = ++cmdIdCounter;

Which seems to be that the TypeScript plugin is not being loaded or used or something, and running the command from out/Debug as the CWD also results in the same thing, but if I run the following from the root of the project, I get:
$ node ./node_modules/rollup/bin/rollup -c rollup.config.js -i js/main.ts -o out/Debug/gen/bundle/main.js

js/main.ts → out/Debug/gen/bundle/main.js...
created out/Debug/gen/bundle/main.js in 8.8s

And the bundle I am expecting gets generated.  I am sure I am missing obvious, but it alluding me.  I still think there will be tweaks afterwards as right now this is outputting an ES Module as a bundle and likely needs to be an iife, but it means I need to stub off the Node.js modules that typescript attempts to load, but doesn't actually require to function, but I think that should be fairly straight forward.
Refs #362",6,9
370,2018-07-15T12:23:44Z,,2018-07-17T11:41:46Z,6,75,28,"This PR attempts to solve #366.
As noted by @robbym, cargo install works by downloading sources to a temporary directory, compiles it and output binaries which in our case that's a step ahead since we wanted to rely on //build_extra/rust/BUILD.gn for building. (p.s: if i understand Rust correctly...)
Here, I'm proposing to introduce a fetch_cargo_crates.py script that I got cues from Fuschia's codebase: list_3p_crates.py and compile_3p_crates.py.
To briefly explain the flow of operation:

Running ./tools/build_third_party.py

symlinks Cargo.toml from the root dir to third_party dir
executes fetch_cargo_crates.py


./tools/fetch_cargo_crates.py will

parse Cargo.toml using pytoml library (pulled in via gclient)
extract crate name and crate version (with special handling for git defined crates)
call cargo clone with cargo name and crate version
and finally outputs cloned repositories to third_party/rust_crates



Caveats

No Cargo.lock is generated
A cargo subcommand needs to be added (i.e. https://github.com/ehuss/cargo-clone-crate)

Installing seems to take some time... 🙍
I opted to use this rather than cargo-clone since it is recently published and potentially more maintained.


clone_crate function within the fetch_cargo_crates.py script is rather brittle, it doesn't handle most of Cargo.toml semantics.

Alternative
I have also made an alternative implementation in build_extra/rust/BUILD.gn... but can't seem to get it working in the build step, only in gen step. I discarded the idea since it felt out of place to pull dependencies during the gen step. But if you are interested to see the changes: it's here f-a-a/cargo_fetch2
Outputs like this instead:

cc: @ry @robbym",3,3
377,2018-07-17T07:47:20Z,2018-07-21T17:04:12Z,2018-07-21T17:04:12Z,9,89,47,"Depends on #371
Addresses #312",2,2
379,2018-07-18T01:40:56Z,2018-07-21T15:00:10Z,2018-07-21T15:00:10Z,3,19,0,"This resolves #374.
This PR depends on #371. I'm going to rebase it if #371 gets merged.",3,9
382,2018-07-18T20:45:58Z,2018-07-19T12:29:27Z,2018-07-19T12:29:27Z,3,55,55,,2,0
383,2018-07-18T21:47:23Z,2018-07-19T00:00:54Z,2018-07-19T00:00:54Z,7,114,45,Addresses https://github.com/ry/deno/issues/366,2,1
384,2018-07-19T01:17:48Z,2018-07-21T23:08:24Z,2018-07-21T23:08:24Z,9,90,12,,2,0
385,2018-07-19T07:09:44Z,2018-07-19T20:10:05Z,2018-07-19T20:10:05Z,9,277,88,"Tested on linux and windows, but not on mac.
Fixes #380",2,2
387,2018-07-19T17:55:41Z,2018-08-29T20:32:43Z,2018-08-29T20:32:43Z,1,159,0,,8,34
389,2018-07-20T01:20:32Z,2018-07-20T07:46:28Z,2018-07-20T07:46:28Z,5,273,248,,2,0
390,2018-07-20T04:13:07Z,2018-07-20T17:28:24Z,2018-07-20T17:28:24Z,1,36,4,"rustc prints the warning:
`-C save-temps` might not produce all requested temporary
products when incremental compilation is enabled.

However, incremental compilation isn't even enabled.
A look at the Rust source code confirms that this warning is indeed printed unconditionally when the -C save-temps flag is specified:
https://github.com/rust-lang/rust/blob/5f2b325f64ed6caa7179f3e04913db437656ec7e/src/librustc/session/config.rs#L1015-L1018",2,0
392,2018-07-21T23:21:20Z,,2018-07-22T01:20:40Z,10,616,3452,Same as #368 but with rollup changes committed to third_party submodule.,3,1
394,2018-07-22T00:53:13Z,2018-07-22T01:56:46Z,2018-07-22T01:56:46Z,2,19,10,Makes test.py pass on windows.,2,0
397,2018-07-23T18:46:44Z,2018-07-24T14:38:12Z,2018-07-24T14:38:12Z,37,40,86,,2,0
398,2018-07-23T20:10:01Z,2018-07-24T17:42:24Z,2018-07-24T17:42:24Z,6,100,31,,2,2
401,2018-07-24T04:58:28Z,,2018-07-24T21:50:50Z,4,51,5,"Depends on denoland/deno_third_party#1
Any change suggestions would be appreciated.
$ deno
error: The following required arguments were not provided:
    <V8ARGS>...

USAGE:
    deno [FLAGS] <V8ARGS>...

For more information try --help

$ deno --help
deno 0.0.0
Ryan D. <ry@tinyclouds.org>
A secure TypeScript runtime built on V8

USAGE:
    deno [FLAGS] <V8ARGS>...

FLAGS:
    -d, --debug      Sets the log level to max
    -h, --help       Prints help information
    -V, --version    Prints version information

ARGS:
    <V8ARGS>...

$ deno --version
deno 0.0.0

$ deno --debug tests/002_hello.ts
Hello World",2,1
402,2018-07-24T06:33:42Z,2018-07-29T04:22:40Z,2018-07-29T04:22:40Z,20,701,372,Depends on #396,3,7
405,2018-07-24T22:21:08Z,2018-07-26T01:27:27Z,2018-07-26T01:27:27Z,1,53,7,https://github.com/ry/deno/issues/376,2,0
406,2018-07-25T04:56:59Z,2018-07-25T19:39:15Z,2018-07-25T19:39:15Z,6,219,80,"Make sync_third_party work in general
Un-break build.py and run_hooks.py on windows
Partially fix format.py on windows
Reduce code duplication between run_hooks and sync_third_party",2,0
409,2018-07-25T12:20:40Z,2018-07-26T03:07:51Z,2018-07-26T03:07:51Z,9,47,1877,"Resolves #403
It mostly makes it maintainable.  TypeScript still wants to resolve the msg_generated itself to be type safe.  So we had to go away from a relative MID and go to an absolute and then map that absolute to resolve to the generated modules (ergo the paths in the tsconfig.json now).  It also means we have to pick a resolution order.  It also means that an editor, like VSCode, will error until at least one msg_generated.ts is generated.
We also had to generate another bit of logic in the rollup.config.js to resolve the module at bundle time properly.
I think I cleaned up all the hackery.",2,1
421,2018-07-27T00:55:48Z,2018-07-29T04:24:17Z,2018-07-29T04:24:17Z,7,133,80,,2,0
422,2018-07-27T06:52:23Z,2018-07-27T14:06:30Z,2018-07-27T14:06:30Z,1,1,1,Fixes #420,2,0
423,2018-07-27T08:23:38Z,,2018-07-31T00:46:16Z,15,177,65,Depends on #421,3,6
424,2018-07-28T15:23:58Z,,2018-07-28T18:10:28Z,20,696,372,Depends on #402,2,1
426,2018-07-29T11:44:00Z,,2018-07-31T00:06:04Z,9,83,27,"This PR updates deno to TypeScript 3.0.1 and creates a specific runtime library for deno named lib.deno.d.ts to avoid TypeScript having incorrect types for the runtime environment.
Resolves #417
Requires denoland/deno_third_party#3",2,3
429,2018-07-30T20:25:15Z,2018-08-02T17:13:33Z,2018-08-02T17:13:33Z,11,90,27,,3,3
432,2018-07-31T09:38:16Z,2018-08-02T02:43:26Z,2018-08-02T02:43:26Z,5,217,19,,2,1
433,2018-07-31T11:22:23Z,2018-08-01T18:59:38Z,2018-08-01T18:59:38Z,1,1,1,"Thanks for this interesting project!
A quick broken link fix with this PR.
Ref: https://github.com/ry/deno/pull/330",3,1
434,2018-07-31T20:44:02Z,2018-08-09T19:17:09Z,2018-08-09T19:17:09Z,15,291,37,"Depends on #429
Fixes #413",4,2
435,2018-08-01T01:04:01Z,2018-08-01T16:14:11Z,2018-08-01T16:14:11Z,12,114,135,,2,0
439,2018-08-01T23:59:37Z,2018-08-02T16:49:41Z,2018-08-02T16:49:41Z,10,62,53,,2,0
443,2018-08-02T17:29:16Z,2018-08-02T21:16:25Z,2018-08-02T21:16:25Z,1,21,18,adds appveyor badge and other updates,3,0
444,2018-08-02T23:13:28Z,2018-08-03T03:12:51Z,2018-08-03T03:12:51Z,7,31,30,,3,0
445,2018-08-03T03:07:21Z,2018-08-03T14:04:13Z,2018-08-03T14:04:13Z,3,29,33,,2,0
446,2018-08-03T03:46:20Z,2018-08-03T14:28:03Z,2018-08-03T14:28:03Z,1,6,2,,2,0
448,2018-08-03T05:07:24Z,2018-08-09T21:48:17Z,2018-08-09T21:48:17Z,5,247,52,Depends on #434,2,0
452,2018-08-03T15:58:42Z,2018-08-09T21:27:47Z,2018-08-09T21:27:47Z,14,163,24,Depends on #434,3,4
454,2018-08-03T16:43:40Z,2018-08-04T02:42:00Z,2018-08-04T02:42:00Z,2,18,8,,2,1
455,2018-08-03T17:25:50Z,,2018-08-07T22:12:32Z,15,319,130,"Generates declarations for runtime modules.
Resolves #427",2,5
460,2018-08-05T22:55:39Z,,2018-08-08T16:34:16Z,23,925,59,This makes implementing #416 and window.fetch a fair bit easier.,4,6
462,2018-08-06T18:38:37Z,,2018-08-29T20:34:21Z,18,497,174,,3,2
467,2018-08-07T06:32:02Z,2018-08-07T14:08:20Z,2018-08-07T14:08:20Z,5,9,2,"Fixes @Pato91's Linux/release issue.
Removes the redundant //third_party/v8/third_party/depot_tools. People may have to run setup.py after this commit.",2,0
468,2018-08-07T07:26:42Z,,2018-08-09T15:21:22Z,6,19,18,"Address #464
Fix missing sys import in setup.py

Signed-off-by: Li Hao hao.x.li@intel.com",2,1
469,2018-08-07T15:03:58Z,2018-08-08T17:08:20Z,2018-08-08T17:08:20Z,4,3,674,Fixes #393.,2,1
476,2018-08-07T20:47:44Z,2018-08-08T23:40:43Z,2018-08-08T23:40:43Z,5,446,37,,2,2
479,2018-08-07T22:12:10Z,2018-08-08T11:17:48Z,2018-08-08T11:17:48Z,15,321,130,continuation of #455,3,0
482,2018-08-08T17:52:29Z,2018-08-09T06:00:45Z,2018-08-09T06:00:45Z,1,2,0,"While it isn't perfect (.e.g. something like $deno$/js/main.ts), outside of actually re-writing the source-map, this is what we can get:
$ ./out/debug/deno ./tests/008_stack_trace.ts
Error: exception from mod1
    at Object.throwsError (file:///Users/kkelly/github/deno/tests/subdir/mod1.ts:16:9)
    at foo (file:///Users/kkelly/github/deno/tests/008_stack_trace.ts:4:3)
    at eval (file:///Users/kkelly/github/deno/tests/008_stack_trace.ts:7:1)
    at localDefine (deno/js/runtime.ts:157:5)
    at eval (/Users/kkelly/github/deno/tests/008_stack_trace.ts, <anonymous>)
    at eval (<anonymous>)
    at execute (deno/js/runtime.ts:219:3)
    at FileModule.compileAndRun (deno/js/runtime.ts:114:5)
    at denoMain (deno/js/main.ts:56:7)
    at deno_main.js:1:1

Resolves #461",3,3
485,2018-08-08T22:36:40Z,,2018-08-14T00:09:11Z,1,9,3,,3,2
496,2018-08-09T18:55:42Z,2018-08-10T18:50:47Z,2018-08-10T18:50:47Z,10,128,9,"Resolves #495
Currently fails on deno_ns because deno_ns does not properly rewrite error stacks at the moment (ergo a good reason for these tests 😁)",2,5
499,2018-08-09T20:16:33Z,2018-08-09T21:59:51Z,2018-08-09T21:59:51Z,1,11,9,"#498
Currently Deno::drop is not being called due to Deno::new not returning an owned type.",2,0
501,2018-08-10T04:08:37Z,2018-08-17T15:54:37Z,2018-08-17T15:54:37Z,1,48,20,"this is an alternative take on #485

splits CI into precache, lint, test, and release stages. matrix expansions can apply these stages further down the line for different platforms, etc. https://docs.travis-ci.com/user/build-stages/matrix-expansion/
no conditions are set on the release stage yet, but that can be added https://docs.travis-ci.com/user/conditional-builds-stages-jobs/#conditional-stages

See https://travis-ci.com/bobheadxi/deno
I'm not completely familiar with the deno build scripts yet so this is still pretty wip, am attempting to publish to my fork currently - any feedback would be appreciated and i'd be happy to make any changes requested
Release: https://github.com/bobheadxi/deno/releases",5,22
502,2018-08-10T16:13:07Z,2018-08-10T17:46:09Z,2018-08-10T17:46:09Z,1,1,1,"I forgot this was a thing until I was reviewing stuff.
--emitDeclarationOnly causes just the .d.ts files to be output, which are the only things we are inlining in the assets.ts anyways.  So slightly more efficient and slightly safer that unused code is not generated during the build.",2,1
503,2018-08-10T19:20:19Z,2018-08-11T16:02:08Z,2018-08-11T16:02:08Z,12,72,57,,2,0
505,2018-08-10T19:34:17Z,2018-08-15T16:40:31Z,2018-08-15T16:40:31Z,7,96,58,"Resolves #504
This PR sets --strict when compiling the internal TypeScript for Deno and makes the necessary changes to support that.  There were a couple issues around strict null checking that were fixed, but most were cases where TypeScript could not determine that a value was defined, but it was known to be defined.  In those cases I used the not null assertion operator (!) and inserted a comment.  Not all of my assumptions might of been accurate though.",3,1
508,2018-08-11T21:43:26Z,2018-08-13T17:27:14Z,2018-08-13T17:27:14Z,5,115,150,,2,0
511,2018-08-12T18:31:18Z,2018-08-13T15:54:11Z,2018-08-13T15:54:11Z,3,3,4,"Resolves #510
Actually looking into more, it certainly seems like timers.ts only exports onMessage for testing purposes and therefore can be marked internal, which then elides the gen/msg_generated import.",2,0
512,2018-08-13T16:07:58Z,2018-08-20T20:53:40Z,2018-08-20T20:53:40Z,17,823,42,"Continuation of #478
depends on #521",4,0
513,2018-08-13T18:32:44Z,2018-08-17T19:52:12Z,2018-08-17T19:52:12Z,1,155,22,,2,0
514,2018-08-13T23:58:21Z,2018-08-16T12:40:12Z,2018-08-16T12:40:12Z,17,130,513,cc @robbym,2,1
519,2018-08-15T03:14:25Z,,2018-08-16T07:48:34Z,30,1022,556,"Hey @ry
It is a very hackish first pass at implementing HTTP imports, built on top of your hyper + fetch branch. It does not support Rustls yet (so no https) and it stores the code to the cache but it does not read from cache yet.
I tested it by running python -m SimpleHTTPServer from the httpdir directory.
So I plan to clean this up a bit, manage errors a bit more intelligently (right now it just panics if something is not right because of all the calls to unwrap) and add the missing features.",4,5
521,2018-08-15T15:59:08Z,2018-08-17T19:11:34Z,2018-08-17T19:11:34Z,2,2,2,"Prevents upgrades with running tools/sync_third_party.py
@piscisaureus I consider this a stop gap solution until we completely generate tp.",2,0
524,2018-08-15T20:48:12Z,2018-08-17T20:34:31Z,2018-08-17T20:34:31Z,6,249,101,"Depends on #514
Previous attempts: #441 #401
Fixes #376
cc @robbym",2,0
527,2018-08-16T03:09:53Z,,2018-08-22T17:20:50Z,5,54,14,"I quickly implemented writeFileSync on top of import http since I had already written it. I did not implement permissions yet.
Fixes #415",3,7
529,2018-08-16T06:15:08Z,2018-08-21T19:37:46Z,2018-08-21T19:37:46Z,11,304,127,,2,0
530,2018-08-16T07:47:27Z,2018-08-23T13:41:09Z,2018-08-23T13:41:09Z,11,211,61,"This is mostly @NewLunarFire's work. I've rebased and made clean ups.
Continued from #519.
Depends on #518
Fixes #416",3,1
532,2018-08-17T03:51:10Z,2018-08-17T16:58:59Z,2018-08-17T16:58:59Z,3,21,9,,2,0
533,2018-08-17T05:06:06Z,2018-08-17T15:00:58Z,2018-08-17T15:00:58Z,1,1,0,,3,1
536,2018-08-17T21:00:32Z,2018-08-17T22:50:38Z,2018-08-17T22:50:38Z,4,12,12,,2,0
538,2018-08-17T22:24:21Z,2018-08-17T23:31:21Z,2018-08-17T23:31:21Z,4,4,26,,2,1
539,2018-08-18T07:14:14Z,2018-08-18T15:46:41Z,2018-08-18T15:46:41Z,1,1,3,"Sorry about that 😩

fixed misnamed test script
removed tag restriction (the branches: only: master restriction is still there, carried over from the original travis config )

tested in my fork: https://travis-ci.com/bobheadxi/deno/builds/82212739 with
948b8ab
the release: https://github.com/bobheadxi/deno/releases/tag/untagged-9b2b03e4d9244f023331
Related: #501",2,3
540,2018-08-18T08:43:41Z,2018-08-19T19:04:27Z,2018-08-19T19:04:28Z,4,16,7,"Fixes #534
This is my first try at Deno. I am not sure if I do everything correctly, but running ./tools/test.py passes.",3,5
545,2018-08-19T07:01:37Z,2018-08-21T22:34:57Z,2018-08-21T22:34:57Z,6,40,11,,5,5
546,2018-08-19T10:41:57Z,2018-08-19T15:27:49Z,2018-08-19T15:27:49Z,13,13,13,This resolves #491,2,0
548,2018-08-19T19:39:10Z,2018-08-21T12:42:24Z,2018-08-21T12:42:24Z,2,29,51,"Releasing on every commit doesn't work so well - at least with the default settings. It results in a bunch of tags prefixed with ""untagged"". That's ugly. So this only does release on explicit tags. I've tested it by bumping the version to v0.0.2 and it's working: https://github.com/denoland/deno/releases",2,0
549,2018-08-20T04:13:42Z,2018-08-22T13:57:22Z,2018-08-22T13:57:22Z,1,1,1,"This caused me a half-second's confusion when I first tried running Deno -- I thought this would run TypeScript directly, but it's asking for a JavaScript file? It looks like .ts examples are used elsewhere in this file's own tests, and the README, so maybe this could be switched to match.",5,4
555,2018-08-22T14:51:48Z,2018-08-22T16:08:54Z,2018-08-22T16:08:54Z,1,1,1,Testing release process,2,0
556,2018-08-22T15:11:44Z,2018-08-22T17:42:05Z,2018-08-22T17:42:05Z,1,17,2,,2,1
558,2018-08-22T16:30:49Z,2018-08-22T18:18:10Z,2018-08-22T18:18:10Z,1,0,3,"It appears there's no way to whitelist tags in addition to master, so we
can just build all for now.
travis-ci/travis-ci#2111",2,0
559,2018-08-22T17:20:30Z,2018-08-22T22:39:08Z,2018-08-22T22:39:09Z,6,89,6,Fixes #415,3,0
564,2018-08-22T20:13:05Z,2018-08-22T21:17:26Z,2018-08-22T21:17:26Z,18,1154,396,"Continuation of #518 - this is all @kitsonk's work, I'm just shepherding it into master.
Resolves #509",3,1
567,2018-08-22T23:02:52Z,,2018-09-12T14:16:23Z,5,72,11,Support file permissions in writeFileSync: Unix mode bits and append/truncate modes.,2,3
568,2018-08-22T23:13:44Z,,2018-09-12T14:18:28Z,4,183,94,,2,5
570,2018-08-23T06:35:15Z,2018-08-24T04:06:06Z,2018-08-24T04:06:06Z,1,8,2,"Unfortunately this times-out on osx...
I am not sure what can be done to speed up the build script.
I tried with -j8 and without -j. They didn't seem to make much difference.
https://travis-ci.org/hayd/deno/jobs/419484578
It got seemingly close to:
[907/1054] CXX obj/third_party/v8/v8_base/liftoff-assembler.o

Note: Machine seems to be the same size as linux.
#563",2,8
576,2018-08-23T15:17:58Z,2018-08-25T19:42:50Z,2018-08-25T19:42:50Z,12,42,26,Closes: #523,4,7
577,2018-08-23T15:34:32Z,2018-08-23T17:03:36Z,2018-08-23T17:03:36Z,1,3,5,,2,0
582,2018-08-23T20:42:30Z,2018-08-23T21:55:23Z,2018-08-23T21:55:23Z,4,77,36,"Fixes #579
It is likely that resolveDependencies is just temporary location until #581 lands and there is a cleaner API for resolving dependencies and instantiating the modules.",2,0
583,2018-08-23T21:31:05Z,2018-08-24T20:21:07Z,2018-08-24T20:21:07Z,2,2,2,"rw/flatbuffers@83a7154
Down to one warning",2,0
585,2018-08-23T22:37:27Z,2018-08-29T20:43:51Z,2018-08-29T20:43:51Z,9,188,25,,4,6
586,2018-08-23T23:48:54Z,2018-08-27T21:51:25Z,2018-08-27T21:51:26Z,11,121,29,"Also exposes deno.argv
Example:
testPerm({ net: true }, async function tests_fetch() {
  const response = await fetch(""http://localhost:4545/package.json"");
  const json = await response.json();
  assertEqual(json.name, ""deno"");
});
Currently in the stdout you will see many lines like this:
DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

DONE. Test passed: 0, failed: 0

This is caused by #587",2,1
590,2018-08-24T04:08:49Z,2018-08-24T21:16:55Z,2018-08-24T21:16:55Z,2,22,21,Resolves #580,2,2
592,2018-08-24T16:22:22Z,2018-08-24T18:57:33Z,2018-08-24T18:57:34Z,1,1,0,"Kill Ninja after 35 minutes to prevent Travis from cancelling the build
due to time-out. This allows the cache to be saved, so the build can
complete when it is attempted again.
Land on approval.",2,0
595,2018-08-24T20:40:49Z,,2018-09-04T16:52:25Z,4,226,53,"Additions
This PR reworks flag parsing to be a bit more user-friendly, by implementing more traditional rules.
following capabilities are added:

same argument short flags (i.e. deno -rD is legal,  and it is equivalent to deno -r -D, or deno --reload --log-debug)
The special flag, --,  will immediately stop flag parsing
short flag arguments may be in the same argv argument as the flag itself (i.e deno -e'console.log(""test"")' is the same as deno -e 'console.log(""test"")')

This PR also adds the -e (--eval) flag, which can be passed a string to evaluate.
Not Implemented
So far, no there is no error handling in the set_flags function, I've just left unimplemented!() where there should probably be some sort of error message or something in the future.
Evaluation is also not fully supported, each instance of -e is evaluated in a loop in the main function but what operations it can actually perform are extremely limited, because it is run before denoMain().
Deno still complains if it's missing an input file, even if one or more -e flags were provided
Questions
I have a few questions about what error handling and the eval flag before they are implemented.
Should the error handling be done completely in the main set_flags function. So set_flags doesn't return and error, but instead prints an error message, or should it just return a Result.
Is eval practical at this point? I think it's a really helpful thing to have, and helps when just trying out deno, but is it worth it to change denoMain(), or use some other method to get it working properly?",5,2
599,2018-08-25T04:58:26Z,2018-08-28T12:44:36Z,2018-08-28T12:44:36Z,8,372,228,"Resolves #581
Resolves #587
Resolves #594
This is the initial work that first resolves and transpiles all modules before instantiating the modules.  This is more in line with the way other module loaders work, like browser ES module loaders and AMD.",2,4
600,2018-08-25T12:06:55Z,2018-08-25T15:02:07Z,2018-08-25T15:02:07Z,5,563,5,Also auto-detect the availability of sccache in setup.py.,2,0
602,2018-08-25T23:43:37Z,2018-08-26T16:38:53Z,2018-08-26T16:38:53Z,8,122,19,"Free minor fix pack included.
Using absolute paths in the build inhibits reuse of ccache'd object code.
Example of the CI ""abs path"" alarm going off: https://ci.appveyor.com/project/deno/deno/build/621.master#L738",2,1
603,2018-08-26T04:19:43Z,2018-08-26T17:35:01Z,2018-08-26T17:35:01Z,5,52,17,,2,0
604,2018-08-26T06:31:25Z,2018-09-03T19:06:01Z,2018-09-03T19:06:01Z,5,73,0,it's related to #593,3,8
605,2018-08-26T08:18:52Z,2018-08-26T15:03:43Z,2018-08-26T15:03:43Z,7,88,56,"This PR tries to resolve #553.

I added libdeno.setGlobalErrorHandler and replaced the use of window.onerror with it.
Updated the test cases of handling of uncaught errors.",2,0
606,2018-08-26T09:58:53Z,2018-08-26T15:00:23Z,2018-08-26T15:00:23Z,3,19,36,"The std version is generally better as it will preallocate the Vec/String based on file size leading to faster reads. This will bump the minimum needed rustc version to 1.26.0, though I couldn't find any documentation on whether deno has a minimum version to support other than stable.",4,2
608,2018-08-27T15:52:43Z,2018-08-27T17:45:30Z,2018-08-27T17:45:30Z,2,23,3,fixes #607,2,1
609,2018-08-27T15:58:17Z,2018-08-28T13:37:53Z,2018-08-28T13:37:53Z,1,1,1,Wait to land until #599 is in.,2,0
610,2018-08-27T16:12:46Z,2018-08-27T23:23:54Z,2018-08-27T23:23:54Z,3,31,14,,2,0
612,2018-08-27T19:03:22Z,2018-08-27T21:18:38Z,2018-08-27T21:18:38Z,3,85,80,Switched circular test to use stringify with assertEqual. Also testStringify function that matches console.log's arguments to reduce code reuse.,2,0
617,2018-08-29T04:54:35Z,2018-08-29T16:05:59Z,2018-08-29T16:05:59Z,2,17,7,"lastchange.py is causing a full rebuild on every commit. This is a
temporary workaround.",2,0
618,2018-08-29T06:48:01Z,2018-08-29T15:34:37Z,2018-08-29T15:34:38Z,4,123,16,,2,0
619,2018-08-29T07:05:06Z,2018-08-29T08:34:05Z,2018-08-29T08:34:05Z,1,1,1,,3,1
622,2018-08-29T13:24:44Z,2018-08-30T16:39:34Z,2018-08-30T16:39:34Z,5,219,1,"This is essentially a basic version Rust's Metadata, currently it only contains cross platform functionality, but could be expanded to optionally include platform specific metadata.",3,9
626,2018-08-29T17:03:44Z,,2018-08-30T10:29:51Z,1,172,0,"WIP #615

Heavily based on rustup.sh
Initial draft that will find, download, extract and make executable latest release.
Only tested on Ubuntu 18.04
requires jq for parsing GitHub API response to get the url of the latest release.

I've basically striped down rustup.sh to only include the bare necessities to do everything in point 2.
Since I wasn't sure what a ""sane"" location for deno executable is I've put it in ~/deno/deno. That can be changed.
Also if there is a better way to get the url of the latest release please tell me because I wasn't able to find it. I had to use GitHub API and parse response with jq which is not something everyone has on their machines.
Also I'm, by no(!) means, shell scripting expert.
I'm just looking for a ""Yes, continue working on it"" or ""No, stop it!"".",4,5
628,2018-08-29T22:51:19Z,2018-08-30T09:48:41Z,2018-08-30T09:48:41Z,4,15,3,,2,0
629,2018-08-30T00:07:02Z,2018-08-30T12:29:29Z,2018-08-30T12:29:29Z,10,298,66,,3,2
636,2018-08-30T10:27:26Z,,2018-08-30T16:52:20Z,4,134,0,,3,2
637,2018-08-30T12:37:21Z,2018-08-30T22:29:06Z,2018-08-30T22:29:06Z,1,1,1,,2,0
639,2018-08-30T14:32:07Z,2018-09-01T00:55:05Z,2018-09-01T00:55:05Z,4,141,0,"Added windows as a platform detection option
Handle extraction of .zip file

Solves #615",2,4
642,2018-08-30T19:14:34Z,2018-09-01T14:45:27Z,2018-09-01T14:45:27Z,12,50,78,"Refs: #632
This PR is a step towards generating a single definition file for all types in deno.
For the dynamically generated types files, they are now bundled into a single file and inlined in the assets[""globals.d.ts""] object.  There are still 3 external type files that are not part of the bundle:

typescript.d.ts - Likely should always be inlined directly.
text-encoding.d.ts - This is the types for a node module import that we need the types for.  It maybe difficult to inline.
fetch_types.d.ts - These types are written as ambient/global types.  Further changes in another PR to make this into a UMD/modular definition file could be done so that it can be renamed fetch_types.ts and then bundled like other modules.",2,2
643,2018-08-30T19:40:34Z,2018-08-31T14:43:12Z,2018-08-31T14:43:12Z,6,66,137,,2,0
646,2018-08-31T12:30:17Z,2018-08-31T17:18:25Z,2018-08-31T17:18:25Z,8,206,46,"Resolves #631


Node: process.env returns an object that allows you to mutate environment variables with objects setters. This implementation copies that.


Rust: env::vars returns an iterator of key-value pair, for getting single environment variables rust has env::var and  env::set_var for getting and setting single variables.


Go: os.Environ returns a list of strings in the key=value format.


Ruby: ENV is a class with various methods for getting, setting, converting into an iterator, arrays, etc.


Python: os.environ is similar to Node's a approach of having a singleton dict with getters and setter for manipulating environment variables.


This PR as makes a small refactor to flags.rs to reduce LoC and to print better error messages by using assert_eq!(x, y) macro instead of assert!(x == y).",2,2
649,2018-08-31T19:16:58Z,2018-08-31T20:18:32Z,2018-08-31T20:18:32Z,1,49,5,,2,1
651,2018-09-01T05:40:03Z,2018-09-01T14:40:09Z,2018-09-01T14:40:09Z,1,45,53,"cc #639 @mirkojotic @ry
Tested both python 2 and 3.
Tested stubbing in the windows filename (on osx), it unzips correctly.",2,0
652,2018-09-01T12:07:20Z,,2018-09-24T14:03:59Z,7,223,13,"Node: fs.readdirSync returns a list of paths of entries in the path.


Rust: fs::read_dir returns an iterator of DirEntrys.


Go: ioutil.ReadDir returns a list of os.FileInfos.


Ruby: Dir is a class with various methods for general directory operations such as changing directories. Dir[""dir/""] returns a array of strings matching the path. This also accepts a general glob pattern as opposed to a strict path.


Python: os.listdir returns an list of paths in arbitrary order.",2,10
655,2018-09-01T17:21:19Z,2018-09-02T15:28:46Z,2018-09-02T15:28:46Z,2,92,6,Fixes #653,2,2
656,2018-09-01T17:49:23Z,2018-09-01T19:06:04Z,2018-09-01T19:06:04Z,6,15,19,Fixes #493,2,0
657,2018-09-01T17:54:11Z,2018-09-01T20:47:45Z,2018-09-01T20:47:45Z,1,1,1,Make the code with same style and read clearly,3,1
658,2018-09-01T22:52:38Z,2018-09-02T01:59:53Z,2018-09-02T01:59:53Z,6,37,32,"Removed redundant variables
Made tslint happy about the project's max-line-length
Removed unused imports
Added readonly when the attribute is never reassigned",2,0
659,2018-09-02T06:00:01Z,2018-09-03T14:45:59Z,2018-09-03T14:45:59Z,11,155,144,,2,0
660,2018-09-02T15:11:46Z,2018-09-02T23:16:51Z,2018-09-02T23:16:51Z,1,6,5,Using the log_level variable,3,1
662,2018-09-02T19:25:43Z,2018-09-05T12:45:56Z,2018-09-05T12:45:56Z,10,55,25,"This PR is another step towards #632.  It marks a lot of the APIs that were leaking into globals.d.ts as @internal so they are stripped out.  It also includes the JSDoc as part of the globals.d.ts so it can be more easily be useful in an editor.
There are a couple challenges which appear to be issues with TypeScript, which I will raise seperate issues for:

When all exports of a module are marked as @internal and the types are emitted as a bundle, the bundle still contains an empty namespace/module.
Other modules are not properly elided when there are no dependencies elsewhere in the output.  So while we have no dependency now on the bundled types for msg_generated it still exists in the bundle, and we cannot mark all of its exports as @internal.",2,4
663,2018-09-02T22:15:00Z,2018-09-24T21:11:51Z,2018-09-24T21:11:51Z,9,126,7,"On windows 10, ansi escape codes are now properly interpreted rather than displayed as gibberish.
Also enable color output from rustc and clang.
For other tools, color output cannot be enabled, either because they ignore the flags to force enable color output (test_rs, gtest, lld-link) or have no such option in the first place (ninja, gn).
Fixes: #624",2,1
664,2018-09-02T22:16:36Z,2018-09-24T14:06:48Z,2018-09-24T14:06:48Z,2,13,3,Switch to .__proto__.constructor.name to print out more accurate function type (Function/AsyncFunction/GeneratorFunction),3,1
665,2018-09-02T23:04:16Z,2018-09-06T14:42:08Z,2018-09-06T14:42:09Z,7,36,10,"Initial work on getting --deps flag to print module dependencies.
I was just wondering if I'm heading in the right direction ( and I could always use some advice ).
I'm positive that my messing around in getModuleDependencies wasn't right so any pointers around that would be greatly appreciated.
No tests so far :( ( also I would appreciate some advice as to where to place them )
Solves #630 ( well it doesn't yet :D )",3,9
666,2018-09-03T04:19:35Z,2018-09-12T14:24:19Z,2018-09-12T14:24:19Z,8,441,7,"Add remove/removeSync/removeAll/removeAllSync
 Add tests

For remove/removeSync/removeAll/removeAllSync,

Node: fs.rmdirSync(path)
Go: os.RemoveAll(path string) error
Python: os.removedirs(path)
Rust: std::fs::remove_dir_all<P: AsRef<Path>>(path: P) -> Result<()>
(similar for async version)",3,3
668,2018-09-03T06:34:43Z,,2018-09-07T16:33:56Z,2,37,3,"Add -A[wne] as shorthand for --allow-* flags; reduces a lot of typing. I would admit that this might make developers paying less attention to access control, but as a tradeoff it would still bring about much more convenience.",2,0
669,2018-09-03T07:12:15Z,,2018-09-10T01:05:05Z,2,60,52,This PR combines all the individual TypeScript lib files that are required to be inlined into a single file.,3,4
671,2018-09-04T00:31:20Z,2018-09-04T15:57:05Z,2018-09-04T15:57:05Z,5,94,0,"Prior art:
Go: func Rename(oldpath, newpath string) error
Node: fs.rename(oldPath, newPath, callback)
Python: os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)
Rust: pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> Result<()>",3,1
673,2018-09-04T08:40:20Z,,2018-10-26T13:05:29Z,9,104,14,"I have implemented chmodSync for mac/linux os.
Prior art:
Go: func Chmod(name string, mode FileMode) error
Node: fs.chmod(file, mode, callback){
Python: os.chmod(path, mode);
pub fn set_permissions<P: AsRef>(path: P, perm: Permissions) -> Result<()>
Permissions struct in Rust doesn't allow anything apart from -r--r--r-- or -rw-rw-rw",3,5
675,2018-09-04T16:52:00Z,2018-09-04T20:00:33Z,2018-09-04T20:00:33Z,1,48,11,"Removes eval flag. It needs further consideration - the way it was implemented didn't execute the denoMain function - meaning that many handlers wouldn't be setup - stack traces wouldn't be displayed properly - setTimeout wouldn't work, etc.",3,1
679,2018-09-04T20:32:38Z,2018-09-04T23:11:42Z,2018-09-04T23:11:42Z,2,2,5,,2,0
680,2018-09-04T23:00:11Z,2018-09-06T02:27:48Z,2018-09-06T02:27:48Z,8,42,29,,2,0
683,2018-09-05T04:42:02Z,,2018-09-05T14:07:57Z,4,75,0,"Prior art:
Go:
reader := bufio.NewReader(os.Stdin)
text, _ := reader.ReadLine()

Node:
var readline = require('readline');
var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

rl.on('line', function(line){
    console.log(line);
})

see https://stackoverflow.com/a/20087094/1240268
Python: sys.stdin.readline()
Rust: pub fn read_line(&self, buf: &mut String) -> Result<usize>

This allows one to define an iterator of lines, and to write a simple REPL...
It's unclear if it's preferable/additional to have a read nbytes and read everything (maybe these can have the same back-end api as read(n) and read(0). I attempted this, but it's not included here.
I am not sure how to test this...",2,0
685,2018-09-05T06:36:48Z,2018-09-06T15:07:11Z,2018-09-06T15:07:11Z,3,25,6,This address #596,3,1
687,2018-09-05T15:39:55Z,2018-09-06T02:27:24Z,2018-09-06T02:27:24Z,4,166,78,,3,0
688,2018-09-05T20:06:19Z,,2018-09-06T04:48:34Z,1,1,1,,2,2
689,2018-09-06T01:37:46Z,2018-09-06T03:02:44Z,2018-09-06T03:02:45Z,1,64,2,This fixes that a lot of targets were being rebuilt unnecessarily.,2,0
692,2018-09-06T03:50:52Z,2018-09-06T14:22:16Z,2018-09-06T14:22:16Z,4,1,128,"https://github.com/denoland/deno_install


This allows the installer to use a more aggressive CI build matrix
with different versions of python.


Running the installer during tools/test.py artificially inflates our
download stats.


Running the installer during tools/test.py makes the test script
dependent on having an internet connection.


Running the installer during tools/test.py introduces a race
condition during release - where it tries and fails to download the
latest release in build process that should be uploading that release.",2,0
694,2018-09-06T08:29:03Z,,2018-09-09T23:33:46Z,7,152,31,This patch implements deno.DenoError and friends...,4,5
696,2018-09-06T11:47:28Z,2018-09-06T15:54:49Z,2018-09-06T15:54:49Z,1,18,28,"Add forgotten --eol argument to 'git ls-files'. Without it, in certain
edge cases, files might have their mtime restored when it shouldn't.
Don't parse ls-files output into fields; it's unnecessary.
Disable the pip cache dir, and stop saving it to the appveyor cache.
Leverage the 'git -C «dir»' flag to make a script shorter.
Fix some factually and/or grammatically incorrect comments.",2,0
700,2018-09-06T16:47:42Z,2018-09-06T22:31:33Z,2018-09-06T22:31:33Z,3,98,105,"This PR does some cleanup of the DenoCompiler API:

Combines the Format Diagnostic Host into the DenoCompiler
Takes makeDefine, resolveFileName, resolveModuleName, and setModuleName private as they really shouldn't be part of the public API.",2,0
703,2018-09-06T23:46:32Z,,2018-09-24T14:19:34Z,5,68,14,"This is a somewhat naive attempt at making this API work:
> deno --depfile ./blah.d tests/https_imports.ts
> cat blah.d

tests/https_import.ts: /Users/rld/.deno/deps/gist.githubusercontent.com/ry/f12b2aa3409e6b52645bc346a9e22929/raw/79318f239f51d764384a8bded8d7c6a833610dde/print_hello.ts

/Users/rld/.deno/deps/gist.githubusercontent.com/ry/f12b2aa3409e6b52645bc346a9e22929/raw/79318f239f51d764384a8bded8d7c6a833610dde/print_hello.ts:

courtesy of @ry here
So far the code will allow this:
➜  my-deno git:(add-depfile-flag-and-functionality) ✗ ./out/debug/deno --depfile /home/mirko/Desktop/test_deps_dump.d tests/https_import.ts --allow-write
➜  my-deno git:(add-depfile-flag-and-functionality) ✗ cat /home/mirko/Desktop/test_deps_dump.d 
/home/mirko/.deno/deps/gist.githubusercontent.com/ry/f12b2aa3409e6b52645bc346a9e22929/raw/79318f239f51d764384a8bded8d7c6a833610dde/print_hello.ts: require exports
/home/mirko/code/my-deno/tests/https_import.ts: require exports /home/mirko/.deno/deps/gist.githubusercontent.com/ry/f12b2aa3409e6b52645bc346a9e22929/raw/79318f239f51d764384a8bded8d7c6a833610dde/print_hello.ts

There is several things I would love to get some help with:

I feel like I've put too much code in denoMain.ts but I wasn't sure where to extract it into function.
I made this dummy placeholderTODO method on the compiler class which is basically the same as getModuleDependencies but returns different things. I had an idea to modify getModuleDependencies so it returns Array<ModuleMetaData> but I wouldn't want to do a thing like that without consulting.
This is probably due to me not understanding the internals of the resolver. But every module has a dependency of require and exports which makes sense but doesn't really look great here.

As always any and all advice would be greatly appreciated.
@kitsonk",3,7
705,2018-09-07T08:38:56Z,2018-09-07T16:01:44Z,2018-09-07T16:01:44Z,1,21,5,"Add readFileSync comment
Add writeFileSync comment
Edit env comment",2,0
706,2018-09-07T19:26:48Z,2018-09-09T14:51:17Z,2018-09-09T14:51:17Z,1,8,4,"This fixes #698
It reaplces the usage of strings in favor of type aliases.",5,3
708,2018-09-07T21:39:27Z,2018-09-09T22:47:23Z,2018-09-09T22:47:23Z,12,521,579,"Refactors handlers.rs
Fixes #674",2,0
709,2018-09-07T22:59:42Z,2018-09-08T00:36:19Z,2018-09-08T00:36:19Z,1,5,5,,2,0
710,2018-09-08T01:12:13Z,2018-09-08T22:31:20Z,2018-09-08T22:31:20Z,4,144,30,,2,1
716,2018-09-09T23:32:32Z,2018-09-10T04:14:29Z,2018-09-10T04:14:29Z,15,143,128,Plus other clean ups.,2,0
718,2018-09-10T01:34:46Z,2018-09-10T03:12:23Z,2018-09-10T03:12:23Z,17,74,96,cc @kitsonk,2,1
722,2018-09-10T09:52:05Z,2018-09-10T19:02:08Z,2018-09-10T19:02:08Z,9,91,55,related to #593,2,1
723,2018-09-10T10:41:57Z,2018-09-11T16:19:45Z,2018-09-11T16:19:45Z,1,15,3,"This patch adjusts the type definition of Window interface.
FYI; Currently there is no way in typescript to avoid this duplication.
See:
microsoft/TypeScript#14052
microsoft/TypeScript#10050",3,3
724,2018-09-10T10:51:23Z,,2018-09-24T14:21:45Z,3,31,1,"This patch aims to add build.rs so that we can use Cargo to build Deno.
When I run cargo build, cargo downloads and compiles all the rust dependencies and then complains about msg_generated, and exits with a non-zero exit code.
As previously discussed with Ryan there seem to be two approaches to solve this issue:

Telling Cargo that we don't want it to run rustc on src/main.rs
Only build libdeno and generate assets like flatbuffer codes and typescript bundle.

Fixes #695",4,2
727,2018-09-10T20:00:55Z,2018-09-12T19:16:43Z,2018-09-12T19:16:43Z,8,136,20,"This is a step toward #522,
(Personal note: 7caab7b)",2,0
728,2018-09-11T04:53:21Z,2018-09-11T16:00:57Z,2018-09-11T16:00:57Z,10,192,83,"Based on #567 (fixed, rebased and reformatted to match master requirements)

 Move writeFileSync to write_file.ts
 Create (async) writeFile
 Add tests for writeFile",3,2
729,2018-09-11T12:07:13Z,,2018-10-10T13:34:16Z,19,968,102,"Resolves #632
This PR allows the following:
$ deno --types

Which will pipe the default library for deno to the console, which deno uses to validate code against internally.  End users can then pipe this to a file for use in their projects and use within an editor.  For example, an end user could do this:
$ deno --types > lib.deno.d.ts

And then configure a tsconfig.json with the following, which would then mirror the way deno will evaluate the code:
{
  ""compilerOptions"": {
    ""allowJs"": true,
    ""module"": ""amd"",
    ""moduleResolution"": ""node"",
    ""noEmit"": true,
    ""noLib"": true,
    ""target"": ""esnext""
  },
  ""files"": [
    ""./lib.deno.d.ts"",
    ""./myProject.ts""
  ]
}
Note I cannot think of a good way of creating a unit test for this at the JS level and it took me manually doing the export and checking the file to validate it and make sure it works.  Some changes to errors.ts had caused some issues with the resulting types, which were only detectable that way.  It might be possible to run the types through tsc to validate them (essentially do what is suggested above as part of the test suite) but I wanted to get feedback before pursuing that.",4,24
731,2018-09-12T05:46:45Z,2018-09-12T15:44:58Z,2018-09-12T15:44:59Z,9,118,65,"Refactored rename. Related to #671.

 Moved renameSync to rename.ts
 Added async rename
 Added rename_test.ts",2,0
732,2018-09-12T06:25:34Z,2018-09-12T14:28:48Z,2018-09-12T14:28:48Z,5,24,7,"Found it troubling to not expose mode on *nix for implementing mode related controls and tests.
Added mode to FileInfo and StatRes. Used mode -1 to mark on Windows (would be set to null in FileInfo).
Might not be the best option though, could consider instead add has_unix_mode: bool; to StatRes for distinguishing.",2,0
734,2018-09-12T14:34:46Z,2018-09-12T18:19:58Z,2018-09-12T18:19:58Z,1,32,49,,3,1
735,2018-09-12T14:50:06Z,2018-09-12T19:17:18Z,2018-09-12T19:17:18Z,1,9,10,,2,2
736,2018-09-12T22:50:13Z,2018-09-13T00:45:48Z,2018-09-13T00:45:48Z,1,1,1,"Support headers in fetch()
Adds many async fs functions:
deno.rename() deno.remove(), deno.removeAll(), deno.removeSync(),
deno.removeAllSync(), deno.mkdir(), deno.stat(), deno.lstat()
deno.readFile() and deno.writeFile().
Add mode in FileInfo
Access error codes via error.kind
Check --allow-net permissions when using fetch()
Add deno --deps for listing deps of a script.",2,0
737,2018-09-13T02:41:38Z,,2018-09-13T05:57:21Z,7,146,86,"Added //js/make_temp_dir.ts and //js/make_temp_dir_test.ts
Added deno.makeTempDir and test of it",2,2
738,2018-09-13T04:28:03Z,2018-09-13T05:49:27Z,2018-09-13T05:49:27Z,2,17,3,,2,0
739,2018-09-13T04:41:02Z,,2018-09-14T08:59:27Z,2,34,18,,2,2
742,2018-09-13T09:54:07Z,2018-09-19T04:38:25Z,2018-09-19T04:38:25Z,7,166,1,"Prior art:
Go: func Symlink(oldname, newname string) error
Node: fs.symlink(target, path[, type], callback)
Python: os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)
Rust:

unix: pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> Result<()>
windows (dir): pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> Result<()>
windows (file): pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> Result<()>

So, on Windows, a symlink represents either a file or a directory meaning we need to explicitly specify the type of symlink. So, I followed Go's convention and didn't implement type (we encourage simplicity!) and essentially used the same pattern as the Go's implementation to handle it internally by getting the oldname's stats and creates the symlink_dir() or symlink_file() based on that.",3,8
746,2018-09-14T02:00:06Z,2018-09-14T19:30:43Z,2018-09-14T19:30:43Z,5,36,15,Enable mode for mkdir on *nix.,3,3
748,2018-09-14T08:40:47Z,2018-09-14T12:25:47Z,2018-09-14T12:25:47Z,1,2,1,"The command line flag to enable the debug logging is --log-debug or -D.
$deno --log-debug
DEBUG JS - cwd E:/fe/deno
DEBUG JS - argv []
No input script specified.

--DEBUG may be a spelling mistake.
$RUST_BACKTRACE=1 deno --DEBUG
thread 'main' panicked at 'not yet implemented', ..\..\src\flags.rs:60:14
stack backtrace:
   0: <unknown>
   1: <unknown>
   2: <unknown>
   3: <unknown>
   4: <unknown>
   5: <unknown>
   6: <unknown>
   7: <unknown>
   8: <unknown>
   9: <unknown>
  10: <unknown>
  11: <unknown>
  12: <unknown>
  13: BaseThreadInitThunk
  14: RtlUserThreadStart",2,0
750,2018-09-14T12:50:45Z,2018-09-14T17:04:11Z,2018-09-14T17:04:11Z,7,166,0,"This patch implements the Blob interface so we can use it in fetch.blob() to access the binary data and after that, we can start working on streaming bodies.
Related to: #522",2,0
751,2018-09-14T17:58:05Z,2018-09-14T19:50:34Z,2018-09-14T19:50:34Z,3,14,3,It resolves the second item in #522.,2,0
752,2018-09-14T18:18:39Z,2018-09-14T19:27:34Z,2018-09-14T19:27:34Z,5,5,5,"fetch_types.d.ts contains a lot of types and interfaces that are not really so much related to fetch, like EventTarget, Blob, URLSearchParams and so on...
I suggest giving a more relevant name to it.
cc: @ry",2,0
754,2018-09-16T06:51:27Z,2018-09-16T16:10:37Z,2018-09-16T16:10:37Z,3,20,65,This PR bundles the dom_types into the global.d.ts which better manages the types inlined in deno.,2,0
757,2018-09-16T12:33:26Z,2018-09-16T16:12:01Z,2018-09-16T16:12:01Z,1,4,4,The example code does not work.,3,0
760,2018-09-16T17:17:26Z,2018-09-16T20:35:16Z,2018-09-16T20:35:16Z,5,104,11,"Closes #759 , if we want to drop these assert. Close this if not wanted for current stage of development",2,4
761,2018-09-16T18:39:05Z,2018-09-17T23:53:56Z,2018-09-17T23:53:56Z,5,13,10,Using int as mode is a mistake (based on Go's FileMode). Switch back to uint and uses has_mode to represent non-unix case,2,0
762,2018-09-17T00:28:28Z,2018-09-17T02:42:07Z,2018-09-17T02:42:07Z,9,40,8,,3,1
763,2018-09-17T01:17:17Z,2018-09-17T02:27:32Z,2018-09-17T02:27:32Z,3,15,5,,2,0
765,2018-09-17T14:05:20Z,2018-09-17T19:00:58Z,2018-09-17T19:00:58Z,1,33,18,,2,0
766,2018-09-17T17:47:30Z,2018-09-17T19:09:22Z,2018-09-17T19:09:22Z,3,104,27,,2,0
768,2018-09-17T23:03:20Z,2018-09-18T04:41:30Z,2018-09-18T04:41:30Z,4,4,5,,2,1
769,2018-09-18T01:23:11Z,2018-09-18T03:07:55Z,2018-09-18T03:07:55Z,3,153,136,,2,0
770,2018-09-18T05:18:36Z,2018-09-18T06:25:48Z,2018-09-18T06:25:48Z,2,9,1,,2,0
771,2018-09-19T02:09:34Z,,2018-09-20T07:54:40Z,9,209,1,"This PR implements basic OS info detection. Based on Rust cfg macro. See conditional compilation (It turns out the list might not be complete, check librustc-target source.
Use case: e.g. for Blob for converting line endings to native (CRLF vs LF).
Python: platform library
Go: runtime.GOOS
Rust: use cfg macro
Node: process.platform",3,2
772,2018-09-19T15:25:38Z,2018-09-25T02:16:24Z,2018-09-25T02:16:24Z,3,4,42,The externalize property is unused. This should be faster.,2,3
773,2018-09-19T19:52:24Z,2018-09-20T06:13:59Z,2018-09-20T06:14:00Z,8,82,0,"Related to #771 .
Now deno.arch and deno.platform becomes exactly the same as Node's process.arch and process.platform. Injected compile-time in rollup.config.js.
(I am not familiar with rollup but a brief examination of its documentation seems justifying this solution, though might not be the best . Manually tested and working locally. Hard to create test for it though...)
@kitsonk",3,1
774,2018-09-20T04:52:59Z,2018-09-20T06:19:27Z,2018-09-20T06:19:27Z,1,1,1,cause await can't be used in non async functions,3,1
775,2018-09-20T08:13:52Z,,2018-09-20T23:07:07Z,9,183,0,"Basic window.atob() and window.btoa() implementation.

Currently, this implementation does not throw InvalidCharacterError for codepoint outside of 0x00-0xFF range. For example, atob(btoa(""你好""))) === ""你好"" is supported with this implementation, but in browsers (based on standard), btoa(""你好"") should throw error.
Would add charcode range checks if necessary for current stage.",3,2
776,2018-09-20T20:57:55Z,2018-09-20T22:53:30Z,2018-09-20T22:53:30Z,4,74,0,"Related to #775 . Uses base64-js for implementation (pure JS/TS)
There is still another option: use a polyfill version, which might be more lightweighted.",3,0
777,2018-09-21T01:52:53Z,2018-09-21T16:07:00Z,2018-09-21T16:07:00Z,6,145,3,"This PR tries to address #373.

This uses hyperfine for benchmarking tool.
This solution uses gh-pages for static hosting of web site, and stores benchmark data in a json file //data.json in gh-pages branch.
Added //tools/benchmark.py, which performs benchmarks, downloads gh-pages branch and append data to //gh-pages/data.json.
Added //website/ directory which contains the frontend resources to show the chart of benchmarked data. (The page uses d3 and c3 for showing the chart.)
Added provider: pages in deployment of travis. This deploys //gh-pages/ directory to gh-pages branch.

This requires $GITHUB_TOKEN env var set appropriately in travis.



The demo is available here, which I tested in my fork.


notes:

This uses a single json file as a database. I think this scales up to a few thousand data, but probably it needs to be replaced with more serious db tools like sqlite or online db solutions after thousands of commits.",2,4
782,2018-09-21T18:43:24Z,2018-09-25T21:02:50Z,2018-09-25T21:02:50Z,17,516,267,,2,2
795,2018-09-22T05:36:12Z,2018-09-22T07:59:27Z,2018-09-22T07:59:27Z,6,167,0,"Closes #788 .
Implements deno.trace(fnOrPromise: Function | Promise<any>): Promise<string[]>.
Notice that for calls such as deno.mkdir(), we should place it inside an async function for tracing (to avoid missing the first message due to the syntactical nature of async/await), such as await deno.trace(async () => await deno.mkdir(""my_dir""))
Nested trace calls would have the inner trace result flattened and concat to the outer one. See traceIdempotent test for details",2,1
796,2018-09-22T07:08:01Z,2018-09-22T12:47:45Z,2018-09-22T12:47:45Z,10,69,71,"#793   rename deno.argv to deno.args
#792   rename libdeno::DenoC to libdeno::isolate
#791   rename deno_set_flags to deno_set_v8_flags",2,0
797,2018-09-22T07:47:27Z,2018-09-25T04:20:49Z,2018-09-25T04:20:49Z,7,133,1,"Prior art:
Go: func Readlink(name string) (string, error)
Node: fs.readlink(path[, options], callback)
Python: os.readlink(path, *, dir_fd=None)
Rust: pub fn read_link<P: AsRef<Path>>(path: P) -> Result<PathBuf>",2,2
798,2018-09-22T08:10:15Z,2018-09-22T09:17:29Z,2018-09-22T09:17:29Z,6,181,19,,3,2
799,2018-09-22T09:15:52Z,2018-09-22T12:43:45Z,2018-09-22T12:43:45Z,2,83,120,,2,0
800,2018-09-22T10:11:58Z,2018-09-22T12:43:00Z,2018-09-22T12:43:00Z,1,1,1,"[Land on approval]
Fix travis CI condition
CI for this pull request won't tell if this fixes the build. This CI run should provide better insight: master...aef3d06",2,0
801,2018-09-22T10:39:24Z,2018-09-24T19:33:51Z,2018-09-24T19:33:51Z,6,33,4,"First attempt to solve #790. It's quite hacky but it does the job and forces compilation.
Don't know yet how to test it. Feedback welcome.
EDIT: typo",3,2
804,2018-09-23T09:23:22Z,2018-09-23T15:54:08Z,2018-09-23T15:54:08Z,4,59,4,"This change tries to close #785.
This starts the tracking of binary sizes of out/release/deno in travis.
This can be tested locally by running ./tools/benchmark.py, ./tools/http_server.py, and visiting http://localhost:4545/website.
The above steps should show the page like the below:",2,0
805,2018-09-23T10:30:00Z,2018-09-30T19:06:21Z,2018-09-30T19:06:21Z,7,147,0,"Node:  fs.truncate(path[, len], callback)
Go:  func Truncate(path string, length int64) (err error)
Python:  os.truncate(path, length)
Rust:  pub fn set_len(&self, size: u64) -> Result<()>",3,2
806,2018-09-23T14:05:24Z,2018-09-27T23:33:44Z,2018-09-27T23:33:44Z,1,7,3,"This should close issue #802
I have added in-detail build instructions for Windows users specially. For OSX and Linux I have copied from VSCode. This will help new people to test out the project and not get stuck like I had.",3,2
809,2018-09-23T22:54:52Z,2018-09-24T19:42:10Z,2018-09-24T19:42:11Z,3,19,1,"Closes #808 .
Explicitly add .toString() for frame of eval origin.
Example: when running
eval(""boom"");
Before fix:
=====Error inside of prepareStackTrace====
TypeError: CallSite method toString expects CallSite as receiver
    at Object.toString (<anonymous>)
    at stack.map (gen/bundle/main.js:127367:77)
    at Array.map (<anonymous>)
    at prepareStackTrace$1 (gen/bundle/main.js:127367:28)
    at Function.prepareStackTraceWrapper (gen/bundle/main.js:127355:18)
    at onGlobalError (gen/bundle/main.js:127917:25)
=====Original error=======================
ERROR RS -

After fix:
ReferenceError: boom is not defined
    at eval (eval at <anonymous> (/Users/kevinqian/Desktop/Programming/Deno/deno/test3.ts), <anonymous>:1:1)
    at eval (file:///Users/kevinqian/Desktop/Programming/Deno/deno/test3.ts:1:1)
    at DenoCompiler.eval [as _globalEval] (<anonymous>)
    at DenoCompiler._gatherDependencies (deno/js/compiler.ts:212:10)
    at DenoCompiler.run (deno/js/compiler.ts:557:12)
    at denoMain (deno/js/main.ts:71:12)
    at deno_main.js:1:1",3,2
810,2018-09-24T00:31:46Z,2018-09-25T05:27:03Z,2018-09-25T05:27:03Z,4,13,8,"libdeno.print(x: string, isErr?: boolean).
If isErr is true, print to stderr. Otherwise, print to stdout.",2,0
811,2018-09-24T07:20:41Z,2018-09-24T22:12:53Z,2018-09-24T22:12:53Z,7,91,8,"For #786
Only works on linux. Relies on strace and observes count of clone() calls.
(If needed, could also add dtruss based observation for macos upon request)",2,1
813,2018-09-24T08:29:40Z,2018-09-24T15:31:15Z,2018-09-24T15:31:15Z,4,131,20,"This PR starts the unit testing of website's script (using deno as runtime). Closes #812.

I found #811 after creating this one. I'm glad to update this PR if #811 merged first.",2,0
819,2018-09-24T22:25:26Z,,2018-10-05T14:55:47Z,26,11,29,"#794
Move js/*_test.ts to tests/",4,8
820,2018-09-24T23:12:46Z,2018-09-25T03:58:19Z,2018-09-25T03:58:19Z,6,194,25,"Uses strace. Specially handling interleaving syscall report cases (<unfinished> and <resumed>, keep only one of them) and skipping +++ exited with 0 +++ lines",2,0
826,2018-09-25T07:32:21Z,2018-09-30T22:10:20Z,2018-09-30T22:10:20Z,5,105,33,"Some improvements on Console to mimic the behavior of Node.js (if this's what we want to do):

console.log only shows up to 3 levels for nested objects. Deeper structures are shown as [object].
Add console.dir function which supports depth parameter, to customize output nested levels.

This's my first PR to the deno repo and please let me know for any suggestions. Thanks guys!",6,5
827,2018-09-25T08:41:02Z,2018-09-25T17:13:10Z,2018-09-25T17:13:10Z,4,40,11,"Ref #790
Fixes #780",2,0
828,2018-09-25T14:53:28Z,2018-09-25T16:47:14Z,2018-09-25T16:47:14Z,1,4,4,,3,1
830,2018-09-25T19:09:08Z,2018-09-26T00:08:09Z,2018-09-26T00:08:09Z,5,71,14,"Closes #818
Adds binary size benchmark for main.js, main.js.map, snapshot_deno.bin, while keeping backward-compatible.",4,2
831,2018-09-26T00:12:59Z,2018-09-26T18:43:27Z,2018-09-26T18:43:27Z,3,104,64,"This doesn't attempt to convert all of the handlers, just tries to establish the pattern.",2,0
832,2018-09-26T00:34:27Z,2018-09-27T00:26:34Z,2018-09-27T00:26:34Z,3,67,2,"The x-axis is PR's number and y-axis is travis compile time.
Here is api link.
#822",3,8
833,2018-09-26T01:49:54Z,2018-09-27T19:49:44Z,2018-09-27T19:49:44Z,1,7,5,"Previously it would dump the traceback but not raise when running on a thread.
Note: serve_forever could crash for some other reason, but the main reason spawn would throw is if the port is in use... so do that sync in the original thread.

Other options are to use with or to not care/allow spawning multiple (and ignore the error).",2,2
834,2018-09-26T01:59:23Z,2018-09-26T18:21:56Z,2018-09-26T18:21:57Z,8,156,126,,2,0
835,2018-09-26T02:10:33Z,,2018-09-26T22:36:15Z,5,70,12,"Closes #824
Save duration for running ./tools/test.py. I also added ./tools/build.py, but could be removed if not needed.

(build time on the image is very short since I have built the binary already)",3,4
836,2018-09-26T06:53:24Z,2018-09-26T12:35:14Z,2018-09-26T12:35:14Z,5,14,71,"Reverts #830
Broke the build.",3,2
837,2018-09-26T17:12:52Z,2018-09-26T23:30:44Z,2018-09-26T23:30:44Z,2,79,47,"Closes #684 , print out error.stack when encountering object as instance of Error  (since #676 is closed for now)
(Would attempt handling more special types and add print indentation once #826 lands. Would import code heavily from #676)",2,0
838,2018-09-26T18:15:51Z,2018-09-27T21:33:10Z,2018-09-27T21:33:10Z,12,379,190,"This is laying the pipe for zero-copy parameter to libdeno.send.
Depends on #831.",2,0
839,2018-09-26T19:18:19Z,2018-09-26T21:16:23Z,2018-09-26T21:16:23Z,5,71,14,Resubmitting without change 8c7416b / #830,3,1
841,2018-09-27T00:41:53Z,2018-09-27T09:00:25Z,2018-09-27T09:00:25Z,3,44,8,,3,0
842,2018-09-27T02:58:47Z,2018-09-27T21:34:52Z,2018-09-27T21:34:52Z,1,2,5,Makes it seem like we have better startup time.,2,0
845,2018-09-27T04:46:18Z,2018-09-27T06:19:43Z,2018-09-27T06:19:43Z,2,48,19,"Closes #843 (and hopefully closes #844 if okay)
Demonstrated in screen capture below:

 truncate sha1 to last 8 chars for x-axis
 click data points to visit commit/PR on github


For further reference: d3.js doc",2,0
846,2018-09-27T07:49:35Z,2018-09-29T00:53:34Z,2018-09-29T00:53:35Z,13,554,3,Depends on #838,2,0
848,2018-09-27T23:37:40Z,2018-09-28T02:16:06Z,2018-09-28T02:16:06Z,1,7,3,Land #806.,3,0
850,2018-09-28T03:47:13Z,,2018-10-26T13:40:29Z,5,72,12,"Basically #835
Closes #824",2,1
853,2018-09-28T15:48:34Z,2018-09-30T14:31:51Z,2018-09-30T14:31:51Z,3,195,54,#522       Base on spec-whatwg  and more test,3,1
858,2018-09-29T01:08:38Z,2018-09-29T17:36:08Z,2018-09-29T17:36:08Z,1,1,1,"Adds deno.stdin, deno.stdout, deno.stderr, deno.open(), deno.write(),
deno.read(), deno.Reader, deno.Writer, deno.copy() #846
Print 'Compiling' when compiling TS.
Support zero-copy for writeFile() writeFileSync() #838
Fixes eval error bug #837
Make Deno multithreaded #782
console.warn() goes to stderr #810
Add deno.readlink()/readlinkSync() #797
Add --recompile flag #801
Use constructor.name to print out function type #664
Rename deno.argv to deno.args
Add deno.trace() #795
Continuous benchmarks https://denoland.github.io/deno/",2,0
859,2018-09-29T04:23:19Z,2018-10-02T16:38:46Z,2018-10-02T16:38:46Z,9,134,28,"Trying to close #857
Guess .ts -> Guess .js -> Give up
Added tests in both tests/ and deno_dir.rs.
(Hope I have not missed something...)",3,1
860,2018-09-29T04:27:52Z,2018-09-30T15:01:09Z,2018-09-30T15:01:09Z,1,1,1,"Top-level await is not implemented, so perhaps we should remove from the README?
See the Top-level await issue: #471",5,4
863,2018-09-30T03:03:38Z,2018-09-30T22:06:42Z,2018-09-30T22:06:42Z,7,207,0,"What is in this PR

 Add deno.copyFile(from, to) and deno.copyFileSync(from, to)
 Delete unused flatbuffers table WriteFileSync

Implementation reference

Go: open file and then io.Copy(to, from)
Node: fs.copyFile(src, dest[, flags], callback)
Rust: std::fs::copy(from: P, to: Q)
Ruby: FileUtils.copy_file(src, dest, preserve = false, dereference = true)

Details
Implemented copyFile since it is a handy call.
An alternative implementation could have been done by using deno.File, open 2 files and do copy between file descriptors, but would require multiple serialization/deserialization instead of once.
Removed table WriteFileSync { ... } from msg.fbs since I could not found where it is used. It was introduced in #846, probably due to a rebase/merge error.",2,1
864,2018-09-30T15:15:35Z,2018-09-30T20:35:13Z,2018-09-30T20:35:13Z,4,21,15,@kevinkassimo please review if you have the time and inclination.,3,0
868,2018-09-30T19:16:36Z,2018-09-30T22:05:38Z,2018-09-30T22:05:38Z,1,0,7,"Removed table WriteFileSync { ... } from msg.fbs since I could not found where it is used. It was introduced in #846, probably due to a rebase/merge error.",2,0
869,2018-09-30T21:32:41Z,2018-10-04T09:31:44Z,2018-10-04T09:31:44Z,1,6,0,A quick README update on installing dependent packages before running ./tools/format.py. Feel free to close this PR if we feel that's too trivial/there's no need to include it. Thanks!,3,0
870,2018-10-01T00:35:29Z,,2018-10-01T08:07:54Z,1,17,7,,2,0
871,2018-10-01T08:12:52Z,2018-10-01T14:23:37Z,2018-10-01T14:23:37Z,1,6,7,,2,0
873,2018-10-01T15:24:31Z,2018-10-01T16:41:37Z,2018-10-01T16:41:38Z,2,28,10,"Closes #872
Explicitly use class assignment syntax + arrow function to bind this, ensure this.printFunc is defined.",2,0
874,2018-10-01T15:42:27Z,2018-10-03T07:54:26Z,2018-10-03T07:54:26Z,1,1,1,"The benchmark was added in b7fd6e but was not surfaced in the UI.
TODO: The tests should have failed and caught this situation.",2,0
877,2018-10-01T18:03:26Z,,2018-10-26T13:45:21Z,1,1,1,Added masking file permissions,2,1
879,2018-10-01T23:50:04Z,2018-10-02T02:30:59Z,2018-10-02T02:30:59Z,8,197,191,,2,1
880,2018-10-02T16:33:09Z,2018-10-03T20:59:01Z,2018-10-03T20:59:01Z,7,31,41,cc @kitsonk @kevinkassimo,4,0
882,2018-10-02T21:53:21Z,2018-10-03T09:21:26Z,2018-10-03T09:21:26Z,1,7,7,This is a continuation of the previous PR #840,4,2
884,2018-10-03T05:55:42Z,2018-10-04T03:58:30Z,2018-10-04T03:58:30Z,11,497,6,"Adds deno.listen(), deno.dial(), deno.Listener and deno.Conn.
Fixes #725",2,7
885,2018-10-03T06:23:43Z,2018-10-03T20:45:32Z,2018-10-03T20:45:32Z,11,388,257,,4,5
887,2018-10-03T11:46:35Z,2018-10-03T22:22:58Z,2018-10-03T22:22:58Z,9,294,93,"It was PR that had come up before, but it was closed. #652
After that, PR does not come up again.
So, I send PR.
Prior art:

Go: func ReadDir(dirname string) ([]os.FileInfo, error)
Node: fs.readdirSync(path[, options])
Python: os.listdir(path)
Rust: pub fn read_dir<P: AsRef>(path: P) -> Result",2,1
889,2018-10-03T15:11:18Z,2018-10-04T01:58:34Z,2018-10-04T01:58:34Z,1,18,23,"This PR tries to fix failed test cases in //website/app_test.js.
(CI seems skipping these tests. See #888 for details)",3,6
891,2018-10-03T19:47:40Z,2018-10-03T21:06:09Z,2018-10-03T21:06:09Z,2,2,2,"Upgrades TS to 3.0.3 to help #729
Also upgrades minor versions of other JS deps. I wasn't able to upgrade rollup without a build failure - so that was left out.
Tests failing locally - this may need to wait for #889 to land.
cc @kitsonk",2,0
892,2018-10-03T22:19:05Z,2018-10-03T23:38:24Z,2018-10-03T23:38:24Z,1,18,10,"Disabled in #885 .
Relevant Rust issue: rust-lang/rust#54800
ErrorKind.InvalidInput is the expected ErrorKind on *nix, as shown below from Rust's libstd source:
https://github.com/rust-lang/rust/blob/5597ee8a6483238421750fce4eb7031b12852428/src/libstd/sys/unix/fs.rs#L837-L842
if !from.is_file() {
  return Err(Error::new(ErrorKind::InvalidInput,
    ""the source path is not an existing regular file""))
}
However, based on @piscisaureus 's feedback, on windows this would actually be a ErrorKind.NotFound. Rust's doc is kind of unclear on this.
For now, check based on platform.
(I feel we probably will need to address uniform ErrorKind cross platform at some point)",3,4
898,2018-10-04T01:19:11Z,2018-10-04T04:25:56Z,2018-10-04T04:25:56Z,34,490,462,,2,0
900,2018-10-04T04:39:06Z,2018-10-05T11:29:55Z,2018-10-05T11:29:55Z,9,15,10,"Fixes #897
This change will lint the entire js and tests directories and their sub directories. Currently it was pointing at tsconfig and would only lint files that were part of js/main.ts or node_modules/typescript/lib/lib.esnext.d.ts and their dependencies
After this change ./tools/lint.py will fail as the test files were not previously linted and some of them will now fail lint. Fixing these newly found test format issues should probably be opened as part of another PR.",3,2
902,2018-10-04T07:25:59Z,2018-10-04T12:56:33Z,2018-10-04T12:56:34Z,1,1,1,"Improve fetch headers (#853)
Add deno.truncate (#805)
Add copyFile/copyFileSync (#863)
Limit depth of output in console.log for nested objects, and add
console.dir (#826)
Guess extensions on extension not provided (#859)
Renames:
deno.platform -> deno.platform.os
deno.arch -> deno.platform.arch
Upgrade TS to 3.0.3
Add readDirSync(), readDir()
Add support for TCP servers and clients. (#884)
Adds deno.listen(), deno.dial(), deno.Listener and deno.Conn.",2,2
903,2018-10-04T07:36:29Z,2018-10-05T16:16:24Z,2018-10-05T16:16:24Z,7,222,13,"Attempt to implement closeRead/closeWrite
Simulated shutdown(2) interface.
Also briefly implemented Conn.addr()",2,0
904,2018-10-04T08:15:52Z,,2018-10-04T11:03:42Z,2,8,1,export create and add tests for create,2,0
906,2018-10-04T10:16:33Z,2018-10-04T16:31:40Z,2018-10-04T16:31:40Z,4,24,12,"This fixes an issue with flattening types for #729 but also makes much more sense that platform.ts owns the types since they aren't used anywhere else in Deno.
Generally we should try to keep types close to the code instead of abstracting them out.",2,1
907,2018-10-04T15:47:57Z,2018-10-13T20:03:28Z,2018-10-13T20:03:28Z,7,156,5,"not expecting merge
i just wanted to write new function to get current working directory, it would be helpful if you guys provide feedback",5,15
908,2018-10-04T20:09:19Z,,2018-10-15T16:52:21Z,5,94,4,"Prior art:
go:  func Create(name string) (*File, error)
rust: tokio::fs::File::create<P>(path: P) -> CreateFuture<P>",4,3
909,2018-10-04T21:37:52Z,2018-10-05T14:13:23Z,2018-10-05T14:13:23Z,4,23,20,"Resolves #876
This only exposes the compiler module to userland via an ""undocumented"" _compiler property of the Deno module.",2,1
914,2018-10-05T14:29:05Z,2018-10-05T18:27:48Z,2018-10-05T18:27:48Z,6,42,38,"Add errors::bad_resource()
Move permission_denied() to errors.rs
Make op_symlink's not_implemented() into a runtime panic.",2,0
915,2018-10-05T15:24:21Z,2018-10-05T19:10:55Z,2018-10-05T19:10:55Z,2,2,2,,2,0
916,2018-10-05T17:22:51Z,2018-10-06T01:13:36Z,2018-10-06T01:13:36Z,1,1,1,,2,2
921,2018-10-05T21:43:46Z,,2018-10-06T19:03:18Z,8,54,41,,3,2
923,2018-10-06T00:20:57Z,,2018-10-10T07:24:53Z,42,416,288,,8,1
926,2018-10-06T10:37:56Z,,2018-10-21T11:44:30Z,1,14,2,,2,1
927,2018-10-06T16:21:27Z,2018-10-07T02:16:43Z,2018-10-07T02:16:43Z,1,4,1,"There are many essential interfaces in io.ts that I don't see any way to access in scripts. This change exports them all such that they can be accessed as:
import { ReadSeeker, Closer, ReadResult, ... } from ""deno"";
The Seeker interface mentions the constants SeekStart, SeekCurrent and SeekEnd, which I believe should also be defined and exported, but I'm not sure what the correct values would be.
One test failed, but it doesn't appear to have anything to do with the changes:
test netDoubleCloseRead_permW0N1E0
Error
    at Object.assert (file:///home/ns/git/deno/js/testing/util.ts:35:11)
    at netDoubleCloseRead (file:///home/ns/git/deno/js/net_test.ts:89:3)",4,7
928,2018-10-06T19:03:05Z,2018-10-07T00:24:48Z,2018-10-07T00:24:48Z,6,35,17,adds test case from @kevinkassimo,3,1
934,2018-10-07T17:57:45Z,2018-10-10T00:31:07Z,2018-10-10T00:31:07Z,4,84,22,"Closes #931
fetch_sync_string now follows redirect.
There was something called RedirectPolicy in an older version of hyper, but is currently dropped. I admit the code does not look very elegant, would try to simplify...",3,5
937,2018-10-08T00:07:36Z,2018-10-08T02:52:28Z,2018-10-08T02:52:28Z,8,39,37,"Refs #632
In preparation for supporting types, there are several minor ""cleanups"" of the js/ modules that are part of the runtime which will make the internal default library ""cleaner"".",2,1
938,2018-10-08T03:48:14Z,2018-10-14T21:39:43Z,2018-10-14T21:39:43Z,2,88,0,"Resolves #910
This adds .github/CONTRIBUTING.md and provides some general guidelines for contributing as well as documents the thinking about JSDoc comments outlined in issue #910 and can be the place for further refinement of contributing to Deno.
The pull request template has been updated to mention it, but also GitHub provides links to the contributing guidelines whenever anyone raises a Pull Request.
[ci skip]",4,4
939,2018-10-08T04:05:03Z,2018-10-08T15:36:10Z,2018-10-08T15:36:10Z,3,8,2,"Trying to close #935
Only print stack if the thrown is of instance of Error. Otherwise, print Thrown: ${String(thrown)}.
For example,
throw {};
now prints
Thrown: [object Object]",2,0
940,2018-10-08T07:37:16Z,2018-10-08T16:30:29Z,2018-10-08T16:30:29Z,10,179,168,"I'm not super sure about the rename from data to isolate_data, it is still very ambiguous.
Maybe it should be callback_data or user_data or embedder_data instead.",2,2
941,2018-10-08T07:56:37Z,2018-10-11T17:21:27Z,2018-10-11T17:21:27Z,1,16,28,,2,1
946,2018-10-09T00:24:44Z,,2018-10-24T09:02:58Z,1,2,2,"This resolves some TODOs in the testing library.

Shows the ok / FAILED message in the same line as the name of the test case.
Counts the number of filtered tests.


Waiting for #948 to be resolved first.",3,2
947,2018-10-09T03:04:25Z,,2018-10-16T10:27:15Z,10,220,14,"current issues

 evaluate real reason behind setTimeout not working
 better global handler (currently deno is exiting whenever exception is happening)
 repl should print of previous line execution (until we do console.log)",5,30
950,2018-10-09T17:24:38Z,2018-10-10T16:18:50Z,2018-10-10T16:18:50Z,1,27,25,,2,0
951,2018-10-10T07:24:57Z,2018-10-10T12:04:00Z,2018-10-10T12:04:00Z,1,6,5,"@ry  Sorry for my bad, pull request #923 again.",2,0
952,2018-10-10T13:33:14Z,,2018-10-10T20:23:25Z,24,1052,103,"Continuation of #729 - this patch has my approval.
Due to the size and complexity of this, I want to do another round of reviews with @piscisaureus
The output of ./out/debug/deno --types looks like this: https://gist.github.com/ry/906d9aa89e0fa6a4b17a21276d5158c5
Fixes #632",3,12
953,2018-10-10T15:17:54Z,2018-10-10T16:21:03Z,2018-10-10T16:21:03Z,6,30,36,"Rename BadFileDescriptor to BadResource
Rename fd to rid",2,4
958,2018-10-11T04:24:40Z,2018-10-11T20:56:51Z,2018-10-11T20:56:51Z,6,675,20,"Checks the output more carefully. The first line of output from
js/unit_tests.ts should be something like ""running 96 tests""
And the last line should be something like
""test result: ok. 96 passed; 0 failed; 0 ignored; 0 measured; 36
filtered out""
This parses those strings and make sure they align.
This will catch silent death bugs.",3,1
959,2018-10-11T05:52:10Z,2018-10-12T18:22:52Z,2018-10-12T18:22:53Z,14,299,6,"Closes #936
Rationale see #936 comments (handler implementation moved to TS side).
v8 emits kPromiseHandlerAddedAfterReject when a catch block is found in async function, that cancels a previous kPromiseRejectWithNoHandler. Postpone error handling and exit to the end of each event loop cycle. tests/async_error.ts.out actually now matches that running under Node. (""world"" is printed first: error handling only happens after script running to its end)
An alternative C++ only implementation could be found here",3,0
960,2018-10-11T08:18:02Z,,2018-10-11T22:17:18Z,28,1228,112,"Resolve #632
This is a continuation of previous pull requests (#952 and #729) which addresses additional feedback and includes basic unit tests for the ts_library_builder.",4,6
961,2018-10-11T08:20:45Z,2018-10-11T20:55:23Z,2018-10-11T20:55:23Z,6,145,7,Fixes #890,2,2
962,2018-10-11T10:09:12Z,2018-10-11T14:45:02Z,2018-10-11T14:45:02Z,1,4,4,It'd be better if there are links of issues for convenience.,2,0
963,2018-10-11T17:45:05Z,2018-10-11T19:45:52Z,2018-10-11T19:45:52Z,9,266,5,continuing from #917,3,2
965,2018-10-11T21:06:03Z,2018-10-11T22:22:06Z,2018-10-11T22:22:06Z,1,1,4,cc @bartlomieju,3,2
966,2018-10-11T21:37:03Z,2018-10-12T12:58:19Z,2018-10-12T12:58:19Z,1,1,1,"This will improve the threshold benchmark. Using 32k because that's what
Go uses, but we should explore the value in the future.
https://github.com/golang/go/blob/a0d6420d8be2ae7164797051ec74fa2a2df466a1/src/io/io.go#L391",2,0
967,2018-10-11T22:16:55Z,2018-10-12T00:29:44Z,2018-10-12T00:29:44Z,30,1244,113,,3,0
970,2018-10-12T11:02:58Z,2018-10-15T16:08:19Z,2018-10-15T16:08:20Z,6,79,7,Fixes #552,3,2
971,2018-10-12T16:54:55Z,2018-10-26T13:55:06Z,2018-10-26T13:55:06Z,3,98,16,"Supposed to close #930
Reorganize $DENO_DIR/deps folder by creating protocol specific subdirectories.
e.g.
import ""http://a.com/a.ts""
import ""https://b.com/b.ts""
should create folder $DENO_DIR/deps/http/a.com and $DENO_DIR/deps/https/b.com
I feel this might be also a necessary step for Deno to probably support other protocols in the future.
There is currently no test on TS side. To add tests, I hope I could get sample code from #930 (comment) to be hosted somewhere stable.",4,5
980,2018-10-13T01:58:58Z,2018-10-15T16:47:49Z,2018-10-15T16:47:49Z,5,11,14,"Resolves: #969
Requires: denoland/deno_third_party#14",2,0
982,2018-10-13T09:17:08Z,2018-10-18T09:08:50Z,2018-10-18T09:08:51Z,2,28,3,@ry this PR fixes problem described in #965,3,1
987,2018-10-14T04:26:38Z,,2018-11-14T08:33:08Z,5,52,0,Add convert tools that described in #957,6,3
988,2018-10-14T13:05:05Z,2018-10-15T16:37:19Z,2018-10-15T16:37:19Z,1,4,0,"The Jumbo build is the Chromium implementation of a Unity build system
aimed at dramatically lowering the compilation times. It can be easily
enabled with use_jumbo_build=true.
When you enable this, the biggest problem is that name conflicts can
occur between multiple c++ files merged, which is no problem for Deno.
Because the V8's Jumbo build is managed in upstream, and Deno will
just pick up a stable build V8.
So, this patch enables Jumbo build by default. After this patch, the
total number of build objects are halved. (1014 -> 493)
FYI, the following results are tested in my local environment.

IMAC 5K, i5 4-cores, 24GB, 512GB SSD

Test result1: No use ccache




Jumbo build without ccache
Normal build without ccache




1
0:05:26
0:11:31


2
0:05:24
0:11:29


3
0:05:25
0:11:28


4
0:05:24
0:11:29


5
0:05:26
0:11:29


AVG
0:05:25
0:11:29



Test result2: Use ccache




Jumbo build with ccache
Normal build with ccache




1
0:01:38
0:01:13


2
0:01:45
0:01:21


3
0:01:39
0:02:20


4
0:01:45
0:02:16


5
0:01:42
0:02:19


6
0:01:17
0:01:11


7
0:01:01
0:01:48


8
0:00:54
0:01:57


9
0:01:03
0:02:15


10
0:01:36
0:02:19


AVG
0:01:26
0:01:54



Refs: https://chromium.googlesource.com/chromium/src/+/master/docs/jumbo.md",3,2
989,2018-10-14T20:31:51Z,2018-10-14T21:38:24Z,2018-10-14T21:38:24Z,31,437,423,"Refs #910
Add and align JSDoc for most publicly facings APIs.",2,0
990,2018-10-15T01:03:09Z,2018-10-15T18:26:22Z,2018-10-15T18:26:23Z,3,44,17,"This also refactors set_flags to return a Result.
The output mirrors node:
$ ./out/debug/deno --unknown-argdeep-thought
deno: bad option --unknown-arg
$ ./out/debug/deno -z
deno: bad option -z
fixes #978",2,0
991,2018-10-15T12:53:56Z,,2018-10-20T15:32:56Z,3,215,0,Fixes #955,4,8
995,2018-10-15T18:40:54Z,2018-10-16T02:16:56Z,2018-10-16T02:16:56Z,5,25,10,Fixes #993,3,1
996,2018-10-15T21:02:44Z,2018-10-16T13:37:40Z,2018-10-16T13:37:40Z,17,173,23,"Tests against node.
Ref #977
cc @alexhultman",3,7
997,2018-10-15T23:38:29Z,,2018-10-16T01:26:10Z,7,27,6,"Closes #993
Instead of adding new bindings to v8 or change msg.Start formats (which requires us to run isolate.execute(""deno_main.js"", ""denoMain();"")), we should be able to inject the version during compilation from package.json
env!() macro expands at compile time.
(Other python file changes are caused by ./tools/format.py)",2,2
998,2018-10-16T06:01:30Z,2018-11-05T17:56:00Z,2018-11-05T17:56:00Z,13,505,13,"Rebase and work upon #947. cc @cedric05
Add tests in form of repl_test.py.
Executes js.
No compiling from ts.
Note: atm the scope of eval is window + window.deno. (I haven't been able to get the tests passing  any of the suggested alternatives) @kitsonk",5,16
1003,2018-10-16T21:25:11Z,,2018-10-25T22:38:58Z,16,283,345,,4,9
1005,2018-10-17T01:09:59Z,,2018-10-19T15:02:59Z,7,92,105,"After this patch, we can use the command as follows:
For debug build (default)
$ ./tools/build.py or $ ./tools/build.py --debug
For release build
$ ./tools/build.py --release
Fixes #1004.",2,2
1007,2018-10-17T17:21:30Z,2018-10-18T00:20:07Z,2018-10-18T00:20:07Z,27,140,69,"This is a performance improvement to reduce the number of ArrayBuffer allocations.
> ./tools/throughput_benchmark.py out/before/deno 5000
105.897539854 seconds
> ./tools/throughput_benchmark.py out/after/deno 5000
100.990852118 seconds

> ./tools/http_benchmark.py out/before/deno
Requests/sec:  17464.64
> ./tools/http_benchmark.py out/after/deno
Requests/sec:  18223.10",3,0
1009,2018-10-17T18:12:14Z,2018-10-17T20:02:01Z,2018-10-17T20:02:01Z,3,49,12,"Better at http benchmark:
~/src/deno> ./tools/http_benchmark.py out/before/deno
http_benchmark testing DENO.
Listening on 127.0.0.1:4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   790.69us    1.22ms  23.65ms   95.58%
    Req/Sec     8.25k     1.10k    9.80k    88.50%
  164125 requests in 10.00s, 7.98MB read
Requests/sec:  16407.65
Transfer/sec:    817.18KB

~/src/deno> ./tools/http_benchmark.py out/after/deno
http_benchmark testing DENO.
Listening on 127.0.0.1:4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   640.84us    0.91ms  24.95ms   97.02%
    Req/Sec     9.03k     1.05k   10.16k    94.00%
  179642 requests in 10.00s, 8.74MB read
Requests/sec:  17962.53
Transfer/sec:      0.87MB

But worse at throughput benchmark (???)
~/src/deno> ./tools/throughput_benchmark.py out/before/deno 1000
listening on 127.0.0.1:4544
head -c 1048576000 /dev/zero | nc 127.0.0.1 4544
17.5132410526 seconds

~/src/deno> ./tools/throughput_benchmark.py out/after/deno 1000
listening on 127.0.0.1:4544
head -c 1048576000 /dev/zero | nc 127.0.0.1 4544
21.8031110764 seconds",2,0
1012,2018-10-18T06:07:30Z,2018-10-20T01:36:08Z,2018-10-20T01:36:08Z,9,429,582,Ref #1012,5,2
1013,2018-10-18T15:58:12Z,2018-10-18T21:49:04Z,2018-10-18T21:49:04Z,2,14,24,"Instead of V8 map.
marginal improvements:
gpu ~/src/deno> ./tools/throughput_benchmark.py out/before/deno 1000
listening on 127.0.0.1:4544
head -c 1048576000 /dev/zero | nc 127.0.0.1 4544
3.30926418304 seconds

gpu ~/src/deno> ./tools/throughput_benchmark.py out/after/deno 1000
listening on 127.0.0.1:4544
head -c 1048576000 /dev/zero | nc 127.0.0.1 4544
3.25322794914 seconds

gpu ~/src/deno> ./tools/http_benchmark.py out/before/deno
http_benchmark testing DENO.
Listening on 127.0.0.1:4544
third_party/wrk/linux/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   436.30us  558.79us  13.90ms   96.12%
    Req/Sec    13.83k     1.41k   14.72k    92.50%
  275232 requests in 10.00s, 13.39MB read
Requests/sec:  27520.05
Transfer/sec:      1.34MB

gpu ~/src/deno> ./tools/http_benchmark.py out/after/deno
http_benchmark testing DENO.
Listening on 127.0.0.1:4544
third_party/wrk/linux/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   417.95us  486.57us  15.07ms   95.92%
    Req/Sec    14.25k     1.67k   15.04k    96.00%
  283590 requests in 10.00s, 13.79MB read
Requests/sec:  28358.23
Transfer/sec:      1.38MB",2,0
1016,2018-10-18T22:22:47Z,2018-10-19T00:46:36Z,2018-10-19T00:46:36Z,4,6,11,,2,0
1018,2018-10-19T07:03:29Z,,2018-10-24T09:31:47Z,11,321,67,"#1008

 work out how to add tests
 better messages for listen/accept
 move Permissions struct off of DenoFlags to IsolateState (maybe?)",3,21
1019,2018-10-19T07:39:14Z,2018-10-19T16:12:37Z,2018-10-19T16:12:37Z,6,130,1,Trying to close #981.,7,3
1022,2018-10-19T15:02:34Z,,2018-10-26T14:07:04Z,8,43,56,continued from #1005,3,1
1023,2018-10-19T17:10:44Z,2018-10-20T01:42:24Z,2018-10-20T01:42:24Z,4,17,15,,2,0
1024,2018-10-19T17:52:55Z,2018-10-19T19:25:30Z,2018-10-19T19:25:30Z,46,39,12,,2,0
1025,2018-10-19T18:46:20Z,2018-10-20T01:35:11Z,2018-10-20T01:35:12Z,1,3,0,,2,0
1028,2018-10-19T23:16:44Z,2018-10-20T02:08:45Z,2018-10-20T02:08:45Z,2,93,17,,2,0
1029,2018-10-19T23:16:55Z,2018-10-20T05:20:00Z,2018-10-20T05:20:00Z,9,22,19,"Costs about 18M for mac/linux.
Still needs Windows binaries. @piscisaureus could you do this?",2,1
1032,2018-10-20T02:32:40Z,2018-10-20T04:27:38Z,2018-10-20T04:27:38Z,1,6,4,,2,0
1034,2018-10-20T04:24:47Z,2018-10-20T05:49:38Z,2018-10-20T05:49:38Z,1,119,183,,2,1
1036,2018-10-20T07:00:45Z,,2018-10-20T16:45:31Z,3,154,51,"Closes #1035
Added a bit more styling.
Fixed y axis labels
Tweaked svg width to make it look better on desktop
(I could separate the y axis label fix if the styling changes is not so okay)
Before:



After:




(BTW, I own denoland.org and I could forward it to this page)",4,4
1037,2018-10-20T08:03:53Z,2018-10-20T12:07:22Z,2018-10-20T12:07:22Z,5,75,13,"This PR tries to solve #1027.

Creates //website/recent.json which includes only recent 20 benchmark data.
Loads recent.json in //website/index.html instead of data.json (all data)
Created a new page /website/all_benchmark.html which shows the all benchmark data.

index.html

all_benchmark.html


resolves #1027",2,0
1041,2018-10-20T17:21:11Z,2018-10-20T23:30:03Z,2018-10-20T23:30:03Z,4,11,3,,2,0
1043,2018-10-20T20:08:08Z,2018-10-21T02:56:17Z,2018-10-21T02:56:17Z,4,67,6,,3,11
1045,2018-10-20T21:04:18Z,2018-10-21T00:30:18Z,2018-10-21T00:30:18Z,1,1,1,"#1041 should land first.

Performance and stability improvements on all platforms.
Add cwd() and chdir() #907
Specify deno_dir location with env var DENO_DIR #970
Make fetch() header compliant with the current spec #1019
Upgrade TypeScript to 3.1.3
Upgrade V8 to 7.1.302.4",2,0
1049,2018-10-21T14:02:46Z,2018-10-21T15:07:30Z,2018-10-21T15:07:30Z,6,328,6,"This PR implements URLSearchParams with tests. The code has been successfully formatted, linted, and tested.",5,1
1051,2018-10-21T17:44:29Z,2018-10-21T20:59:54Z,2018-10-21T20:59:54Z,7,34,7,,2,0
1056,2018-10-21T22:19:14Z,2018-11-04T18:05:03Z,2018-11-04T18:05:03Z,10,360,16,"This PR adds better Blob spec compliance (objects, Uint16Array, Uint32Array tests), to pass some of WPT's tests.
This also adds File, which extends Blob, check spec here.
And FormData, which I first wanted to do (but later noticed it depended on File).
TODO:

 Expand the File and FormData's tests.
 Implement FetchResponse#formData: 
  
    
      deno/js/fetch.ts
    
    
         Line 159
      in
      c4bddc4
    
  
  
    

        
          
           async formData(): Promise<domTypes.FormData> { 
        
    
  

 I believe this goes out of this PR's scope, I'll do this in another PR once I understand how this method exactly works.",3,0
1059,2018-10-22T05:17:02Z,2019-01-05T15:02:45Z,2019-01-05T15:02:45Z,9,502,33,"This PR implements the Event Web API spec.
TODO:

 This requires an EventTarget DOM type which is being implemented by @ztplz according to #1047 Note the comments I left below for required TODOs
 There's a bunch of historical properties (srcElement, cancelBubble, returnValue, initEvent()) - do we need to implement those? Historical properties not required/removed.
 composedPath() refers to a path object but the spec interface doesn't mention this at all. Not sure how to fill this piece out. Implemented.
 Second test complains about EventInit - the interface seems like a very simple dictionary, shouldn't this implementation suffice? EventInit replaced with a simple object hash.
 Not sure how to test initEvent() since it returns nothing and populates a new Event to the global scope, there's no real signal here that anything was created successfully. Any ideas? Historical properties not required so I removed it. This is no longer a concern.",10,10
1061,2018-10-22T05:28:10Z,2018-10-23T14:45:57Z,2018-10-23T14:45:57Z,5,76,22,,2,0
1062,2018-10-22T09:02:32Z,2018-10-23T11:43:44Z,2018-10-23T11:43:44Z,9,240,151,"This PR changes the way the iterators are defined in Headers.
It uses generators and yields up the values of the private Map.  It also leverages the TypeScript type system to guard against values being passed into the constructor, which is where the value of TypeScript comes in.  I think we should expect that if code is type safe in TypeScript that we shouldn't need to perform runtime checks.
The assertion of [object Iterator] is something we shouldn't look to test.  People should never depend on that for behaviours.  Sniffing objects this way is very dangerous and not something we should ever promote.  This does produce [object Generator] and yes, the browser implementations produce [object Iterator] but I am not sure why that matters.
In just double checking things, I realise I do need to ensure that new Headers(null) fails though, as that is consistent with the browser behaviour.",6,4
1065,2018-10-22T23:29:56Z,2018-10-31T03:50:42Z,2018-10-31T03:50:42Z,6,161,44,"Fixes #1048
This is a WIP PR for allowing the import of JSON as a module, which would include the ability to ensure its type safety in consuming code.  This would allow:
config.json
{
  ""debug"": true,
  ""version"": ""1.0.0""
}
main.ts
import * as configJson from ""./config.json"";

if (configJson.debug === true) {
  console.log(`Version: ${configJson.version}`);
}",3,3
1066,2018-10-23T01:14:36Z,2018-10-23T02:37:40Z,2018-10-23T02:37:40Z,5,53,72,"Resolves #994
I have updated my gist with the current output of this PR.
Mainly it removes the ""globals"" module and scopes all the variables there to the outer global scope.  Also any modules that are required by js/globals.ts that have global scope augmentation are flattened as well.  Any types from required modules of js/globals.ts that are not elided are now declared as a global namespace.  This would mean that someone could reference a type in code (e.g. domTypes.Headers) but wouldn't be able to import anything.
Just thinking out loud, currently some namespace names are odd because of name collisions.  So fetch_ and console_ could be renamed fetchTypes and consoleTypes so that they are a little bit clearer in intent.",3,0
1067,2018-10-23T03:42:19Z,2018-10-23T11:42:24Z,2018-10-23T11:42:24Z,1,2,4,"_isFile and _isSymlink don't need to export,  remove them from FIleInfo and mark them private readonly in FileInfoImpl.",3,0
1068,2018-10-23T05:12:18Z,2018-10-23T13:01:13Z,2018-10-23T13:01:13Z,5,23,0,"Fixes #976
This PR enables the --checkJs TypeScript compiler option.  This means that JavaScript will be type checked and users can supply JSDoc type annotations that will be enforced by Deno, reporting type issues when running programmes.  This means all JavaScript will be compared to the built in type library and ensure the JavaScript programmes utilise Deno APIs with type safety.  The way JavaScript is checked by the TypeScript compiler is very loose, but allows users to incrementally ""opt-in"" using the JSDoc annotations.
The feature is described here.
While the pragma of // @ts-ignore and // @ts-nocheck work in Deno, it is not recommended they be used as they are simply ignoring a problem that might not yet be a runtime exception, but could/should be.  My recommendation is that if there is any JavaScript that should work but fails because of a type error, we look at addressing why that is the case versus just ignoring it.",2,1
1074,2018-10-23T16:43:01Z,2018-10-23T22:02:30Z,2018-10-23T22:02:31Z,3,32,5,"Fixes #1069
cc @kyranet",4,1
1077,2018-10-23T22:48:55Z,2018-10-24T14:04:34Z,2018-10-24T14:04:34Z,2,27,44,Makes y.axis.min = 0 and other cosmetic improvements.,3,1
1078,2018-10-23T23:33:32Z,2018-10-24T09:48:41Z,2018-10-24T09:48:42Z,3,135,109,,2,0
1079,2018-10-24T01:05:31Z,2018-10-24T21:52:40Z,2018-10-24T21:52:40Z,20,688,607,"Removes deno_ns (Fixes  #494)
Adds libdeno.shared()",2,1
1080,2018-10-24T02:08:18Z,2018-10-24T04:02:44Z,2018-10-24T04:02:44Z,6,91,70,Using getopts crate. Also use help message generated by getopts directly.,3,7
1081,2018-10-24T09:31:00Z,2018-10-27T13:11:40Z,2018-10-27T13:11:40Z,12,353,60,,3,5
1084,2018-10-24T19:29:06Z,2018-10-24T22:29:31Z,2018-10-24T22:29:31Z,10,28,15,"Fixes #976
This PR enables the --checkJs TypeScript compiler option.  This means that JavaScript will be type checked and users can supply JSDoc type annotations that will be enforced by Deno, reporting type issues when running programmes.  This means all JavaScript will be compared to the built in type library and ensure the JavaScript programmes utilise Deno APIs with type safety.  The way JavaScript is checked by the TypeScript compiler is very loose, but allows users to incrementally ""opt-in"" using the JSDoc annotations.
The feature is described here.
While the pragma of // @ts-ignore and // @ts-nocheck work in Deno, it is not recommended they be used as they are simply ignoring a problem that might not yet be a runtime exception, but could/should be.  My recommendation is that if there is any JavaScript that should work but fails because of a type error, we look at addressing why that is the case versus just ignoring it.
This also fixed the earlier PR which failed in master because some of the test .js modules introduced in the media types PR needed to be augmented to be type safe.",2,0
1086,2018-10-24T22:22:07Z,2018-10-26T00:06:00Z,2018-10-26T00:06:00Z,2,4,1,Fixes #374,2,0
1088,2018-10-25T06:47:13Z,2018-10-26T20:01:46Z,2018-10-26T20:01:46Z,8,213,0,"Continuation from #673 (since no updates for quite a while and this is an important fs call)
Implements chmod and chmodSync on *nix. (On windows this is noop)
Prior art:

Go: os.Chmod(name string, mode FileMode) error
Node: fs.chmod(file, mode, callback);
Python: os.chmod(path, mode);
Rust: std::fs::set_permissions<P: AsRef>(path: P, perm: Permissions) -> Result<()>

lchmod is not implemented yet. It seems that Rust std::fs only support inspecting symlink metadata, but any set_permissions/set_mode calls would eventually set the permission of linked file/dir.
Also, add getopts entry in Cargo.toml (forgot to include this in the PR yesterday)",4,3
1089,2018-10-25T12:10:26Z,2018-10-25T23:40:24Z,2018-10-25T23:40:24Z,1,1,1,"As the readme is the first thing I read when arriving on the repo, I think it should reflect the current state of deno. Maybe we would rather change the phrasing so we don't have to change it every time we update the dependencies - or we can make the change in the same commit as the version bump.
Refs: #980
Refs: #1041",3,1
1091,2018-10-25T15:04:36Z,2018-10-26T00:08:08Z,2018-10-26T00:08:08Z,1,18,17,"Fixed a few typos. Most importantly, there was a code error in the second example.
Improved a little grammatical and presentational style and consistency.",4,5
1094,2018-10-25T21:49:37Z,2018-10-25T23:12:53Z,2018-10-25T23:12:53Z,1,5,1,Ref #1087,3,1
1097,2018-10-26T11:09:17Z,2018-11-05T21:26:55Z,2018-11-05T21:26:56Z,10,44,29,"This PR builds on top of @ry branch to try to fix #1087.
The .map for the bundle goes from about 9.3Mb to 1.7Mb on my machine.  The only problem I have notices is that stack traces that go back to typescript.js don't have the line numbers anymore and are reported as <anonymous>.  I can live with that personally.
$ ./out/debug/deno tests/error_004_missing_module.ts
Compiling /Users/kkelly/github/deno/tests/error_004_missing_module.ts
NotFound: Cannot resolve module ""bad-module.ts"" from ""/Users/kkelly/github/deno/tests/error_004_missing_module.ts""
    at maybeError (deno/js/errors.ts:38:12)
    at maybeThrowError (deno/js/errors.ts:26:15)
    at sendSync (deno/js/dispatch.ts:70:5)
    at Object.codeFetch (deno/js/os.ts:40:19)
    at DenoCompiler.resolveModule (deno/js/compiler.ts:518:38)
    at moduleNames.map.name (deno/js/compiler.ts:666:31)
    at Array.map (<anonymous>)
    at DenoCompiler.resolveModuleNames (deno/js/compiler.ts:658:24)
    at Object.compilerHost.resolveModuleNames (<anonymous>)
    at resolveModuleNamesWorker (<anonymous>)

Requires denoland/deno_third_party#17.",3,9
1099,2018-10-26T14:24:03Z,2018-10-26T16:20:38Z,2018-10-26T16:20:38Z,1,2,4,,2,0
1100,2018-10-26T15:05:10Z,2018-10-26T16:40:28Z,2018-10-26T16:40:28Z,1,2,2,fetch should use same hyper connector as import.,2,0
1101,2018-10-26T16:40:06Z,,2018-10-26T20:44:59Z,4,62,8,"Added the following flags:

-c or --clear-cache: clear .deno/gen folder, remove cached compiled code
-d or --clear-deps: clear .deno/deps folder, remove cached remote resources

Also fix comments in deno_dir.rs
TODO: add tests to validate that they are working as intended?",3,8
1102,2018-10-26T17:55:52Z,2018-11-14T05:44:39Z,2018-11-14T05:44:39Z,9,254,75,,3,1
1103,2018-10-26T18:23:13Z,2018-10-26T20:07:35Z,2018-10-26T20:07:35Z,8,1,184,"Remove --deps (#1011) and deno.trace() (#829)
cc  @kevinkassimo @mirkojotic",3,0
1106,2018-10-27T01:35:09Z,2018-10-27T15:08:52Z,2018-10-27T15:08:52Z,3,30,29,,2,0
1107,2018-10-27T07:25:15Z,2018-10-29T15:16:36Z,2018-10-29T15:16:37Z,6,161,63,"Fixes #24
Separates the source maps to a distinct cache file and deals with them independently.
This appears to be functionality complete, but wanted to get an initial review before I write all the tests for it.",3,2
1108,2018-10-27T09:33:28Z,,2018-10-29T01:46:51Z,2,18,0,"Related to #363 (but not a direct solution)
This PR sets up .git/hooks/pre-commit from //tools/setup.py and it runs //tools/format.py at git commit and adds back the change to the staging of commit. With this change, committed files should be always formatted and it prevents unformatted codes to appear in future pull requests.",4,7
1111,2018-10-28T00:34:11Z,2018-10-28T18:18:54Z,2018-10-28T18:18:54Z,5,13,2,"E.g. deno http://deno.land/thumb.ts does not work after MIME type enforcement PR, as it is served with MIME type application/x-typescript.",4,0
1114,2018-10-28T23:59:59Z,2018-10-30T20:19:14Z,2018-10-30T20:19:14Z,1,0,2,"The way the library is built now, it bundles the external types of text-encoding in the runtime library, which means it is no longer needed to be inlined into the bundle.",2,2
1115,2018-10-29T09:43:55Z,,2018-10-29T15:11:19Z,2,4,3,Corrected license file according to correct format,6,2
1116,2018-10-29T18:20:46Z,2018-11-03T15:46:49Z,2018-11-03T15:46:49Z,1,10,0,"To document it better I added another example which shows how easy it is to use a online resource directly in deno. If it is not required please tell where should it be added otherwise.
This closes issue #1105.",2,0
1119,2018-10-30T10:10:41Z,2018-10-30T19:58:56Z,2018-10-30T19:58:56Z,9,167,0,"Ref #1117
Todo:

 return sensible text representation of Resource
 tests",2,4
1121,2018-10-30T18:12:14Z,2018-11-04T23:36:46Z,2018-11-04T23:36:47Z,5,418,0,"Do not confuse this with Node's Buffer. This is a direct port of Go's
bytes.ByteBuffer - it allows buffering of Reader objects.",5,7
1122,2018-10-30T19:12:32Z,2018-10-31T00:42:21Z,2018-10-31T00:42:21Z,4,33,21,,2,0
1124,2018-10-31T00:07:30Z,,2018-11-13T16:46:30Z,2,2,6,,3,1
1125,2018-10-31T00:31:37Z,,2018-10-31T07:15:50Z,8,87,9,,2,6
1127,2018-10-31T06:05:25Z,2018-10-31T07:32:42Z,2018-10-31T07:32:42Z,8,20,17,"Use msg_generated.rs as mod instead of crate.
This overlaps in functionality provided by #1125...",2,0
1128,2018-10-31T07:56:43Z,2018-10-31T18:11:11Z,2018-10-31T18:11:11Z,10,83,20,"usage
DENO_BUILD_PATH=`pwd`/out/debug cargo check",2,2
1129,2018-10-31T09:44:31Z,2018-10-31T14:30:53Z,2018-10-31T14:30:53Z,1,1,5,,3,1
1130,2018-10-31T09:45:01Z,2018-10-31T14:29:14Z,2018-10-31T14:29:14Z,3,40,0,@ry it implements functionality you asked for. I agree with @kitsonk we should name it toAsyncIterator. Let me know if you want any changes.,2,0
1132,2018-10-31T10:16:25Z,2018-10-31T14:27:40Z,2018-10-31T14:27:40Z,1,3,0,,3,0
1134,2018-10-31T18:44:59Z,2018-11-01T13:37:12Z,2018-11-01T13:37:12Z,8,95,38,,2,3
1138,2018-11-01T19:08:53Z,,2018-11-14T23:37:58Z,13,3235,14,"WIP!
Code is not complete(not even compiling) right now but awaiting confirmation that progress is being made in the right direction.
To close issue #1133.",5,5
1141,2018-11-02T00:37:55Z,2018-11-02T02:33:19Z,2018-11-02T02:33:19Z,1,8,8,"This PR fixes the performance regression introduced in #1065
It appears that trying to ""trick"" the compiler by swapping compiler options caused TypeScript to do a whole load of reallocation of internals, etc.  Just ignoring the ""invalid"" error appears to be a better scenario.
My local benchmarks:



Benchmark
0fbee30 (Before #1065)
6345b60 (Current Master)
eb7104d (This PR)




Cold 002
1.337s
1.895s
1.320s


Cold 003
1.396s
2.089s
1.427s",2,0
1142,2018-11-02T03:57:40Z,2018-11-04T19:52:32Z,2018-11-04T19:52:32Z,34,188,65,"This PR improves the flexibility of the integration tests, making it easier to test various command line arguments and configurations as part of the integration test suite.  It also decouples the need to ensure the test input program and output text are no longer coupled together, can be re-used by multiple tests, and exit codes are no longer specified as part of the filename.
Tests are now specified with a .test file that is a simple configuration format where each option is specified on a single line. The key is the string to the left of the : deliminator and the value is the string to the right.
The keys currently supported are:



Key
Required
Description




args
Yes
Specifies the command line arguments for the test. This should typically be input script for the test and a --reload to help ensure Deno doesn't leverage the cache.


output
Yes
This is a text file which represents the output of the command. The string [WILDCARD] can be used in the output to specify ranges of text which any output is accepted.


exit_code
No
If not present, it is assumed the script would exit normally (0). If specified, the harness will ensure the proper code is received.



And output looks something like this:
Running: Throw non-error...
  Command: /Users/kkelly/github/deno/out/debug/deno tests/error_007_any.ts --reload
Compiling /Users/kkelly/github/deno/tests/error_007_any.ts
  ✅  PASS

Running: CheckJS type error...
  Command: /Users/kkelly/github/deno/out/debug/deno tests/error_008_checkjs.js --reload
Compiling /Users/kkelly/github/deno/tests/error_008_checkjs.js
  ✅  PASS

Running: Exit with code 42...
  Command: /Users/kkelly/github/deno/out/debug/deno tests/exit_error42.ts --reload
Compiling /Users/kkelly/github/deno/tests/exit_error42.ts
  ✅  PASS

Running: Import HTTPS module...
  Command: /Users/kkelly/github/deno/out/debug/deno tests/https_import.ts --reload
Compiling /Users/kkelly/github/deno/tests/https_import.ts
Compiling https://gist.githubusercontent.com/ry/f12b2aa3409e6b52645bc346a9e22929/raw/79318f239f51d764384a8bded8d7c6a833610dde/print_hello.ts
  ✅  PASS

Running: --types flag...
  Command: /Users/kkelly/github/deno/out/debug/deno --types
  ✅  PASS",2,1
1143,2018-11-02T14:48:17Z,2018-11-02T17:14:44Z,2018-11-02T17:14:44Z,1,1,2,,2,0
1145,2018-11-03T00:08:51Z,2018-11-03T06:59:07Z,2018-11-03T06:59:07Z,6,134,54,,2,0
1146,2018-11-03T00:10:43Z,2018-11-03T03:50:02Z,2018-11-03T03:50:02Z,12,291,271,,2,0
1147,2018-11-03T08:03:11Z,,2018-11-09T17:56:44Z,17,739,68,Fixes #726,4,6
1148,2018-11-03T19:59:52Z,2018-11-04T13:56:50Z,2018-11-04T13:56:50Z,7,102,12,"This fixes an issue with the library builder when flattening a module where if another module had imported it already and it was part of the output, it would error not being able to find the source file.  Now, it will only error if the namespace of the module being imported differs from a previous version, which is unsupported.",2,3
1149,2018-11-04T10:41:18Z,2018-11-04T14:04:25Z,2018-11-04T14:04:25Z,12,98,127,"Run with:
$ DENO_BUILD_PATH=`pwd`/out/debug cargo clippy
There's still one remaining suppressed (due to rust-lang/rust-clippy#1684)
https://github.com/rust-lang-nursery/rust-clippy",2,0
1151,2018-11-04T20:19:13Z,,2018-12-11T13:19:00Z,4,12,1,Finishes #1150,2,1
1153,2018-11-05T00:22:42Z,2018-11-08T18:38:21Z,2018-11-08T18:38:21Z,9,20,20,,2,3
1154,2018-11-05T03:13:39Z,,2018-11-06T14:39:03Z,110,117,115,"Now that the .ts and .out are fully decoupled in integration tests, it is now possible to move the files about so that the root of /tests/ is a lot ""cleaner"" and easier to deal with, so I have split the .out files to /tests/outputs/ and the actual test programs to /tests/fixtures/.",3,2
1155,2018-11-05T05:14:08Z,2018-11-05T15:17:48Z,2018-11-05T15:17:48Z,2,19,0,"In taking a look at the --types output, I discovered an error that was present in the runtime Deno types declaration.  It occurred when we flattened the global namespace into the global scope, instead of a ""module"".  This mean we no longer imported the @types/text-encoding.  When the emitted library was checked for errors, the TypeScript compiler still resolved the @types/text-encoding, which doesn't know to do at runtime.  Because of the way we are emitting our code, TypeScript swallows any errors with the default runtime declaration and simply treat anything it can't resolve as any.
So this fix a) appends the @types/text-encoding types to the default library, so it can actually stand alone and b) change the library builder so that if there is a future regression, it would actually fail to build the library.",2,0
1156,2018-11-05T14:37:07Z,2018-11-16T04:07:41Z,2018-11-16T04:07:41Z,14,629,17,,5,9
1157,2018-11-05T21:33:54Z,2018-11-05T22:51:31Z,2018-11-05T22:51:31Z,2,3,3,"Performance and stability improvements on all platforms.
Add repl (#998)
Add deno.Buffer (#1121)
Support cargo check (#1128)
Upgrade Rust crates and Flatbuffers. (#1145, #1127)
Add helper to turn deno.Reader into async iterator (#1130)
Add ability to load JSON as modules (#1065)
Add deno.resources() (#1119)
Add application/x-typescript mime type support (#1111)",2,1
1162,2018-11-06T03:16:36Z,2018-11-06T14:43:03Z,2018-11-06T14:43:04Z,11,86,90,,2,0
1163,2018-11-06T04:15:25Z,2018-11-06T14:37:17Z,2018-11-06T14:37:17Z,4,97,97,"A few minor improvements to preparing stack traces within Deno.
Mainly adds directly an API to the compiler which could be used in the future to provide privileged side generated content for resolving source maps to utilise in preparing the stack traces.",2,0
1164,2018-11-06T06:42:57Z,2018-11-06T14:25:40Z,2018-11-06T14:25:40Z,2,12,17,"It was doing two independent things:

print help and exit
set log level

It's clearer to do those explicitly in main.rs",2,0
1165,2018-11-06T07:17:27Z,2018-11-06T19:19:17Z,2018-11-06T19:19:17Z,2,63,18,"This works, but I had to comment out the setTimeout test, maybe due to #1161.
Note: It's not interactive over multiple lines (only the last line is editable).",3,4
1166,2018-11-07T02:56:00Z,2018-11-07T04:16:52Z,2018-11-07T04:16:52Z,1,4,4,"This avoids the problem that when one of the caches is restored and the
other isn't, Rust doesn't get reinstalled, but it also isn't usable,
crashing the CI.",2,0
1167,2018-11-07T15:11:08Z,2018-11-08T18:38:55Z,2018-11-08T18:38:55Z,1,17,1,"""http_test.ts"" was being marked as a remote module specifier.",3,0
1169,2018-11-07T16:36:52Z,,2019-01-09T22:45:35Z,2,127,1,"Ref #1158
This is initial pass at implementing TypeScript support in REPL. It's quite complex task and we're aiming for MVP with this PR.
There are a few PR that might need to land before this one including:
#1136 #1165
cc: @kitsonk @hayd @ry",4,9
1171,2018-11-08T06:21:43Z,2018-11-09T15:22:06Z,2018-11-09T15:22:06Z,4,12,23,"Because many Reader/Writer implementations (e.g. bufio) assume their able to use subarray() with byte indexes and often ask for byte values, it makes sense to simply restrict all implementations to Uint8Array.",3,0
1172,2018-11-08T14:49:33Z,2018-11-08T17:19:38Z,2018-11-08T17:19:38Z,1,8,6,,3,1
1175,2018-11-08T23:43:49Z,2018-11-09T16:39:50Z,2018-11-09T16:39:50Z,12,112,37,"Fixes #1173
It also cleans up a few things related to the globals.ts and provides more comments to help guide additions to the file.",3,1
1176,2018-11-09T02:39:14Z,2018-11-09T16:36:32Z,2018-11-09T16:36:32Z,3,12,7,I noticed some items were appearing in the lib.deno_runtime.d.ts that we didn't expect or in ways we didn't want.  This PR cleans those up.,2,0
1177,2018-11-09T04:24:53Z,2018-11-12T16:47:37Z,2018-11-12T16:47:37Z,2,2,2,"This updates to the latest patch release of TypeScript which fixes several defects, none known to effect Deno, but still good to have less potential userland defects.",2,2
1178,2018-11-10T09:00:18Z,,2018-12-05T06:55:52Z,17,293,221,"This PR will eventually move the handling of JavaScript errors, and remapping of the stack traces from JavaScript to Rust.
Currently it is the first stage, where Rust will log out a string from libdeno of the error from the V8 isolate.
Currently the output looks like this:
$ ./target/debug/deno tests/error_001.ts
ERROR RS - Error: bad
/Users/kkelly/github/deno/tests/error_001.ts (foo) 2:11
/Users/kkelly/github/deno/tests/error_001.ts (bar) 5:5
/Users/kkelly/github/deno/tests/error_001.ts () 7:1
gen/bundle/main.js (_gatherDependencies) 133110:16
gen/bundle/main.js (run) 133297:20
gen/bundle/main.js (denoMain) 133569:20
deno_main.js () 1:1",4,2
1180,2018-11-12T03:05:24Z,,2019-01-09T22:46:05Z,3,3,2,"The modules tslint-config-prettier will ensure the tslint will ignore anything that Prettier will handle, thereby removing the need to disable tslint just because of Prettier formatting.
This requires an updated to third_party.",4,3
1182,2018-11-12T16:45:02Z,2018-11-13T01:17:30Z,2018-11-13T01:17:30Z,4,17,49,,2,0
1184,2018-11-12T20:07:16Z,2018-12-01T00:34:12Z,2018-12-01T00:34:12Z,1,20,10,"Currently gn builds into ""target/debug""
however cargo tells gn to build into
""target/debug/build/deno-26d2b5325de0f0cf/out""
This patch changes it so that they both build into ""target/debug"".",2,3
1186,2018-11-13T14:31:06Z,,2018-11-13T16:38:27Z,1,0,47,Removed repeated tests.,2,0
1188,2018-11-14T08:05:37Z,2018-11-15T01:36:35Z,2018-11-15T01:36:35Z,9,266,85,"Adds a general HttpHeader flatbuffer message for serializing requests
and responses.
Fixes #1133",4,1
1191,2018-11-14T23:10:54Z,2018-11-15T01:34:29Z,2018-11-15T01:34:30Z,6,58,2,"typedoc is very bad - but it's better than nothing.
Website is at http://deno.land/",3,2
1192,2018-11-15T02:06:31Z,2018-11-16T05:23:20Z,2018-11-16T05:23:20Z,1,0,23,It was orphaned in 92e4047.,2,0
1193,2018-11-15T02:54:46Z,2018-11-16T00:25:55Z,2018-11-16T00:25:55Z,2,27,8,This is meant to aid #1190,2,0
1196,2018-11-15T07:34:29Z,2018-11-16T00:06:04Z,2018-11-16T00:06:04Z,2,196,52,,2,0
1197,2018-11-15T10:44:21Z,2018-11-16T00:05:14Z,2018-11-16T00:05:14Z,2,34,8,Fixes #929,7,10
1199,2018-11-15T15:45:52Z,,2018-11-15T18:45:52Z,3,11,2,This PR tries to fix #1198.,3,1
1200,2018-11-15T18:45:34Z,2018-11-16T03:44:44Z,2018-11-16T03:44:45Z,1,90,47,"Based on @ry's patch: https://gist.github.com/ry/158e4d3ca54a57f4926bd0a39fd5a844
Fixes #1198
This is a bit of brute force approach because we're parsing arguments one-by-one using getopts.parse and storing unrecognized arguments to be later passed to deno.args. Any ideas how to that do better are welcome.
There is still work to do, because at the moment V8 swallows arguments passed after --.",3,7
1201,2018-11-16T01:04:43Z,2018-11-16T03:20:36Z,2018-11-16T03:20:36Z,1,21,21,,2,0
1203,2018-11-16T04:22:17Z,2018-11-16T05:23:51Z,2018-11-16T05:23:51Z,2,2,2,"Changes since v0.1.12:

First pass at running subprocesses (#1156)
Improve flag parsing (#1200)
Improve fetch() (#1194 #1188 #1102)
Support shebang (#1197)

https://github.com/denoland/deno/milestone/2?closed=1",2,0
1204,2018-11-16T10:07:19Z,2018-11-20T16:46:57Z,2018-11-20T16:46:57Z,14,525,540,"Refs #1190
This PR provides the first step in moving TypeScript to a seperate isolate.  It breaks apart the logic of the existing compiler into the Compiler and the Runner, where the Runner actually evals the modules in the runtime environment, and requests the modules from the Compiler.  In the future, the Runner will simply need two ops from Rust (requesting a file name for a module relative to another path or module and requesting the output code for a module).  This will make it possible to remove the TypeScript compiler from the runtime isolate and move it into its own.",3,2
1207,2018-11-16T23:51:29Z,2018-11-17T01:02:32Z,2018-11-17T01:02:32Z,2,4,4,cc @kt3k,2,0
1214,2018-11-23T17:33:09Z,2018-11-23T19:26:37Z,2018-11-23T19:26:38Z,5,80,21,"Reverting because this is causing Appveyor to be red. However
I hope we can reintroduce include_bytes! soon in a way that
works on windows. Fixes #1208.
This reverts commits 96c3641
and 92e4047.",2,1
1216,2018-11-25T13:43:25Z,,2018-12-23T15:08:33Z,6,110,73,"I've port it to deno. Should I also update tools/test.py to execute this script?
Also there is a little difference that I can't not redirect sub process stderr to stdout with current run api.
Resolved #1213",4,4
1217,2018-11-25T19:07:19Z,2018-11-27T23:47:32Z,2018-11-27T23:47:32Z,13,146,12,"This retains our ability to build from scratch but will allow us to speed up CI / simplify dev built setups. This is work towards  #1209

 mac
 linux
 windows",3,1
1218,2018-11-25T22:04:51Z,2018-11-30T01:46:11Z,2018-11-30T01:46:11Z,5,109,116,"Just for better namespacing.
Fixes #1244",2,0
1224,2018-11-26T20:29:27Z,2018-11-26T21:58:43Z,2018-11-26T21:58:43Z,1,2,2,"Just fixing a couple minor typos

formates -> formats
configuation -> configuration",3,1
1233,2018-11-28T09:12:39Z,2018-11-28T23:25:32Z,2018-11-28T23:25:32Z,3,26,10,"Closes #1161 .

Unblocks event loop by making REPL async
Fix op_repl_readline always blocking problem that breaks setTimeout fire
Add setTimeout test

/cc @hayd @cedric05
Also, though not fixed in this PR, there is one more issue I found that might need to be address later:

  
    
      deno/src/resources.rs
    
    
        Lines 335 to 345
      in
      89096c9
    
  
  
    

        
          
           pub fn readline(rid: ResourceId, prompt: &str) -> DenoResult<String> { 
        

        
          
             let mut table = RESOURCE_TABLE.lock().unwrap(); 
        

        
          
             let maybe_repr = table.get_mut(&rid); 
        

        
          
             match maybe_repr { 
        

        
          
               Some(Repr::Repl(ref mut r)) => { 
        

        
          
                 let line = r.readline(&prompt)?; 
        

        
          
                 Ok(line) 
        

        
          
               } 
        

        
          
               _ => Err(bad_resource()), 
        

        
          
             } 
        

        
          
           } 
        
    
  


Since let line = r.readline(&prompt)?;  is blocking, this might cause RESOURCE_TABLE.lock() not released in REPL and blocks other resources reads and writes",3,1
1234,2018-11-28T14:20:37Z,2018-11-30T17:58:32Z,2018-11-30T17:58:32Z,3,21,3,"As in #1216, I create the readAll in js/io.ts and add a simple test.",2,2
1235,2018-11-28T14:25:11Z,2018-11-30T18:44:06Z,2018-11-30T18:44:06Z,2,30,2,"Depend on #1234
Related #1216",4,2
1237,2018-11-29T00:16:35Z,2018-11-29T19:53:18Z,2018-11-29T19:53:18Z,1,52,51,"Alphabetization is a little bit churny, but there was an existing test called test_settimeout vs the new one test_set_timeout from #1233. If they collided only the last defined would have run.
The main change is to allow a sleep kwarg to input (see test_set_timeout_interlaced).
cc @kevinkassimo",3,6
1238,2018-11-29T03:51:14Z,2018-11-30T03:03:01Z,2018-11-30T03:03:01Z,7,151,148,"Hi Deno team,
Thank you for creating such an amazing project. It's my pleasure to participate in.
This PR is basically trying to remove Mutexes from IsolateState.


Use AtomicBool in DenoPermissions, so we don't have to use Mutex around DenoPermissions.


Use AtomicUsize in Metrics, so we don't have to use Mutex around Metrics.
Please note that AtomicU64 type is still unstable, I guess AtomicUsize is suitable for this situation.


Move mpsc::Sender<(i32, Buf)> outside of IsolateState.

In general, we always clone a new Sender and move it to new thread.  Mutex<Sender<_>> is unidiomatic in Rust.
And also, I don't feel the Option is useful here.



Refine the construction of Isolate and IsolateState instances.
The command line arguments actually only useful to IsolateState. It makes no sense to accept them in Isolate::new function. The new process is that: a) create a IsolateState from command line options  b) create a Isolate from IsolateState.


Hopefully this change can make Deno slightly faster, but I don't have concrete profile numbers.
And another question, I can't build debug version on my machine, only release build succeeded.
So ./tools/test.py command fails to run on my machine. I'm using Win10's Linux subsystem.",3,2
1240,2018-11-29T11:24:09Z,2018-11-30T03:01:02Z,2018-11-30T03:01:02Z,1,72,12,"This addresses 1st part of problem for #1239 (the location header in the sample given was /dyo@0.0.2?module, not a full path)

Handle Location header that contains relative URI

Refs:
https://tools.ietf.org/html/rfc7231#page-68
https://tools.ietf.org/html/rfc3986#section-4.2
https://tools.ietf.org/html/rfc3986#section-3.3",2,0
1247,2018-11-30T02:53:47Z,2018-11-30T07:12:39Z,2018-11-30T07:12:39Z,11,9,551,See https://github.com/denoland/chromium_build/commits/deno,2,1
1248,2018-11-30T03:40:01Z,2018-11-30T07:37:29Z,2018-11-30T07:37:29Z,4,9,5,"Fixes #1242
Because of the new ability of .bind to check assignability, the advanced typing we had for the callbacks for the timers no longer passes the strict checking.  Looking at both @types/node and lib.dom.d.ts, they use an any[] for the callback arguments, so that is best for us to do that here.",2,0
1249,2018-11-30T05:44:57Z,2018-11-30T07:25:59Z,2018-11-30T07:25:59Z,4,17,4,The windows debug build was broken due to libc link errors.,2,1
1251,2018-11-30T08:28:05Z,2018-11-30T19:33:47Z,2018-11-30T19:33:47Z,18,93,53,Fixes #1221,3,0
1252,2018-11-30T14:41:38Z,2018-11-30T17:23:05Z,2018-11-30T17:23:05Z,1,3,3,cc @hayd @kevinkassimo,2,0
1253,2018-11-30T20:35:45Z,2018-11-30T23:07:14Z,2018-11-30T23:07:14Z,5,81,48,,2,0
1255,2018-11-30T23:04:53Z,2018-12-01T06:37:27Z,2018-12-01T06:37:27Z,2,3,0,fixes #611,2,1
1258,2018-12-01T01:09:59Z,2018-12-01T06:36:49Z,2018-12-01T06:36:49Z,1,2,2,Since we now use TypeScript 3.2.1,2,1
1260,2018-12-01T06:35:08Z,2018-12-03T21:44:22Z,2018-12-03T21:44:22Z,6,40,113,,3,0
1261,2018-12-01T13:28:53Z,,2018-12-16T14:45:12Z,8,378,5,"Ref #1222
ATM I am getting this error during build:
Undefined symbols for architecture x86_64:
  ""v8::Shell::WorkerTerminate(v8::FunctionCallbackInfo<v8::Value> const&)"", referenced from:
      deno::CreateGlobalTemplate(v8::Isolate*) in libdeno.a(binding.o)
  ""v8::Shell::WorkerGetMessage(v8::FunctionCallbackInfo<v8::Value> const&)"", referenced from:
      deno::CreateGlobalTemplate(v8::Isolate*) in libdeno.a(binding.o)
  ""v8::Shell::WorkerPostMessage(v8::FunctionCallbackInfo<v8::Value> const&)"", referenced from:
      deno::CreateGlobalTemplate(v8::Isolate*) in libdeno.a(binding.o)
  ""v8::Shell::WorkerNew(v8::FunctionCallbackInfo<v8::Value> const&)"", referenced from:
      deno::CreateGlobalTemplate(v8::Isolate*) in libdeno.a(binding.o)",4,12
1265,2018-12-03T01:48:46Z,2018-12-04T03:07:35Z,2018-12-04T03:07:35Z,2,15,18,"Fix #1263
It is hard to achieve zero-copy when passing message between Rust and C, because we can't assume they use the same allocator. There is only one case that zero-copy is easy:
1. Create buffer in Rust
2. Call function in C
    1. Pass borrowed pointer to C
    2. C only need to use this buffer in a limited time span
3.  The buffer is destroyed in Rust

I think deno is not as simple as this. Zero-copy will cost significant API complexity.",2,0
1267,2018-12-03T04:26:04Z,2018-12-13T21:16:59Z,2018-12-13T21:16:59Z,6,57,5,Read the version from Cargo.toml using an env!() macro,4,12
1269,2018-12-03T18:31:21Z,2018-12-03T23:31:08Z,2018-12-03T23:31:08Z,7,49,13,"Fixes leaks in libdeno and adds minimal LSAN build to travis. There's a long road ahead towards getting an LSAN clean build.
Fixes #1264",2,0
1275,2018-12-04T01:02:37Z,2018-12-04T03:34:03Z,2018-12-04T03:34:03Z,2,13,9,,3,0
1276,2018-12-04T11:02:56Z,2018-12-04T21:21:03Z,2018-12-04T21:21:03Z,4,119,98,"The main purpose of this PR is to remove the 'static lifetime bound in
type OpCreator =
  fn(state: &Arc<IsolateState>, base: &msg::Base, data: &'static mut [u8])
    -> Box<Op>;
The reason is simple: it is plain wrong, the data is actually not 'static. It is created when the message is sent from C side, and will be recycled when the message is responded. It violates the definition of 'static lifetime.
If someone save this pointer somewhere else, and reuse it later again, uninitialized memory could be accessed. This kind of memory unsafety does not happen yet because the logic is carefully organized in this project. Lifetime constraints are maintained by code convention. It could be more robust if we can express this constraint by Rust's type system.
Basic idea: tie buffer's lifetime to an object's lifetime, a.k.a, RAII. The type deno_buf is pretty suitable for this job.",4,5
1277,2018-12-04T21:19:38Z,2018-12-04T23:06:21Z,2018-12-04T23:06:21Z,8,140,129,In preparation for adding other features to libdeno.,2,0
1278,2018-12-04T21:41:42Z,2018-12-05T01:22:53Z,2018-12-05T01:22:53Z,2,2,2,,2,0
1279,2018-12-05T04:54:07Z,2018-12-05T08:14:54Z,2018-12-05T08:14:54Z,5,118,86,"This is a bunch of cleanups on rust code.
Please note the change on Isolate::from_void_ptr.

It is renamed to from_raw_ptr, to keep consistency with std libs.
It is changed to unsafe function, because itself can't guarantee the input raw pointer is valid or not. This guarantee should be provided by the caller.
Its return type is changed to &Isolate, because &mut Isolate type requires that no other aliases co-exist in this period of time, this does not seem true. So I changed most of the methods to accept shared reference &Isolate. It is easier to reason about the correctness of unsafe blocks. As long as these shared references are in the same thread, these unsafe codes are probably correct.

Others are tiny improvements.",2,2
1280,2018-12-05T06:55:31Z,2018-12-07T04:05:37Z,2018-12-07T04:05:37Z,30,857,810,"This is in collaboration with @kitsonk ( originally #1178 )
This patch reduces binary size on OSX by 27mb
~/src/deno> ls -lh target/release/deno
-rwxr-xr-x  1 rld  staff    40M Dec  5 14:19 target/release/deno
~/src/deno> ls -lh `which deno`
-rwxr--r--  1 rld  staff    67M Nov 30 20:11 /Users/rld/.deno/bin/deno

It speeds up warm startup by 2.5x
> hyperfine --ignore-failure --warmup 3 ""target/release/deno tests/002_hello.ts""  ""deno tests/002_hello.ts""
Benchmark #1: target/release/deno tests/002_hello.ts

  Time (mean ± σ):      69.7 ms ±   2.1 ms    [User: 44.4 ms, System: 22.4 ms]

  Range (min … max):    66.3 ms …  78.0 ms

Benchmark #2: deno tests/002_hello.ts

  Time (mean ± σ):     174.9 ms ±  15.3 ms    [User: 121.8 ms, System: 48.9 ms]

  Range (min … max):   156.5 ms … 217.0 ms

Summary

  'target/release/deno tests/002_hello.ts' ran
    2.51x faster than 'deno tests/002_hello.ts'

Speeds up cold startup by 1.27x
> hyperfine --ignore-failure --warmup 3 ""target/release/deno tests/002_hello.ts --recompile ""  ""deno tests/002_hello.ts --recompile""
Benchmark #1: target/release/deno tests/002_hello.ts --recompile

  Time (mean ± σ):     472.8 ms ±   9.4 ms    [User: 766.3 ms, System: 42.6 ms]

  Range (min … max):   463.0 ms … 495.5 ms

Benchmark #2: deno tests/002_hello.ts --recompile

  Time (mean ± σ):     601.8 ms ±   8.5 ms    [User: 980.7 ms, System: 74.0 ms]

  Range (min … max):   594.0 ms … 623.9 ms

Summary

  'target/release/deno tests/002_hello.ts --recompile ' ran
    1.27x faster than 'deno tests/002_hello.ts --recompile'

And speeds up exception handling by 1.8x
> hyperfine --ignore-failure --warmup 3 ""target/release/deno tests/error_001.ts""  ""deno tests/error_001.ts""
Benchmark #1: target/release/deno tests/error_001.ts

  Time (mean ± σ):     106.0 ms ±   1.5 ms    [User: 74.1 ms, System: 28.2 ms]

  Range (min … max):   102.7 ms … 109.1 ms

  Warning: Ignoring non-zero exit code.

Benchmark #2: deno tests/error_001.ts

  Time (mean ± σ):     199.4 ms ±   2.3 ms    [User: 140.0 ms, System: 52.7 ms]

  Range (min … max):   196.5 ms … 203.8 ms

  Warning: Ignoring non-zero exit code.

Summary

  'target/release/deno tests/error_001.ts' ran
    1.88x faster than 'deno tests/error_001.ts'",4,2
1281,2018-12-05T10:07:10Z,2018-12-06T18:01:16Z,2018-12-06T18:01:16Z,9,366,42,"Fixes #1210
This PR removes the npm package text-encoding and integrates a TypeScript authored version of TextEncoder/TextDecoder that only supports UTF8 encoding.",2,2
1282,2018-12-05T21:09:16Z,2018-12-12T17:05:59Z,2018-12-12T17:05:59Z,4,151,6,"Trying to implement simple logger in deno I found that creating a file is still impossible.
I saw work done in #908, but I turns out we can simply use tokio::fs::OpenOptions to configure what mode we want to open file in.
This is very rough minimal implementation that still needs a lot of work.
TODO:

 settle on OpenModes and implement as enum in files.ts
 factor out setup code of tokio::fs::OpenOptions in ops.ts
 tests",3,9
1283,2018-12-06T02:43:56Z,,2018-12-08T20:20:46Z,1,13,8,"Remove the UserDataScope type.
As discussed in #1279, @ry suggested to remove this workaround. The type UserDataScope was introduced to prevent memory corruption. We'd better solve the root cause of the corruption.
The solution is that we make sure everything is cleaned up in DenoIsolate's destructor.
I didn't remove the user_data parameter from deno_execute and deno_respond, because I think that is a good thing.",3,9
1287,2018-12-06T07:08:17Z,,2018-12-07T01:30:15Z,4,84,85,"According to https://rust-lang-nursery.github.io/api-guidelines/naming.html, types should be named as UpperCamelCase in Rust. Most of the code is compliant with the standard, except 3 of them.",2,3
1289,2018-12-06T21:49:06Z,2018-12-07T21:36:17Z,2018-12-07T21:36:17Z,4,30,3,"Benchmark for HTTP server from https://github.com/denoland/net
Results from my machine:
$ ./tools/http_benchmark.py target/debug/deno ./target/debug/hyper_hello
http_benchmark testing DENO.
Listening on 127.0.0.1:4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.28ms  288.76us  10.82ms   93.95%
    Req/Sec     3.93k   390.48     4.37k    76.00%
  78223 requests in 10.00s, 3.80MB read
Requests/sec:   7822.43
Transfer/sec:    389.59KB

http_benchmark testing DENO using net/http.
Compiling /Users/biwanczuk/dev/deno/tests/xhttp_bench.ts
Downloading https://deno.land/x/net/http_status
Downloading https://deno.land/x/net/util
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     2.20ms  446.88us  17.78ms   94.81%
    Req/Sec     2.29k   160.77     2.39k    92.57%
  45952 requests in 10.10s, 2.19MB read
Requests/sec:   4549.43
Transfer/sec:    222.14KB

http_benchmark testing NODE.
port 4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   353.27us  281.79us  14.09ms   97.62%
    Req/Sec    14.55k     1.78k   17.08k    77.72%
  292399 requests in 10.10s, 31.23MB read
Requests/sec:  28949.17
Transfer/sec:      3.09MB

http_benchmark testing node_tcp.js
port 4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   156.49us   74.79us   3.37ms   85.96%
    Req/Sec    31.94k     3.12k   37.15k    76.24%
  642134 requests in 10.10s, 31.23MB read
Requests/sec:  63581.47
Transfer/sec:      3.09MB

http_benchmark testing RUST hyper.
Listening on http://127.0.0.1:4544
third_party/wrk/mac/wrk -d 10s http://127.0.0.1:4544/
Running 10s test @ http://127.0.0.1:4544/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   347.32us  302.80us   9.27ms   92.58%
    Req/Sec    15.22k   709.28    16.42k    86.14%
  305713 requests in 10.10s, 25.66MB read
Requests/sec:  30269.37
Transfer/sec:      2.54MB",4,10
1291,2018-12-07T04:42:37Z,2018-12-07T18:39:11Z,2018-12-07T18:39:11Z,1,56,2,"This unblocks #1289 .
See #1289 (comment)
Tested locally, benchmark is working with this fix in place.",3,3
1292,2018-12-07T12:04:24Z,,2018-12-09T08:10:36Z,3,26,2,"I've modified error type in js/buffer.ts to DenoError  from Error, so added enum type to msg.fbs.",4,3
1293,2018-12-07T21:37:24Z,2018-12-07T22:44:50Z,2018-12-07T22:44:50Z,2,2,2,"Don't crash when .mime file not exist in cache (#1291)
Process source maps in Rust instead of JS (#1280)
Use alternate TextEncoder/TextDecoder implementation (#1281)
Upgrade flatbuffers to 80d148
Fix memory leaks (#1265, #1275)",2,0
1296,2018-12-08T20:03:16Z,2018-12-19T17:51:32Z,2018-12-19T17:51:32Z,8,90,66,"Windows works more or less.
Linux is stuck on libc++.
Haven't done any testing on mac yet.",2,2
1297,2018-12-08T21:56:50Z,2018-12-09T02:34:54Z,2018-12-09T02:34:54Z,1,59,4,Some discoveries myself when trying to profile and debug deno. I believe it might also be useful for others,2,0
1298,2018-12-09T08:12:01Z,2018-12-09T20:38:31Z,2018-12-09T20:38:31Z,3,26,2,"I've modified error type in js/buffer.ts to DenoError from Error, so added enum type to msg.fbs.
Test

 ./tools/test.py
 ./tools/test.py
 ./tools/format.py",2,0
1299,2018-12-10T03:16:50Z,2018-12-10T17:01:03Z,2018-12-10T17:01:03Z,2,223,34,"Noticed that we haven't yet support types such as Map when I was doing some debugging (which is annoying...).
This PR adds formatting support to the following types:

Set/Map
WeakSet/WeakMap (WeakMap { [items unknown] }, similar behavior to Node)
Wrapper objects (Number/Boolean/String)
Date
RegExp
TypedArray (Uint8Array etc.)

Changed:

DEFAULT_MAX_DEPTH for nested object printing is increased to 4 (2 is too restrictive)
[object] => [Object] for deeply nested objects (as seen in Node)
[object] => [Set]/[Map] etc. for deeply nested Set/Map (as seen in Node)",3,2
1302,2018-12-10T14:24:46Z,,2019-01-09T22:48:16Z,1,9,2,This PR  apply set_permissions after creating temp dir.,2,1
1303,2018-12-10T17:53:51Z,2018-12-10T22:50:42Z,2018-12-10T22:50:42Z,23,37,36,Fixes #964,3,1
1305,2018-12-11T01:06:35Z,2018-12-11T13:36:34Z,2018-12-11T13:36:34Z,3,58,35,Resolve a TODO item in source code.,2,0
1307,2018-12-11T08:41:54Z,2018-12-12T09:43:43Z,2018-12-12T09:43:43Z,7,92,85,"Fix #1113
cc @kitsonk",3,0
1309,2018-12-11T16:35:10Z,2018-12-11T20:06:57Z,2018-12-11T20:06:57Z,4,594,610,cc @kitsonk,3,2
1310,2018-12-11T17:17:45Z,2018-12-11T20:22:55Z,2018-12-11T20:22:55Z,1,0,8,"This was introduced because Tokio would swallow panics. This is still
the case, but this panic handler causes more problems than it solves.
It requires people to know how to use debuggers to inspect stacktraces.
TODO:

Fix Tokio to not swallow errors.
Be very careful in the intrim that we do not introduce broken tests
due to this unfortunate ""feature"" of tokio.


Fixes #1075",2,4
1313,2018-12-11T18:09:53Z,2018-12-11T20:06:23Z,2018-12-11T20:06:23Z,4,3,16,,2,0
1314,2018-12-11T19:04:34Z,2018-12-11T20:07:56Z,2018-12-11T20:07:56Z,5,12,8,,2,0
1318,2018-12-11T21:37:41Z,2018-12-13T21:25:43Z,2018-12-13T21:25:43Z,8,85,80,,3,0
1321,2018-12-12T02:03:23Z,2018-12-13T21:26:47Z,2018-12-13T21:26:47Z,1,6,0,,2,1
1322,2018-12-12T02:59:14Z,2018-12-12T07:34:13Z,2018-12-12T07:34:13Z,1,170,69,"Closes #1202
This PR simplifies get_source_code logic and perform auto suffix appending attempts when searching local cache.
fetch_remote_source become only fetching remote sources
fetch_local_source is added for local/cached sources
Before:
# with NO cache
$ deno --allow-net https://deno.land/x/net/file_server.ts
Downloading https://deno.land/x/net/file_server.ts
Compiling https://deno.land/x/net/file_server.ts
Downloading https://deno.land/x/net/http
Downloading https://deno.land/x/net/http.ts
Downloading https://deno.land/x/net/bufio.ts
Downloading https://deno.land/x/net/textproto.ts
Downloading https://deno.land/x/net/http_status
Downloading https://deno.land/x/net/http_status.ts
Downloading https://deno.land/x/net/util
Downloading https://deno.land/x/net/util.ts
Compiling https://deno.land/x/net/http.ts
# ...
HTTP server listening on http://0.0.0.0:4500/

# with cached
$ deno --allow-net https://deno.land/x/net/file_server.ts
Downloading https://deno.land/x/net/http
Downloading https://deno.land/x/net/http_status
Downloading https://deno.land/x/net/util
HTTP server listening on http://0.0.0.0:4500/
After:
# with NO cache
$ deno --allow-net https://deno.land/x/net/file_server.ts
Downloading https://deno.land/x/net/file_server.ts...
Compiling https://deno.land/x/net/file_server.ts
Downloading https://deno.land/x/net/http... NOT FOUND
Downloading https://deno.land/x/net/http.ts...
Downloading https://deno.land/x/net/bufio.ts...
Downloading https://deno.land/x/net/textproto.ts...
Downloading https://deno.land/x/net/http_status... NOT FOUND
Downloading https://deno.land/x/net/http_status.ts...
Downloading https://deno.land/x/net/util... NOT FOUND
Downloading https://deno.land/x/net/util.ts...
Compiling https://deno.land/x/net/http.ts
# ...
HTTP server listening on http://0.0.0.0:4500/

# with cache
$ deno --allow-net https://deno.land/x/net/file_server.ts
HTTP server listening on http://0.0.0.0:4500/",3,0
1323,2018-12-12T04:02:38Z,2018-12-13T21:28:50Z,2018-12-13T21:28:50Z,1,24,1,,2,0
1329,2018-12-12T13:23:51Z,2018-12-12T16:44:14Z,2018-12-12T16:44:14Z,1,29,28,"I renamed follow to // TODO rename to 'script_name'.

 ./tools/test.py
 ./tools/format.py
 ./tools/lint.py",2,0
1330,2018-12-12T13:25:51Z,2018-12-12T16:44:57Z,2018-12-12T16:44:57Z,1,1,1,I changed default value Base.bool in src/msg.fbs.,2,0
1331,2018-12-12T17:03:55Z,,2019-01-04T08:10:46Z,28,1225,712,"Only accessible from Rust currently.
This is part of the effort to get native ES modules #975",3,2
1335,2018-12-13T02:12:08Z,2018-12-14T19:36:09Z,2018-12-14T19:36:09Z,2,23,6,"In the previous implementation #102, console.assert throws an error. I think console.assert should not throw an error.

Before Node.js v10.0.0, however, a falsy assertion would also cause an AssertionError to be thrown. This discrepancy was fixed with Node v10, so that console.assert() now acts the same in both Node and the browser.
https://developer.mozilla.org/en-US/docs/Web/API/console/assert


And in https://console.spec.whatwg.org/#assert, console.assert is defined as follows:

assert(condition, ...data)

If condition is true, return.
Let message be a string without any formatting specifiers indicating generically an assertion failure (such as ""Assertion failed"").
If data is empty, append message to data.
Otherwise:

Let first be data[0].
If Type(first) is not String, then prepend message to data.
Otherwise:

Let concat be the concatenation of message, U+003A (:), U+0020 SPACE, and first.
Set data[0] to concat.




Perform Logger(""assert"", data).",2,2
1336,2018-12-13T03:45:48Z,2018-12-13T21:20:38Z,2018-12-13T21:20:38Z,4,54,7,"Currently, deno.open does not do any write permission checks...
This PR adds such checks.",3,0
1337,2018-12-13T09:57:34Z,2018-12-13T20:36:16Z,2018-12-13T20:36:16Z,1,1,1,,3,1
1339,2018-12-13T20:58:07Z,,2018-12-21T17:57:31Z,9,239,1,"Was at https://github.com/denoland/registry
Aside from having it in a more central place, it opens the possibility of iterating over the distributed modules for tests (at some point)",2,1
1342,2018-12-14T00:33:47Z,2018-12-14T05:46:34Z,2018-12-14T05:46:34Z,1,1,1,,2,0
1350,2018-12-14T06:48:15Z,2018-12-14T08:29:18Z,2018-12-14T08:29:18Z,1,7,21,Avoid repetitive code.,4,0
1355,2018-12-15T16:15:34Z,2018-12-23T04:53:30Z,2018-12-23T04:53:30Z,10,44,2,"This PR fixes #948. Continued from ry@7560787.
I copied //js/testing/* to //tools/ts_builder_library/testing/* (and slightly modified them to work with node.js) because //js/testing is not isomorphic anymore (doesn't work in (ts-)node because of import ... from ""deno"" line) and use it in ts_builder_library testing.",3,9
1356,2018-12-15T17:39:42Z,,2018-12-21T03:51:38Z,14,140,139,"This removes DENO_BUILD_PATH and DENO_BUILD_MODE environmental
variables. To specify a release build:
./tools/setup.py
./tools/build.py -C target/release
./tools/test.py target/release",3,1
1358,2018-12-17T02:02:00Z,2018-12-17T16:54:34Z,2018-12-17T16:54:34Z,2,99,2,It is a part of #1351,3,0
1359,2018-12-17T08:09:32Z,2018-12-18T01:07:48Z,2018-12-18T01:07:48Z,5,397,0,"Fixes part of: #1047
This PR adds the URL global object which makes it easier to parse URL and work with their parts.  The code tries to functionally replicate the Web Standard but doesn't follow the logic of the standard (which has a lot of obtuse and obscure logic in the IDL).",4,2
1360,2018-12-17T18:15:32Z,,2019-01-22T19:44:38Z,2,45,2,It is a part of #1351.,4,3
1361,2018-12-17T21:22:03Z,2018-12-18T01:05:19Z,2018-12-18T01:05:19Z,2,3,5,"Unfortunately V8 has a debug-only assert that checks
that a SnapshotCreator actually created a snapshot:
https://github.com/denoland/deno_third_party/blob/7d8c9aa769778140e1619f545e706bf34545509e/v8/src/api.cc#L571
This was not being triggered in Linux & Mac debug builds
because we were using the prebuilt release V8 build.
It was being triggered in Windows debug build because there is
a prebuilt v8_debug.lib. However the Windows error went unnoticed.",2,1
1362,2018-12-17T21:26:18Z,2018-12-18T14:16:50Z,2018-12-18T14:16:50Z,2,5,3,"Although this results in slightly larger executable sizes, we've decided
that the improvement in build time (especially on Windows) is worth it.",2,0
1366,2018-12-18T07:51:56Z,,2019-01-09T22:50:36Z,1,173,0,"By issue #1319 , this PR is to rewrite format.py to deno.",4,3
1368,2018-12-18T08:09:28Z,2018-12-19T01:15:00Z,2018-12-19T01:15:00Z,2,57,4,"I fixed 2 functions of URL to make it more compliant with the whatwg specification.
constructor
spec:


...
If init is a sequence, then for each pair in init:

If pair does not contain exactly two items, then throw a TypeError.
Append a new name-value pair whose name is pair’s first item, and value is pair’s second item, to query’s list.


...


before:
const searchParams = new URLSearchParams([[""foo""]])
searchParams.toString() === ""foo=undefined""
after:
const searchParams = new URLSearchParams([[""foo""]])
// throw TypeError

set
spec:


If there are any name-value pairs whose name is name, in list, set the value of the first such name-value pair to value and remove the others.
Otherwise, append a new name-value pair whose name is name and value is value, to list.
...


before:
const searchParams = new URLSearchParams(""a=1&b=2&a=3"")
searchParams.set(""a"", ""false"");

// before
searchParams.toString() === ""b=2&a=false""

// after
searchParams.toString() === ""a=false&b=2""
cc @kitsonk",4,2
1369,2018-12-18T09:11:05Z,2018-12-18T20:15:10Z,2018-12-18T20:15:10Z,13,28,168,,2,0
1370,2018-12-18T20:33:59Z,2018-12-19T02:09:31Z,2018-12-19T02:09:31Z,15,1471,41,"Use prebuilt sccache in CI
This is the last step necessary so that we can set CARGO_HOME to third_party/rust_crates",2,0
1374,2018-12-19T03:11:14Z,2018-12-19T04:38:17Z,2018-12-19T04:38:17Z,3,12,0,,2,0
1376,2018-12-19T09:37:32Z,,2018-12-20T19:58:15Z,2,74,67,,2,1
1377,2018-12-19T18:57:59Z,2018-12-20T01:51:04Z,2018-12-20T01:51:04Z,4,37,21,,2,0
1378,2018-12-20T01:16:14Z,2018-12-20T03:08:50Z,2018-12-20T03:08:50Z,3,32,1,Expose deno.inspect that converts any input into a string repr same as printed out by console.log,2,0
1380,2018-12-20T18:12:06Z,2018-12-20T20:09:45Z,2018-12-20T20:09:45Z,2,4,2,and link to deno_std,2,0
1385,2018-12-21T04:32:34Z,2018-12-21T11:03:27Z,2018-12-21T11:03:27Z,2,51,9,Fixes #1382,3,1
1390,2018-12-21T07:35:46Z,2018-12-24T04:07:58Z,2018-12-24T04:07:58Z,3,73,3,"URLSearchParams did not check the number of arguments passed, thereby causing some bugs.
When we use TypeScript, the tsc compiler will do parameter checking for us, but many times we write code in JavaScript.
let s = new URLSearchParams()
s.append()

// before
s.toString() === ""undefined=undefined""

// after fix
// TypeError: URLSearchParams.append requires at least 2 arguments, but only 0 present

In addition, the first argument should be converted to string type
let s = new URLSearchParams()

// the `String` wrapper
s.set(new String(""foo""), ""bar"")

// When calling `toString`, the keys and values are converted to strings
s.toString() === ""foo=bar""

// but...

// before
s.has('foo') === false
s.get('foo') === null

// after fix
s.has('foo') === true
s.get('foo') === ""bar""",3,3
1393,2018-12-21T08:54:42Z,2018-12-21T22:09:54Z,2018-12-21T22:09:54Z,4,191,1,"Based mostly on https://fetch.spec.whatwg.org/#body-mixin
node-fetch did not implement this. whatwg-fetch implements application/x-www-form-urlencoded but not multipart/form-data.
TODO: Debug, format code, add tests",2,3
1396,2018-12-21T21:08:51Z,2018-12-23T16:44:09Z,2018-12-23T16:44:09Z,25,196,241,"#1384
@kevinkassimo @kitsonk Please review",4,3
1400,2018-12-23T15:18:41Z,2018-12-23T17:39:40Z,2018-12-23T17:39:40Z,6,14,13,"Was: add --frozen flag, but realized we need some preliminary work",2,3
1401,2018-12-23T17:49:13Z,2018-12-23T19:43:16Z,2018-12-23T19:43:16Z,1,0,3,,2,0
1402,2018-12-23T19:01:17Z,2018-12-23T21:40:14Z,2018-12-23T21:40:14Z,2,254,90,,3,1
1403,2018-12-23T20:58:40Z,2018-12-23T22:08:09Z,2018-12-23T22:08:09Z,4,5,4,,2,0
1405,2018-12-23T22:16:02Z,2018-12-24T04:39:12Z,2018-12-24T04:39:12Z,3,20,2,"Upgrade V8 to 7.2.502.16 (#1403)
Remove support for extensionless import  (#1396)
make stdout unbuffered (#1355)
Implement Body.formData for fetch (#1393)
Improve handling of non-coercable objects in assertEqual (#1385)
Avoid fetch segfault on empty Uri (#1394)
Expose deno.inspect (#1378)
""cargo build"" support (#1369 #1296 #1377 #1379)
Add illegal header name and value guards (#1375)
Fix URLSearchParams set() and constructor() (#1368)
Remove prebuilt v8 support (#1369)
Enable jumbo build in release. (#1362)
Add URL implementation (#1359)
Add console.count and console.time (#1358)",2,0
1406,2018-12-23T22:46:47Z,2018-12-24T16:31:19Z,2018-12-24T16:31:19Z,7,22,23,"There are several problems with the build

Ran into this a few times already but just now realized what's happening: travis is ignoring non-zero error codes for format.py
clang_format got messed up on linux in the V8 upgrade. (Seems to be fixed by manually reverting)
somehow the travis cache was preventing errors from being checked WRT module resolution ... when we removed extensionless import support some problems popped up trying to reference deno_std modules. Therefore we need to upgrade deno_std. this is taking work: denoland/deno_std#42 denoland/deno_std#41",2,2
1407,2018-12-24T02:11:34Z,,2019-02-09T22:09:39Z,7,199,5,"Closes #1159
This is a simplified version of #1334 which works well
$ ./target/debug/deno
> a
ReferenceError: a is not defined
> let a = 1
undefined
> a += 1
2
> const b = 2
undefined
> b += 1
TypeError: Assignment to constant variable.
> throw new Error(""Hello"")
Error: Hello
> throw {}
Thrown: {}

(If this looks fine, would be great to be included in v0.2.4)",2,9
1411,2018-12-24T03:34:08Z,2019-01-09T20:56:43Z,2019-01-09T20:56:43Z,2,22,4,"Closes #1410
See comments on the code.",2,0
1412,2018-12-24T07:40:37Z,2018-12-24T16:18:02Z,2018-12-24T16:18:02Z,2,6,2,"in repl:
> FormData.name
FormDataBase
> new FormData
FormDataBase {}

FormData is exported with an assignment statement, it causes the wrong name in DomIterableMixin.

  
    
      deno/js/mixins/dom_iterable.ts
    
    
        Lines 68 to 72
      in
      c6e2fff
    
  
  
    

        
          
           // we want the Base class name to be the name of the class. 
        

        
          
           Object.defineProperty(DomIterable, ""name"", { 
        

        
          
             value: Base.name, 
        

        
          
             configurable: true 
        

        
          
           }); 
        
    
  



In Headers, the name is correct, it uses inheritance instead of assignment. 
  
    
      deno/js/headers.ts
    
    
        Lines 113 to 119
      in
      c6e2fff
    
  
  
    

        
          
           // @internal 
        

        
          
           // tslint:disable-next-line:variable-name 
        

        
          
           export class Headers extends DomIterableMixin< 
        

        
          
             string, 
        

        
          
             string, 
        

        
          
             typeof HeadersBase 
        

        
          
           >(HeadersBase, headerMap) {}",2,1
1414,2018-12-25T06:34:41Z,2018-12-27T02:09:51Z,2018-12-27T02:09:51Z,1,2,1,"As reported in gitter, if the path of working directory includes x, the [WILDCARD]x matches to unexpected part of output and the test fails.
This changes the matching pattern to more specific one.",2,0
1415,2018-12-25T08:35:50Z,2018-12-27T02:12:56Z,2018-12-27T02:12:56Z,5,197,6,"related issue #1390
rewrite set method to make it follow the specification https://xhr.spec.whatwg.org/#dom-formdata-set",2,0
1417,2018-12-25T09:04:48Z,2018-12-27T20:40:06Z,2018-12-27T20:40:06Z,5,164,10,Closes #1333,2,0
1420,2018-12-26T05:01:24Z,,2019-02-11T20:26:04Z,7,224,55,"This is built on top of #1407
This PR uses compilation SyntaxError for multiline support. This is similar to the Node approach.
Before:
> if (true) {
  console.log('Hi')
  }
Hi
undefined
> eval(""{"")
SyntaxError: Unexpected end of input
> ""{""
  ""}""
SyntaxError: Unexpected string
>

After:
> if (true) {
... console.log('Hi')
... }
Hi
undefined
> eval(""{"")
SyntaxError: Unexpected end of input
> ""{""
{
> ""}""
}
>",4,3
1423,2018-12-26T11:54:15Z,2018-12-27T09:45:59Z,2018-12-27T09:45:59Z,3,5,8,fix rename TODO issue.,3,3
1427,2018-12-29T01:31:53Z,2018-12-29T12:30:11Z,2018-12-29T12:30:11Z,2,37,4,"make Headers follow spec.
1. constructor with array
https://fetch.spec.whatwg.org/#concept-headers-fill

If header does not contain exactly two items, then throw a TypeError.

When the element in a two-dimensional array is not exactly  two, throw a TypeError.
Browser Compatibility:
Firefox:
new Headers([[]])
// TypeError: Headers require name/value tuples when being initialized by a sequence.

new Headers([['foo']])
// TypeError: Headers require name/value tuples when being initialized by a sequence. 

new Headers([['foo', 'bar']])
// Headers {  }

new Headers([['foo', 'bar', 'hello']])
// TypeError: Headers require name/value tuples when being initialized by a sequence.
Chrome:
new Headers([[]])
// TypeError: Failed to construct 'Headers': Invalid value

new Headers([['foo']])
// TypeError: Failed to construct 'Headers': Invalid value

new Headers([['foo', 'bar']])
// Headers {}

new Headers([['foo', 'bar', 'hello']])
// TypeError: Failed to construct 'Headers': Invalid value
2. header-name can not by empty string
https://tools.ietf.org/html/rfc7230#section-3.2
header-field   = field-name "":"" OWS field-value OWS

field-name     = token
field-value    = *( field-content / obs-fold )
field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
field-vchar    = VCHAR / obs-text

obs-fold       = CRLF 1*( SP / HTAB )
               ; obsolete line folding
               ; see Section 3.2.4

Browser Compatibility:
Firefox:
let headers = new Headers();
headers.set('', 'foo');  // TypeError:  is an invalid header name.
Chrome:
let headers = new Headers();
headers.set('', 'foo');  // TypeError: Failed to execute 'set' on 'Headers': Invalid name",2,0
1428,2018-12-29T14:38:34Z,2018-12-30T19:58:23Z,2018-12-30T19:58:23Z,1,4,3,"The current deno does not correctly output a string containing a null '\0' character.
> str = ""foo\0bar"";
foo
> str.length 
7
> console.log('foo\0bar')
foo
when output a string, deno converts the js-string to a C-string: const char* cstr = ToCString(str). the C-string is an array of characters terminated by NULL character '\0', but js-string did not. when we output a js-string, we can NOT convert it to c-string.
Firefox:
console.log('foo\0bar');    // foo�bar
Chrome:
console.log('foo\0bar');    // foo bar
Node.js
console.log('foo\0bar');    // foo bar",2,0
1434,2018-12-31T11:00:20Z,,2019-01-09T22:51:46Z,11,383,108,"Thought I'd use one of the ""good first issue"" tags to tinker with deno a bit 😄.
This PR is to rewrite format.py to be a deno script, Issue #1319.
@djKooks had this PR #1366 but mentioned it had unresolved issues in the PR so thought i'd give it a crack.
There's a few things I explicitly haven't done:

I haven't removed/replaced the python script (still referenced in test_format.py and travis.yml etc). Is the plan to incrementally convert the python scripts to deno scripts where feasible? test_format.py, format.py and lint.py seem like they could potentially be done together along with this change.
I haven't re-implemented fix_symlinks() (that was present in the python script), might cause issues but I didn't dig into what it's doing.
I'm not passing google_env() for gn and python_env() for yapf. By the look of it there's not an easy way to specify it in deno.run() and I didn't want go too far down that rabbit hole before getting someone to look at this.",3,5
1436,2018-12-31T16:10:10Z,2018-12-31T19:38:28Z,2018-12-31T19:38:28Z,2,40,14,Might be nicer to just render our README.md as the website... but for now let's continue maintaining it.,2,0
1437,2018-12-31T16:16:57Z,2018-12-31T19:38:53Z,2018-12-31T19:38:53Z,1,1,1,,2,0
1438,2018-12-31T20:43:52Z,2019-01-01T19:30:24Z,2019-01-01T19:30:24Z,3,9,2,,2,0
1439,2019-01-01T05:21:22Z,2019-01-03T10:41:52Z,2019-01-03T10:41:52Z,1,1,1,"If the project is checked out into a directory not called ""deno"" this
test fails.",2,0
1440,2019-01-01T15:46:11Z,2019-01-03T14:45:41Z,2019-01-03T14:45:41Z,13,413,60,"The intention is eventually to move TS into its own isolate, so that the runtime can be faster and leaner. This patch sets up the libdeno bindings for this to happen. A subsequent PR will move the compiler to a different isolate.
Ref #975",3,0
1444,2019-01-02T16:13:32Z,,2019-01-03T14:45:59Z,2,5,5,For unknown reasons Travis used to lock up when we gave it too much concurrency. This doesn't seem to be the case anymore.,2,1
1446,2019-01-02T20:32:08Z,2019-01-03T02:05:48Z,2019-01-03T02:05:48Z,1,3,0,"Closes #1445
For example, in deno_new, before:
Target 0: (deno) stopped.
(lldb) fr v
(lldb) fr v d
error: no variable named 'd' found in this frame
(lldb) ta v
error: no debug information for frame 0

After:
(lldb) fr v
(deno_config) config = {
  will_snapshot = 0
  load_snapshot = (alloc_ptr = 0x0000000000000000, alloc_len = 0, data_ptr = ""\x01"", data_len = 19512816)
  shared = (alloc_ptr = 0x0000000000000000, alloc_len = 0, data_ptr = 0x0000000000000000, data_len = 0)
  recv_cb = 0x0000000101dc2280 (deno`deno_bin::isolate::pre_dispatch::hfd6312a487ade99e at isolate.rs:319)
}
(v8::Isolate::CreateParams) params = {
  entry_hook = 0x0000000000000000
  code_event_handler = 0x0000000000000000
  constraints = {
    max_semi_space_size_in_kb_ = 0
    max_old_space_size_ = 0
    max_executable_size_ = 4385243184
    stack_limit_ = 0x0000000000000000
    code_range_size_ = 0
    max_zone_pool_size_ = 0
  }
  snapshot_blob = 0x000000010510b858
  counter_lookup_callback = 0x0000000000000000
  create_histogram_callback = 0x0000000000000000
  add_histogram_sample_callback = 0x0000000000000000
  array_buffer_allocator = 0x000000010510b880
  external_references = 0x00000001037ac980
  allow_atomics_wait = true
  only_terminate_in_safe_scope = false
}
(v8::Locker) locker = (has_lock_ = true, top_level_ = true, isolate_ = 0x0000000000000020)
(deno::DenoIsolate *) d = 0x000000010510b7a0
(v8::Isolate *) isolate = 0x0000000106000000
(v8::Isolate::Scope) isolate_scope = (isolate_ = 0x0000000106000000)
(lldb) fr v d
(deno::DenoIsolate *) d = 0x000000010510b7a0
(lldb) ta v
Global variables for /Users/kevinqian/Desktop/Programming/Deno/deno/target/debug/gen/libdeno/libdeno_jumbo_1.cc in ./target/debug/deno:
(const std::__1::piecewise_construct_t) std::__1::piecewise_construct = {}
(const int) kApiSystemPointerSize = 8
(std::__1::vector<deno::InternalFieldData *, std::__1::allocator<deno::InternalFieldData *> >) deno::deserialized_data = size=0 {}
(intptr_t [6]) deno::external_references = ([0] = 4295652208, [1] = 4295652688, [2] = 4295653168, [3] = 4295654512, [4] = 4295655392, [5] = 0)",2,1
1449,2019-01-03T03:50:41Z,2019-01-03T11:41:21Z,2019-01-03T11:41:21Z,4,91,3,"Add support to the following body init types:

Blob
URLSearchParams

Also make ./tools/http_server.py an echo server on POST /echo_server",3,0
1450,2019-01-03T14:25:18Z,2019-01-04T03:09:08Z,2019-01-04T03:09:08Z,2,19,2,closes #1448,2,1
1451,2019-01-03T15:28:43Z,2019-01-03T19:55:23Z,2019-01-03T19:55:23Z,6,12,250,Upgrades deno_std submodule.,2,0
1452,2019-01-03T16:16:14Z,2019-01-06T21:34:53Z,2019-01-06T21:34:53Z,9,143,10,"depends on  #1363.
This PR implements console.groupCollapsed as discussed in #1355 and #1363.
When groupCollapsed is called, console goes to 'collapsed mode' and stop printing newlines on logging methods. When further group/groupCollapsed methods are called, console keeps the collapsed mode. When groupEnd which corresponds to the first groupCollapsed call is called, console gets out of 'collapsed mode'.

remaining tasks (all done):

 use groupCollapsed in testing later in deno_std
 test case of console.error with console.group",3,0
1455,2019-01-03T18:35:14Z,2019-01-04T03:11:01Z,2019-01-04T03:11:01Z,7,88,97,"This reverts commit e976b3e.
There is nothing technically wrong with this commit, but it's adding
complexity to a big refactor (native ES modules #975). Since it's not
necessary and simply a philosophical preference, I will revert for now
and try to bring it back later.
cc @F001
ref #1307",3,1
1459,2019-01-04T04:53:52Z,2019-01-04T10:11:58Z,2019-01-04T10:11:58Z,1,5,7,,4,0
1460,2019-01-04T07:30:33Z,2019-01-09T17:59:46Z,2019-01-09T17:59:47Z,22,300,312,"Major refactor of internal compiler.
Before: JS and TS both were sent through the typescript compiler where their imports were parsed and handled. Both compiled to AMD JS and finally sent to V8
Now: JS is sent directly into V8. TS is sent through the typescript compiler, but tsc generates ES modules now instead of AMD. This generated JS is then dumped into V8.
This should much faster for pure JS code. It may improve TS compilation speed.
In the future this allows us to separate TS out of the runtime heap and into its own dedicated snapshot. This will result in a smaller runtime heap, and thus should be faster.
Many tests had to be disabled to make this happen. Apologies - but as you can see this is a very complex patch - and I had to sledge hammer it into place in a few places.
Also worth noting that this is necessary to support WASM
Fixes #975
Fixes #1190
Preliminary PRs:

#1462
#1463
#1476",4,0
1462,2019-01-04T17:25:07Z,2019-01-06T19:17:14Z,2019-01-06T19:17:14Z,15,534,521,"This reverts commit 3d03f5b.
This is part of the Native ESM PR #1460, but I think it will be easier to review if this one is landed first.
cc @kitsonk",2,0
1463,2019-01-04T17:28:03Z,2019-01-06T21:32:22Z,2019-01-06T21:32:22Z,4,100,3,"This is needed to support builtin modules like
import { open } from ""deno""

This is part of the Native ES modules PR #1460 ... But I think it will be easier to review and land separately.",2,1
1464,2019-01-04T18:04:44Z,2019-01-06T19:16:43Z,2019-01-06T19:16:43Z,6,18,1,cc @bartlomieju,3,0
1465,2019-01-05T00:49:52Z,,2019-01-09T00:11:23Z,11,75,64,"This PR is a (second) attempt to solve #386.
This approach proposes to include rustc and cargo binaries in the prebuilt folder.",3,3
1467,2019-01-05T17:38:59Z,2019-01-05T21:11:58Z,2019-01-05T21:11:58Z,1,6,0,See denoland/deno_install#3 (comment).,3,1
1468,2019-01-05T17:39:06Z,2019-01-05T21:11:05Z,2019-01-05T21:11:05Z,1,6,0,See denoland/deno_install#3 (comment).,3,1
1469,2019-01-06T15:46:16Z,2019-01-26T21:10:39Z,2019-01-26T21:10:39Z,4,24,3,"Hi :) I found FIXME comment in ops.rs. I think it is better to use int instead of double for timeout type in flatbuffer. Because delay is rounded by typescript side like following. If not, please reject this PR.
https://github.com/denoland/deno/blob/master/js/timers.ts#L180-L184",4,10
1471,2019-01-06T22:29:55Z,2019-01-07T15:36:09Z,2019-01-07T15:36:09Z,4,105,86,,2,0
1473,2019-01-06T23:17:24Z,2019-01-07T22:33:07Z,2019-01-07T22:33:08Z,3,9,2,,2,0
1475,2019-01-07T05:22:35Z,2019-01-15T17:19:59Z,2019-01-15T17:19:59Z,13,99,17,"Aiming to close #1386. This is built on top of #1460
The only difference from running is that the modules are compiled but NOT evaluated",4,13
1476,2019-01-07T16:16:01Z,2019-01-08T19:44:07Z,2019-01-08T19:44:07Z,10,470,55,"This adds the ability to spawn additional Isolates from Rust and send
and receive messages from them. This is preliminary work to support
running the typescript compiler in a separate isolate and thus support
native ES modules (#975).
This is a prerequisite commit to #1460",3,0
1479,2019-01-08T16:47:50Z,2019-01-08T19:42:54Z,2019-01-08T19:42:54Z,1,4,2,"When we called js_filename.as_ptr() without using CString it wasn't
necessarally null terminated, which was creating spurious failures.",2,1
1482,2019-01-08T19:34:25Z,2019-01-09T16:59:54Z,2019-01-09T16:59:55Z,1,24,0,,5,9
1485,2019-01-09T00:53:14Z,,2019-03-04T04:40:51Z,1,41,0,"example file:
console.log(""hello"")
console.log(""你好"")      // Chinese
console.log(""こんにちは"") // Japanese
console.log(""Привет"")    // Russian
in PowerShell:

when using a Linux-like environment on Windows like git bash, MinGW64, can output the correct result.",3,2
1487,2019-01-09T15:36:59Z,2019-01-10T01:45:19Z,2019-01-10T01:45:19Z,1,1,1,,2,0
1491,2019-01-09T18:55:55Z,2019-01-09T20:32:06Z,2019-01-09T20:32:06Z,1,3,3,Fixes #1490,3,1
1492,2019-01-09T23:19:27Z,2019-01-10T01:52:14Z,2019-01-10T01:52:14Z,2,21,16,We lost it in 0ceb554,2,0
1493,2019-01-10T00:23:59Z,2019-01-14T01:36:21Z,2019-01-14T01:36:21Z,9,1710,1054,,2,2
1498,2019-01-10T20:17:12Z,,2019-02-02T07:00:44Z,5,28,4,"Before:
$ deno ./not-a-valid-remote-module.ts
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: DenoError { repr: Simple(NotFound, ""Cannot resolve module \""./not-a-valid-remote-module.ts\"" from \"".\"""") }', libcore\result.rs:1009:5

After:
$ deno ./not-a-valid-remote-module.ts
NotFound: Cannot resolve module ""./not-a-valid-remote-module.ts"" from "".""",3,1
1501,2019-01-11T20:29:43Z,2019-01-12T02:44:27Z,2019-01-12T02:44:27Z,9,214,21,,4,2
1502,2019-01-12T05:29:40Z,2019-01-12T14:14:10Z,2019-01-12T14:14:10Z,3,23,18,"Avoid show confusing lines in gen/bundle/main.js that throws error.
Also uses as_ref avoid some unneeded clones.
For a file bad_import.ts:
import ""non-existent.txt"";
Run deno bad_import.ts:
Before:
gen/bundle/main.js:4339:17
          return new DenoError(kind, base.error());

NotFound: Cannot resolve module ""non-existent.txt"" from ""/Users/kevinqian/Desktop/Programming/Deno/test/bad_import.ts""
    at DenoError (deno/js/errors.ts:19:5)
    at maybeError (deno/js/errors.ts:38:12)
    at maybeThrowError (deno/js/errors.ts:26:15)
    at sendSync (deno/js/dispatch.ts:67:5)
    at codeFetch (deno/js/os.ts:46:19)
    at resolveModule (deno/js/compiler.ts:357:38)
    at moduleNames.map.name (deno/js/compiler.ts:519:31)
    at resolveModuleNames (deno/js/compiler.ts:511:24)
    at compilerHost.resolveModuleNames (deno/third_party/node_modules/typescript/lib/typescript.js:32750:71)
    at resolveModuleNamesWorker (deno/third_party/node_modules/typescript/lib/typescript.js:20688:69)

After:
NotFound: Cannot resolve module ""non-existent.txt"" from ""/Users/kevinqian/Desktop/Programming/Deno/test/bad_import.ts""
    at DenoError (deno/js/errors.ts:19:5)
    at maybeError (deno/js/errors.ts:38:12)
    at maybeThrowError (deno/js/errors.ts:26:15)
    at sendSync (deno/js/dispatch.ts:67:5)
    at codeFetch (deno/js/os.ts:46:19)
    at resolveModule (deno/js/compiler.ts:357:38)
    at moduleNames.map.name (deno/js/compiler.ts:519:31)
    at resolveModuleNames (deno/js/compiler.ts:511:24)
    at compilerHost.resolveModuleNames (deno/third_party/node_modules/typescript/lib/typescript.js:32750:71)
    at resolveModuleNamesWorker (deno/third_party/node_modules/typescript/lib/typescript.js:20688:69)",2,0
1504,2019-01-12T15:20:39Z,2019-01-12T16:29:46Z,2019-01-12T16:29:46Z,2,29,2,"./tools/permission_prompt_test.ts
./tools/permission_prompt_test.py
Added --allow-run flag test code in two files",2,0
1505,2019-01-12T18:24:21Z,2019-01-23T12:20:54Z,2019-01-23T12:20:54Z,8,132,2,This PR builds off of my previous one to extend Event with the CustomEvent Web API spec.,4,3
1507,2019-01-13T12:59:16Z,2019-01-13T14:39:24Z,2019-01-13T14:39:24Z,3,7,7,,2,0
1511,2019-01-13T19:41:50Z,2019-01-13T20:52:42Z,2019-01-13T20:52:42Z,1,4,4,,2,0
1512,2019-01-13T20:10:18Z,2019-01-14T04:44:12Z,2019-01-14T04:44:12Z,4,124,299,"Resolves #1488
This cleans up enough to be able to take a look at some of the duplicate loading issues and break the compiler out to its own image.",2,0
1513,2019-01-13T22:33:31Z,2019-01-14T00:54:31Z,2019-01-14T00:54:31Z,2,3,0,Adds the rid property to Conn to allow access to the resource ID of the incoming connection.,3,1
1514,2019-01-14T00:38:37Z,2019-01-14T05:18:43Z,2019-01-14T05:18:43Z,3,4,3,"Because ESM does not support export = assignments, nor allow ""spreading"" of exports, JSON modules when targeting ESM need to use a export default.  From a type checking perspective, though, TypeScript assumes JSON modules will be an export = affair, even when targeting ESM as the output.  This means we to add the esModuleInterop flag to the compiler options.  This doesn't change the emit, but allows TypeScript to assume that the default import of a module is the same as the namespace import.
This does mean that to properly import JSON modules, we have no option but to deal with the default import, so instead of:
import * as config from ""./config.json"";
Only the following is supported:
import config from ""./config.json"";
This currently includes #1512 as well, which I will rebase when that is merged.
Rebased and ready. @ry",2,0
1515,2019-01-14T00:47:56Z,2019-01-14T03:14:59Z,2019-01-14T03:15:00Z,5,200,15,Fixes #1510,2,0
1518,2019-01-14T02:38:08Z,2019-01-14T04:18:26Z,2019-01-14T04:18:26Z,6,12,10,,3,0
1519,2019-01-14T07:02:36Z,2019-01-14T21:53:17Z,2019-01-14T21:53:17Z,22,287,172,"This PR updates deno to using the 2018 edition and its idioms.
It runs cargo fix --edition and cargo fix --edition-idioms (with some hand-tweaks).
Reboot of #1306.
Note: This makes the minimum version of rust to compile deno 1.31.",2,0
1520,2019-01-14T10:28:28Z,,2019-01-15T15:17:34Z,2,15,4,"The return value from builder.create is fine. If a folder with
that path already exists, then create returns Ok, because we are in
recursive mode. But if it is a file that already exists on that path,
then we should not swallow the error but return it.",3,2
1522,2019-01-14T15:24:44Z,2019-01-15T06:43:03Z,2019-01-15T06:43:03Z,1,1,1,I just wanted to see the code used in the benchmark.,4,1
1525,2019-01-15T03:17:52Z,2019-01-15T04:21:16Z,2019-01-15T04:21:16Z,1,1,1,"Because clang-cl doesn't support msvc-style /showIncludes header dep detection, at least not in such way that it works properly with sccache.",2,7
1527,2019-01-15T06:39:32Z,2019-01-15T12:06:26Z,2019-01-15T12:06:26Z,12,32,76,,3,0
1528,2019-01-15T13:50:59Z,2019-01-17T20:09:45Z,2019-01-17T20:09:45Z,21,209,56,closes #1319,3,2
1529,2019-01-15T14:04:50Z,2019-01-15T17:18:03Z,2019-01-15T17:18:03Z,2,3,2,,2,1
1530,2019-01-15T15:16:34Z,2019-01-18T04:39:07Z,2019-01-18T04:39:07Z,9,73,33,cc @cody,2,1
1531,2019-01-15T18:11:42Z,2019-01-16T16:25:27Z,2019-01-16T16:25:27Z,1,0,9,On some nameservers bad domain names still resolve.,2,0
1532,2019-01-15T18:14:14Z,2019-01-16T14:39:29Z,2019-01-16T14:39:29Z,1,0,1,Tested locally. It's fine.,2,0
1534,2019-01-16T04:29:19Z,2019-01-16T22:57:16Z,2019-01-16T22:57:16Z,4,29,6,"The globalThis proposal has reached Stage 3: https://github.com/tc39/proposal-global and has been in V8 for a while now.
This PR adds it to the runtime type library for Deno so that users can access it.  It shares the same interface as window and globalThis === window without any additional runtime code to be added.
I tried to replace our use of globalEval with globalThis in the runtime code, but it appears that when snapshotting, globalThis is not available for some reason.",2,1
1537,2019-01-16T11:27:10Z,2019-01-16T15:27:18Z,2019-01-16T15:27:18Z,1,2,2,,3,1
1539,2019-01-16T22:55:54Z,,2019-01-17T18:12:07Z,1,0,4,,2,0
1540,2019-01-17T00:39:45Z,2019-01-17T17:29:46Z,2019-01-17T17:29:46Z,2,3,2,,2,0
1541,2019-01-17T11:28:01Z,2019-01-17T19:44:32Z,2019-01-17T19:44:32Z,2,2,2,"Fix copyright from the output of the types flag
before :
$ deno --types
// Copyright 2018 the Deno authors. All rights reserved. MIT license.

/// <reference no-default-lib=""true"" />
/// <reference lib=""esnext"" />

after :
$ deno --types
// Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.

/// <reference no-default-lib=""true"" />
/// <reference lib=""esnext"" />",2,0
