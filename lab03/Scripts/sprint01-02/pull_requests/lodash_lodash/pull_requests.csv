number,created_at,merged_at,closed_at,files,additions,deletions,body_text,participants,comments
2745,2016-10-20T15:39:34Z,2016-10-20T19:03:13Z,2016-10-20T19:03:13Z,2,6,6,,2,5
2794,2016-11-06T22:55:50Z,2016-11-07T00:43:26Z,2016-11-07T00:43:26Z,2,15,3,"This is WIP for issue #723
Added tests for both pick and omit.
Implemented for _.pick at the moment.
Would like some guidance / ideas on how to implement it for _.omit.
the 'cloneDeepWith' suggestion on issue #723 will not work because it miss the prototype's properties.",2,2
2849,2016-11-24T20:09:28Z,2016-11-24T21:12:14Z,2016-11-24T21:12:14Z,1,1,1,Fixes #2848,3,3
2932,2017-01-13T18:51:25Z,2017-01-16T00:27:42Z,2017-01-16T00:27:43Z,85,85,16,"Would this be helpful?
We can add more of these if this is approved.
This could really help people discover functions in Lodash, that they didn't know about before.",2,8
2986,2017-02-09T10:58:22Z,2017-02-09T16:19:32Z,2017-02-09T16:19:32Z,1,5,5,👍,3,2
2987,2017-02-09T12:40:14Z,,2017-02-09T16:18:21Z,3,3,3,"It's a style matter, but reasonable to use parentheses when you use function body.
So use var => fn(var) or (var) => {  fn(var) }, what do you think?",3,5
2996,2017-02-11T16:24:13Z,2017-02-11T19:42:20Z,2017-02-11T19:42:20Z,1,1,1,"isSymbol.js#L20
When isKey function checks types, isSymbol function checks type of value.",3,2
3264,2017-07-16T22:16:42Z,2017-07-17T01:11:00Z,2017-07-17T01:11:00Z,1,1,1,"""that accepts"" -> ""that it accepts""",3,4
3308,2017-08-08T19:42:34Z,,2017-08-10T14:30:35Z,1,1,2,Checking the 0th position of the string should be quicker than a regular expression,3,3
3332,2017-08-23T15:43:53Z,,2017-08-23T16:52:19Z,1,1,1,"This PR extend sorting
Now available only lower case sorting 'asc' || 'desc'
And after this PR will be  'asc' || 'desc' || 'ASC' || 'DESC'
Actual Result
 const users = [
    { 'user': 'fred',   'age': 48 },
    { 'user': 'barney', 'age': 34 },
    { 'user': 'fred',   'age': 40 },
    { 'user': 'barney', 'age': 36 }
  ]
  // Sort by `user` in ascending order and by `age` in descending order.
 _.orderBy(users, ['user', 'age'], ['asc', 'desc'])
 // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]


Now will we can use
  // Sort by `user` in ascending order and by `age` in descending order.
 _.orderBy(users, ['user', 'age'], ['ASC', 'DESC'])
 // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]",4,2
3417,2017-10-09T15:26:55Z,,2017-10-09T16:36:30Z,1,4,1,Even if func is object it will pass the if condition. So i guess we need to explicitly check whether func is present and  it is a function.,3,2
3465,2017-11-01T22:24:22Z,,2017-11-02T17:49:53Z,1,8,3,"Recently we got several complains from our users about process crash due to OutOfMemory error. We've figured out, that the leak happens when one truncates a long string and passes it to the logger. More details here appium/appium#9543
And this Chromium bug report contains more detailed description of what is happening under the hood.
So, since we use _.truncate method to perform strings truncation, it might be a good idea to incorporate the fix/workaround here as well, so other module users don't suffer from this problem anymore.",7,17
3479,2017-11-07T06:13:40Z,2017-11-07T14:28:18Z,2017-11-07T14:28:18Z,1,2,1,"New version is constantly faster both in Firefox Nightly and Chromium Nightly: https://jsfiddle.net/dzym8svy/
Some projects call this function very often and performance hit can be significant in that case.",4,2
3764,2018-04-22T22:16:54Z,2018-05-01T19:22:50Z,2018-05-01T19:22:50Z,2,16,7,"See #3763 for rationale.

This may negate the need for locale-specific fixes in compareAscending.js such as #3602.
Test snippet below to be added to other orderBy tests

    QUnit.test('should work with `orders` specified as compare functions', function(assert) {
      assert.expect(3);

      function compareStrings(a, b) { return a < b ? -1 : a > b ? 1 : 0 }
      function compareStringsDesc(a, b) { return -compareStrings(a, b) }
      function compareNumbers(a, b) { return a - b }

      var actual = _.orderBy(objects, 'a', compareStringsDesc);
      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);

      actual = _.orderBy(objects, ['a'], [compareStringsDesc]);
      assert.deepEqual(actual, [objects[1], objects[3], objects[0], objects[2]]);

      actual = _.orderBy(objects, ['a', 'b'], [compareStringsDesc, compareNumbers]);
      assert.deepEqual(actual, [objects[3], objects[1], objects[2], objects[0]]);
    });",4,5
3840,2018-06-20T20:28:54Z,,2018-08-31T06:58:55Z,17,842,724,"Fix inconsistent merging of multiple sources to function property
#3752",5,9
3861,2018-07-10T04:58:18Z,2018-07-10T16:47:20Z,2018-07-10T16:47:20Z,1,3,1,This is clearly an area of confusion -- see this question as an example. Hopefully this helps.,3,4
3926,2018-08-28T23:10:42Z,,2018-08-31T06:59:18Z,2,17,1,"To fix https://github.com/lodash/lodash/issues/3359, modified reHasUnicodeWord to remove an unnecessary comma which made the regex greedy, this is only a test regex and not a matching regex. Added unit tests, this now should run under 5 ms instead of over 1000 ms for huge 50k+ char words.",7,15
4061,2018-11-14T04:18:49Z,2018-11-18T03:33:36Z,2018-11-18T03:33:36Z,4,6,9,This PR  includes arrow function change.,2,3
4087,2018-11-29T05:05:50Z,,2018-11-30T00:59:15Z,1,12,6,"Run the script below in Chrome devtools to test the performance difference
function createRoundNew(methodName) {
  const func = Math[methodName]
  return (number, precision) => {
    precision = precision == null ? 0 : (precision >= 0 ? Math.min(precision, 292) : Math.max(precision, -292))
    if (precision) {
      precision = Number.isInteger(precision) ? precision : Math.floor(precision)
      let modifier = 1
      if (precision > 0) {
        for (let i = 0; i < precision; i++) {
          number *= 10
          modifier *= 10
        }
      } else {
        modifier = Math.pow(10, precision)
        number *= modifier
      }

      return func(number) / modifier
    }
    return func(number)
  }
}

function createRoundOld(methodName) {
  const func = Math[methodName]
  return (number, precision) => {
    precision = precision == null ? 0 : (precision >= 0 ? Math.min(precision, 292) : Math.max(precision, -292))
    if (precision) {
      // Shift with exponential notation to avoid floating-point issues.
      // See [MDN](https://mdn.io/round#Examples) for more details.
      let pair = `${number}e`.split('e')
      const value = func(`${pair[0]}e${+pair[1] + precision}`)

      pair = `${value}e`.split('e')
      return +`${pair[0]}e${+pair[1] - precision}`
    }
    return func(number)
  }
}

const roundOld = createRoundOld('round')
const roundNew = createRoundNew('round')


// Setup Sample
var sample = []
for(let i = 0; i < 100000; i++) {
	sample[i] = performance.now() * Math.random()
}

// Test if output of both methods match
for(let i = 0; i < sample.length; i++) {
	console.assert(roundOld(sample[i], 3) === roundNew(sample[i], 3))
}


// Perfomance testing
let t0 = performance.now()
for(let i = 0; i < sample.length; i++) {
	roundOld(sample[i], 3)
}
console.log('Old method took', performance.now() - t0)

t0 = performance.now()
for(let i = 0; i < sample.length; i++) {
	roundNew(sample[i], 3)
}
console.log('New method took', performance.now() - t0)",4,9
4140,2019-01-07T06:08:41Z,,2019-07-09T17:20:11Z,2,71,2,"Summary:
Resolves #4067. Performance-wise, this incurs some extra administrative
overhead on all invocations. In exchange, we can see order-of-magnitude
improvements in cases where there are expensive “fallback iteratees”
that are rarely hit (e.g., a JSON.stringify).
Running the sortBy benchmarks included in perf/perf.js gives the
following results on my laptop (Intel i5-4300U with Chrome 67 on Linux):


“_.sortBy with callback”:

before this patch: 59,249 ops/sec ±2.65% (56 runs sampled)
after this patch: 54,504 ops/sec ±2.91% (56 runs sampled)
(new / old) ratio: 0.92 ± 0.05 (0.87–0.97)



“_.sortBy with property name”:

before this patch: 98,956 ops/sec ±2.37% (58 runs sampled)
after this patch: 93,793 ops/sec ±1.46% (58 runs sampled)
(new / old) ratio: 0.94 ± 0.04 (0.91–0.98)



…and these on a workstation (Intel W-2135 with Chrome 71 on Linux):


“_.sortBy with callback”:

before this patch: 66,071 ops/sec ±2.39% (61 runs sampled)
after this patch: 58,707 ops/sec ±2.82% (58 runs sampled)
(new / old) ratio: 0.89 ± 0.05 (0.84–0.94)



“_.sortBy with property name”:

before this patch: 132,945 ops/sec ±2.71% (56 runs sampled)
after this patch: 129,162 ops/sec ±3.30% (61 runs sampled)
(new / old) ratio: 0.97 ± 0.06 (0.92–1.03)



(Best-of-3 timing used in each case.)
We can see that there is usually a statistically significant decrease
in the overall performance in these existing benchmarks.
This commit does not add a new benchmark to observe the best-case
behavior because the Underscore.js API does not support multiple
iteratees in sortBy, which would be needed for a fair comparison.
Test Plan:
The newly added test cases fail before this commit, but pass after it.
All existing tests pass (npm run validate passes).
wchargin-branch: sortBy-lazy",3,4
4156,2019-01-17T01:27:45Z,,2019-01-29T08:49:48Z,2,15,3,"async generator function have a string representation that isFunction did not check against.
While adding the test for this, I also noticed that all the tests for isFunction only tested if Function('string of function to test') is a function, not the actual function that was supposed to be tested.",5,6
4267,2019-04-15T15:05:38Z,,2023-01-04T03:42:36Z,2,26,4,"This is an enhancement to Lodash that extends defaultTo with an optional resolveEmpty parameter. If supplied, resolveEmpty will be used to determine whether the passed value is empty and that defaultValue should be returned.
This would allow the following usage examples, amongst many others:

Default to a value when given a value considered empty by lodash.isEmpty:

defaultTo('', defaultValue, isEmpty);

Default to a value after running lodash.attempt on a statement that may return an error using lodash.isError.

defaultTo(attempt(require, filePath), defaultValue, isError);",4,3
4272,2019-04-17T00:22:23Z,2019-04-18T20:04:18Z,2019-04-18T20:04:18Z,2,69,1,"This fixes #4266
Tested with Infinity, -Infinity, _.round(), _.floor() and _.ceil().
This is a second PR for the same issue. I'm closing the previous PR because I messed up somehow and there were other commits (not mine) in there.
This was branched off of 4.17.12-pre.
Happy to updates with any improvements needed.",2,6
4290,2019-05-08T20:55:55Z,2019-05-09T20:54:13Z,2019-05-09T20:54:13Z,1,3,2,"this patch fixes a problem that breaks lodash in the presence of object prototype functions.  the issue arises from lodash's failure to check the .hasOwnProperty() on keys within the realNames object, which pulls up these methods when it shouldn't
WARNING: there may be other places in the code failing this but so far this is the only instance I've discovered",3,5
4337,2019-06-19T11:45:48Z,2019-06-24T16:18:29Z,2019-06-24T16:18:29Z,3,24,4,"The PR is fixing a Prototype Pollution vulnerability in:

https://www.npmjs.com/package/lodash.defaultsdeep
https://www.npmjs.com/package/lodash.merge
https://www.npmjs.com/package/lodash.mergewith

You can see details about similar vulnerability here: https://snyk.io/vuln/SNYK-JS-LODASH-73638",2,1
4355,2019-07-08T14:23:44Z,2019-07-09T16:09:56Z,2019-07-09T16:09:56Z,1,8,3,"Prototype pollution is a common problem for Javascript applications.
This paper (PDF-link) is a reasonably comprehensive resource on the subject. It demonstrates that the problem is quite ubiquitous, and how it can turn into an unauthenticated RCE in Ghost, where the attack chain starts with a prototype pollution vulnerability in lodash.merge. Handlebars is used as the code execution gadget, but as Ghost also uses _.template it could have targeted that as well.
Lodash has had multiple prototype pollution vulnerabilities, including recently.
If _.template is ever invoked after the prototype has been polluted, an attacker can execute any Javascript, as sourceURL and variable are looked up via an options object and injected into the Javascript that gets executed. If the caller is not passing those options (which is the most common usage), then the values from the potentially polluted prototype would be used instead. Here's the smallest possible POC:
// If the prototype is polluted via some other vulnerability
> ({}).__proto__.sourceURL = '\nconsole.log(""injected code here"")'
'\nconsole.log(""injected code here"")'
// ... then arbitrary code can be injected
> _.template('hey')({})
injected code here
'hey'

I initially reached out via npm security, and got the feedback that this is not considered an issue. (In the thread with NPM security I also provided examples of how to weaponise this against real applications instead of just the repl example. I can provide additional examples privately.)
I think it's worth fixing, as the fix is simple. Applications that are susceptible to prototype pollution will still need fixing, but at least the commonly used _.template shouldn't provide easy code execution.
(I've signed the CLA.)",2,4
4365,2019-07-15T04:31:08Z,,2019-07-15T07:47:29Z,1,1,1,Hello! I am really interested in adding my quota to the community. I am a javascript newbie.,4,2
4416,2019-08-17T16:30:03Z,2019-08-17T17:44:54Z,2019-08-17T17:44:54Z,10,29,26,This fixes issue issue #4415,3,2
4418,2019-08-17T19:25:57Z,2019-08-22T23:07:44Z,2019-08-22T23:07:44Z,1,22,11,"It enables the create tests and adapt it to match new behavior
Had to change how created objects are compared because node assert.deepStrictEqual takes into consideration to prototype
For falsey and primitive as prototype, just check if is a object
Let me know if there's a better way to handle these tests",2,1
4419,2019-08-17T20:06:41Z,,2022-04-21T19:41:22Z,91,3151,3323,"Hi @jdalton, I thought I would help with code consistency between your test files and the other lodash files by adding the test/*.test.js to your linting in npm run style. Most of this was done by eslint with the --fix flag. I just added mocha and _ to the configurations. I ran npm run test:wip and it passes. It is up to you if you want the feature, but I thought I put it out there.",4,3
4432,2019-08-21T23:32:09Z,2019-08-22T23:08:14Z,2019-08-22T23:08:14Z,2,1,1,Fix test passing falsy values,2,1
4441,2019-08-24T23:39:53Z,2019-08-25T20:25:43Z,2019-08-25T20:25:43Z,2,6,22,It uses native array map instead of custom one and assumes Symbol.prototype.toString exists,3,1
4444,2019-08-25T12:44:53Z,,2019-08-30T16:42:40Z,2,21,0,#4438,3,2
4453,2019-08-30T13:45:51Z,2019-08-30T20:38:49Z,2019-08-30T20:38:49Z,2,28,1,fix issue #4438,3,5
4464,2019-09-12T14:07:21Z,,2023-01-04T03:42:58Z,1,37,7,"Behaviour shown by addition is as follows:-
1.chunk(['a', 'b', 'c', 'd'], 2)
// => [['a', 'b'], ['c', 'd']]
2.chunk(['a', 'b', 'c', 'd'], 3)
// => [['a', 'b', 'c'], ['d']]
3.chunk(['a', 'b', 'c', 'd', 3, 'e')
// => [['a', 'b', 'c'], ['d', 'e', 'e']]
4.chunk(['a', 'b', 'c', 'd', 3, null)
// => [['a', 'b', 'c'], ['d', null, null]]",5,10
4479,2019-09-25T06:20:54Z,,2019-10-03T21:02:49Z,1,5,3,"to FIX: _.cloneDeep([{'a':1, 'b':0}]) => [{'a':1}]",4,2
4495,2019-10-01T17:36:32Z,,2019-10-03T21:01:58Z,1,28,0,Takes customizer to customize values retrieved from _.get,3,4
